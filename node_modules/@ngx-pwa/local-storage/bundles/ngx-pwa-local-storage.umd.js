(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-pwa/local-storage', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-pwa'] = global['ngx-pwa'] || {}, global['ngx-pwa']['local-storage'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,i0,rxjs,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ LOCAL_STORAGE_PREFIX = new i0.InjectionToken('localStoragePrefix', { providedIn: 'root', factory: function () { return ''; } });
    /**
     * @param {?} config
     * @return {?}
     */
    function localStorageProviders(config) {
        return [
            config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : []
        ];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LocalStorageDatabase = (function () {
        function LocalStorageDatabase(userPrefix) {
            if (userPrefix === void 0) {
                userPrefix = null;
            }
            this.userPrefix = userPrefix;
            /* Initializing native localStorage right now to be able to check its support on class instanciation */
            this.prefix = '';
            if (userPrefix) {
                this.prefix = userPrefix + "_";
            }
        }
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        LocalStorageDatabase.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                var /** @type {?} */ unparsedData = localStorage.getItem("" + this.prefix + key);
                var /** @type {?} */ parsedData = null;
                if (unparsedData != null) {
                    try {
                        parsedData = JSON.parse(unparsedData);
                    }
                    catch (error) {
                        return rxjs.throwError(new Error("Invalid data in localStorage."));
                    }
                }
                return rxjs.of(parsedData);
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorageDatabase.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                if (data !== undefined) {
                    localStorage.setItem("" + this.prefix + key, JSON.stringify(data));
                }
                return rxjs.of(true);
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorageDatabase.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                localStorage.removeItem("" + this.prefix + key);
                return rxjs.of(true);
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorageDatabase.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                localStorage.clear();
                return rxjs.of(true);
            };
        LocalStorageDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LocalStorageDatabase.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
            ];
        };
        /** @nocollapse */ LocalStorageDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(i0.inject(LOCAL_STORAGE_PREFIX, 8)); }, token: LocalStorageDatabase, providedIn: "root" });
        return LocalStorageDatabase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IndexedDBDatabase = (function () {
        /**
         * Connects to IndexedDB
         */
        function IndexedDBDatabase(prefix) {
            if (prefix === void 0) {
                prefix = null;
            }
            this.prefix = prefix;
            /**
             * IndexedDB database name for local storage
             */
            this.dbName = 'ngStorage';
            /**
             * IndexedDB object store name for local storage
             */
            this.objectStoreName = 'localStorage';
            /**
             * IndexedDB key path name for local storage (where an item's key will be stored)
             */
            this.keyPath = 'key';
            /**
             * IndexedDB data path name for local storage (where items' value will be stored)
             */
            this.dataPath = 'value';
            /**
             * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
             * so a fallback can be needed.
             */
            this.fallback = null;
            if (prefix) {
                this.dbName = prefix + "_" + this.dbName;
            }
            /* Creating the RxJS ReplaySubject */
            this.database = new rxjs.ReplaySubject();
            /* Connecting to IndexedDB */
            this.connect(prefix);
        }
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        IndexedDBDatabase.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.getItem(key);
                }
                /* Opening a trasaction and requesting the item in local storage */
                return this.getItemFromTransaction(key);
            };
        /**
         * Internal method to factorize the getter for getItem and setItem,
         * the last one needing to be from a preexisting transaction
         * @template T
         * @param {?} key The item's key
         * @param {?=} transactionParam Optional pre-existing transaction to use for the read request
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        IndexedDBDatabase.prototype.getItemFromTransaction = /**
         * Internal method to factorize the getter for getItem and setItem,
         * the last one needing to be from a preexisting transaction
         * @template T
         * @param {?} key The item's key
         * @param {?=} transactionParam Optional pre-existing transaction to use for the read request
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key, transactionParam) {
                var _this = this;
                var /** @type {?} */ transaction$ = transactionParam ? rxjs.of(transactionParam) : this.transaction();
                return transaction$.pipe(operators.map(function (transaction) { return transaction.get(key); }), operators.mergeMap(function (request) {
                    /* Listening to the success event, and passing the item value if found, null otherwise */
                    var /** @type {?} */ success = ((rxjs.fromEvent(request, 'success'))).pipe(operators.map(function (event) { return ((event.target)).result; }), operators.map(function (result) { return result && (_this.dataPath in result) ? ((result[_this.dataPath])) : null; }));
                    /* Merging success and errors events and autoclosing the observable */
                    return ((rxjs.race(success, _this.toErrorObservable(request, "getter"))))
                        .pipe(operators.first());
                }), operators.first());
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        IndexedDBDatabase.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.setItem(key, data);
                }
                /* Storing null is not correctly supported by IndexedDB and unnecessary here */
                if (data == null) {
                    return rxjs.of(true);
                }
                /* Transaction must be the same for read and write, to avoid concurrency issues */
                var /** @type {?} */ transaction$ = this.transaction('readwrite');
                var /** @type {?} */ transaction;
                /* Opening a transaction */
                return transaction$.pipe(operators.tap(function (value) {
                    transaction = value;
                }), /* Check if the key already exists or not */ operators.mergeMap(function () { return _this.getItemFromTransaction(key, transaction); }), operators.map(function (existingData) { return (existingData == null) ? 'add' : 'put'; }), operators.mergeMap(function (method) {
                    var /** @type {?} */ request;
                    /* Adding or updating local storage, based on previous checking */
                    switch (method) {
                        case 'add':
                            request = transaction.add((_a = {}, _a[_this.dataPath] = data, _a), key);
                            break;
                        case 'put':
                        default:
                            request = transaction.put((_b = {}, _b[_this.dataPath] = data, _b), key);
                            break;
                    }
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return ((rxjs.race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "setter"))))
                        .pipe(operators.first());
                    var _a, _b;
                }), operators.first());
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        IndexedDBDatabase.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.removeItem(key);
                }
                /* Opening a transaction and checking if the item exists in local storage */
                return this.getItem(key).pipe(operators.mergeMap(function (data) {
                    /* If the item exists in local storage */
                    if (data != null) {
                        /* Opening a transaction */
                        return _this.transaction('readwrite').pipe(operators.mergeMap(function (transaction) {
                            /* Deleting the item in local storage */
                            var /** @type {?} */ request = transaction.delete(key);
                            /* Merging success (passing true) and error events and autoclosing the observable */
                            return ((rxjs.race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "remover"))))
                                .pipe(operators.first());
                        }));
                    }
                    /* Passing true if the item does not exist in local storage */
                    return rxjs.of(true);
                }), operators.first());
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        IndexedDBDatabase.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.clear();
                }
                /* Opening a transaction */
                return this.transaction('readwrite').pipe(operators.mergeMap(function (transaction) {
                    /* Deleting all items from local storage */
                    var /** @type {?} */ request = transaction.clear();
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return ((rxjs.race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "clearer"))))
                        .pipe(operators.first());
                }), operators.first());
            };
        /**
         * Connects to IndexedDB and creates the object store on first time
         */
        /**
         * Connects to IndexedDB and creates the object store on first time
         * @param {?=} prefix
         * @return {?}
         */
        IndexedDBDatabase.prototype.connect = /**
         * Connects to IndexedDB and creates the object store on first time
         * @param {?=} prefix
         * @return {?}
         */
            function (prefix) {
                var _this = this;
                if (prefix === void 0) {
                    prefix = null;
                }
                var /** @type {?} */ request;
                /* Connecting to IndexedDB */
                try {
                    request = indexedDB.open(this.dbName);
                }
                catch (error) {
                    /* Fallback storage if IndexedDb connection is failing */
                    this.setFallback(prefix);
                    return;
                }
                /* Listening the event fired on first connection, creating the object store for local storage */
                ((rxjs.fromEvent(request, 'upgradeneeded')))
                    .pipe(operators.first())
                    .subscribe(function (event) {
                    /* Getting the database connection */
                    var /** @type {?} */ database = (((event.target)).result);
                    /* Checking if the object store already exists, to avoid error */
                    if (!database.objectStoreNames.contains(_this.objectStoreName)) {
                        /* Creating the object store for local storage */
                        database.createObjectStore(_this.objectStoreName);
                    }
                });
                /* Listening the success event and converting to an RxJS Observable */
                var /** @type {?} */ success = (rxjs.fromEvent(request, 'success'));
                /* Merging success and errors events */
                ((rxjs.race(success, this.toErrorObservable(request, "connection"))))
                    .pipe(operators.first())
                    .subscribe(function (event) {
                    /* Storing the database connection for further access */
                    /* Storing the database connection for further access */
                    _this.database.next(/** @type {?} */ (((event.target)).result));
                }, function () {
                    /* Fallback storage if IndexedDb connection is failing */
                    /* Fallback storage if IndexedDb connection is failing */
                    _this.setFallback(prefix);
                });
            };
        /**
         * Opens an IndexedDB transaction and gets the local storage object store
         * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations
         * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable
         */
        /**
         * Opens an IndexedDB transaction and gets the local storage object store
         * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
         * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
         */
        IndexedDBDatabase.prototype.transaction = /**
         * Opens an IndexedDB transaction and gets the local storage object store
         * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
         * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
         */
            function (mode) {
                var _this = this;
                if (mode === void 0) {
                    mode = 'readonly';
                }
                /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */
                return this.database
                    .pipe(operators.map(function (database) { return database.transaction([_this.objectStoreName], mode).objectStore(_this.objectStoreName); }));
            };
        /**
         * Transforms a IndexedDB success event in an RxJS Observable
         * @param request The request to listen
         * @returns A RxJS Observable with true value
         */
        /**
         * Transforms a IndexedDB success event in an RxJS Observable
         * @param {?} request The request to listen
         * @return {?} A RxJS Observable with true value
         */
        IndexedDBDatabase.prototype.toSuccessObservable = /**
         * Transforms a IndexedDB success event in an RxJS Observable
         * @param {?} request The request to listen
         * @return {?} A RxJS Observable with true value
         */
            function (request) {
                /* Transforming a IndexedDB success event in an RxJS Observable with true value */
                return ((rxjs.fromEvent(request, 'success')))
                    .pipe(operators.map(function () { return true; }));
            };
        /**
         * Transforms a IndexedDB error event in an RxJS ErrorObservable
         * @param request The request to listen
         * @param error Optionnal details about the error's origin
         * @returns A RxJS ErrorObservable
         */
        /**
         * Transforms a IndexedDB error event in an RxJS ErrorObservable
         * @param {?} request The request to listen
         * @param {?=} error Optionnal details about the error's origin
         * @return {?} A RxJS ErrorObservable
         */
        IndexedDBDatabase.prototype.toErrorObservable = /**
         * Transforms a IndexedDB error event in an RxJS ErrorObservable
         * @param {?} request The request to listen
         * @param {?=} error Optionnal details about the error's origin
         * @return {?} A RxJS ErrorObservable
         */
            function (request, error) {
                if (error === void 0) {
                    error = "";
                }
                /* Transforming a IndexedDB error event in an RxJS ErrorObservable */
                return ((rxjs.fromEvent(request, 'error')))
                    .pipe(operators.mergeMap(function () { return rxjs.throwError(new Error("IndexedDB " + error + " issue : " + (((request.error))).message + ".")); }));
            };
        /**
         * @param {?} prefix
         * @return {?}
         */
        IndexedDBDatabase.prototype.setFallback = /**
         * @param {?} prefix
         * @return {?}
         */
            function (prefix) {
                this.fallback = new LocalStorageDatabase(prefix);
            };
        IndexedDBDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        IndexedDBDatabase.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
            ];
        };
        /** @nocollapse */ IndexedDBDatabase.ngInjectableDef = i0.defineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(i0.inject(LOCAL_STORAGE_PREFIX, 8)); }, token: IndexedDBDatabase, providedIn: "root" });
        return IndexedDBDatabase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MockLocalDatabase = (function () {
        function MockLocalDatabase() {
            this.localStorage = new Map();
        }
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        MockLocalDatabase.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                var /** @type {?} */ rawData = this.localStorage.get(key);
                return rxjs.of((rawData !== undefined) ? rawData : null);
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        MockLocalDatabase.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                this.localStorage.set(key, data);
                return rxjs.of(true);
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        MockLocalDatabase.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                this.localStorage.delete(key);
                return rxjs.of(true);
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        MockLocalDatabase.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                this.localStorage.clear();
                return rxjs.of(true);
            };
        MockLocalDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ MockLocalDatabase.ngInjectableDef = i0.defineInjectable({ factory: function MockLocalDatabase_Factory() { return new MockLocalDatabase(); }, token: MockLocalDatabase, providedIn: "root" });
        return MockLocalDatabase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} platformId
     * @param {?} prefix
     * @return {?}
     */
    function localDatabaseFactory(platformId, prefix) {
        if (common.isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {
            /* Try with IndexedDB in modern browsers */
            return new IndexedDBDatabase(prefix);
        }
        else if (common.isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {
            /* Try with localStorage in old browsers (IE9) */
            return new LocalStorageDatabase(prefix);
        }
        else {
            /* Fake database for server-side rendering (Universal) */
            return new MockLocalDatabase();
        }
    }
    /**
     * @abstract
     */
    var LocalDatabase = (function () {
        function LocalDatabase() {
        }
        LocalDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root',
                        useFactory: localDatabaseFactory,
                        deps: [
                            i0.PLATFORM_ID,
                            [new i0.Optional(), LOCAL_STORAGE_PREFIX]
                        ]
                    },] }
        ];
        /** @nocollapse */ LocalDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalDatabase_Factory() { return localDatabaseFactory(i0.inject(i0.PLATFORM_ID), i0.inject(LOCAL_STORAGE_PREFIX, 8)); }, token: LocalDatabase, providedIn: "root" });
        return LocalDatabase;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * \@todo Add other JSON Schema validation features
     */
    var JSONValidator = (function () {
        function JSONValidator() {
        }
        /**
         * Validate a JSON data against a JSON Schema
         * @param data JSON data to validate
         * @param schema Subset of JSON Schema.
         * Types are enforced to validate everything:
         * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
         * Therefore, unlike the spec, booleans are not allowed as schemas.
         * Not all validation features are supported: just follow the interface.
         * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid
         */
        /**
         * Validate a JSON data against a JSON Schema
         * @param {?} data JSON data to validate
         * @param {?} schema Subset of JSON Schema.
         * Types are enforced to validate everything:
         * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
         * Therefore, unlike the spec, booleans are not allowed as schemas.
         * Not all validation features are supported: just follow the interface.
         * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
         */
        JSONValidator.prototype.validate = /**
         * Validate a JSON data against a JSON Schema
         * @param {?} data JSON data to validate
         * @param {?} schema Subset of JSON Schema.
         * Types are enforced to validate everything:
         * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
         * Therefore, unlike the spec, booleans are not allowed as schemas.
         * Not all validation features are supported: just follow the interface.
         * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
         */
            function (data, schema) {
                /** @todo When TS 2.8, explore if this is possible with conditional types */
                if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)
                    && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))
                    || schema.type === 'array' || schema.type === 'object')
                    && !(schema.hasOwnProperty('properties') && schema.properties != null) && !(schema.hasOwnProperty('items') && schema.items != null)) {
                    throw new Error("Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.");
                }
                if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {
                    return false;
                }
                if (!this.validateEnum(data, schema)) {
                    return false;
                }
                if (!this.validateType(data, schema)) {
                    return false;
                }
                if (!this.validateItems(data, schema)) {
                    return false;
                }
                if (!this.validateProperties(data, schema)) {
                    return false;
                }
                if (!this.validateRequired(data, schema)) {
                    return false;
                }
                return true;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        JSONValidator.prototype.isObjectNotNull = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return (value !== null) && (typeof value === 'object');
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateProperties = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {
                    return true;
                }
                if (!this.isObjectNotNull(data)) {
                    return false;
                }
                /**
                     * Check if the object doesn't have more properties than expected
                     * Equivalent of additionalProperties: false
                     */
                if (Object.keys(schema.properties).length < Object.keys(data).length) {
                    return false;
                }
                /* Recursively validate all properties */
                for (var /** @type {?} */ property in schema.properties) {
                    if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {
                        if (!this.validate(data[property], schema.properties[property])) {
                            return false;
                        }
                    }
                }
                return true;
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateRequired = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('required') || (schema.required == null)) {
                    return true;
                }
                if (!this.isObjectNotNull(data)) {
                    return false;
                }
                try {
                    for (var _a = __values(schema.required), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var requiredProp = _b.value;
                        /* Checks if the property is present in the schema 'properties' */
                        if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {
                            throw new Error("'required' properties must be described in 'properties' too.");
                        }
                        /* Checks if the property is present in the data */
                        if (!data.hasOwnProperty(requiredProp)) {
                            return false;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return true;
                var e_1, _c;
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateEnum = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {
                    return true;
                }
                /** @todo Move to ES2016 .includes() ? */
                return (schema.enum.indexOf(data) !== -1);
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateType = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('type') || (schema.type == null)) {
                    return true;
                }
                switch (schema.type) {
                    case 'null':
                        return data === null;
                    case 'string':
                        return this.validateString(data, schema);
                    case 'number':
                    case 'integer':
                        return this.validateNumber(data, schema);
                    case 'boolean':
                        return typeof data === 'boolean';
                    case 'object':
                        return typeof data === 'object';
                    case 'array':
                        return Array.isArray(data);
                }
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateItems = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('items') || (schema.items == null)) {
                    return true;
                }
                if (!Array.isArray(data)) {
                    return false;
                }
                if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {
                    if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {
                        throw new Error("'maxItems' must be a non-negative integer.");
                    }
                    if (data.length > schema.maxItems) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {
                    if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {
                        throw new Error("'minItems' must be a non-negative integer.");
                    }
                    if (data.length < schema.minItems) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {
                    if (schema.uniqueItems) {
                        var /** @type {?} */ dataSet = new Set(data);
                        if (data.length !== dataSet.size) {
                            return false;
                        }
                    }
                }
                if (Array.isArray(schema.items)) {
                    return this.validateItemsList(data, schema);
                }
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var value = data_1_1.value;
                        if (!this.validate(value, schema.items)) {
                            return false;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                            _a.call(data_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return true;
                var e_2, _a;
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateItemsList = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                var /** @type {?} */ items = (schema.items);
                if (data.length !== items.length) {
                    return false;
                }
                for (var /** @type {?} */ i = 0; i < items.length; i += 1) {
                    if (!this.validate(data[i], items[i])) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateString = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (typeof data !== 'string') {
                    return false;
                }
                if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {
                    if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {
                        throw new Error("'maxLength' must be a non-negative integer.");
                    }
                    if (data.length > schema.maxLength) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {
                    if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {
                        throw new Error("'minLength' must be a non-negative integer.");
                    }
                    if (data.length < schema.minLength) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {
                    var /** @type {?} */ regularExpression = new RegExp(schema.pattern);
                    if (!regularExpression.test(data)) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateNumber = /**
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (typeof data !== 'number') {
                    return false;
                }
                if ((schema.type === 'integer') && !Number.isInteger(data)) {
                    return false;
                }
                if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {
                    if (schema.multipleOf <= 0) {
                        throw new Error("'multipleOf' must be a number strictly greater than 0.");
                    }
                    if (!Number.isInteger(data / schema.multipleOf)) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {
                    if (data > schema.maximum) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {
                    if (data >= schema.exclusiveMaximum) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {
                    if (data < schema.minimum) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {
                    if (data <= schema.exclusiveMinimum) {
                        return false;
                    }
                }
                return true;
            };
        JSONValidator.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ JSONValidator.ngInjectableDef = i0.defineInjectable({ factory: function JSONValidator_Factory() { return new JSONValidator(); }, token: JSONValidator, providedIn: "root" });
        return JSONValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LocalStorage = (function () {
        function LocalStorage(database, jsonValidator) {
            this.database = database;
            this.jsonValidator = jsonValidator;
            this.getItemOptionsDefault = {
                schema: null
            };
        }
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @param {?=} options
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        LocalStorage.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @param {?=} options
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key, options) {
                var _this = this;
                if (options === void 0) {
                    options = this.getItemOptionsDefault;
                }
                return this.database.getItem(key).pipe(/* Validate data upon a json schema if requested */ operators.mergeMap(function (data) {
                    if (options.schema && data !== null) {
                        var /** @type {?} */ validation = true;
                        try {
                            validation = _this.jsonValidator.validate(data, options.schema);
                        }
                        catch (error) {
                            return rxjs.throwError(error);
                        }
                        if (!validation) {
                            return rxjs.throwError(new Error("JSON invalid"));
                        }
                    }
                    return rxjs.of(data);
                }));
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorage.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                return this.database.setItem(key, data);
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorage.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                return this.database.removeItem(key);
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorage.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                return this.database.clear();
            };
        /**
         * Sets an item in local storage, and auto-subscribes
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         */
        /**
         * Sets an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?}
         */
        LocalStorage.prototype.setItemSubscribe = /**
         * Sets an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?}
         */
            function (key, data) {
                this.setItem(key, data).subscribe(function () { }, function () { });
            };
        /**
         * Deletes an item in local storage, and auto-subscribes
         * @param key The item's key
         */
        /**
         * Deletes an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @return {?}
         */
        LocalStorage.prototype.removeItemSubscribe = /**
         * Deletes an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @return {?}
         */
            function (key) {
                this.removeItem(key).subscribe(function () { }, function () { });
            };
        /** Deletes all items from local storage, and auto-subscribes */
        /**
         * Deletes all items from local storage, and auto-subscribes
         * @return {?}
         */
        LocalStorage.prototype.clearSubscribe = /**
         * Deletes all items from local storage, and auto-subscribes
         * @return {?}
         */
            function () {
                this.clear().subscribe(function () { }, function () { });
            };
        LocalStorage.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LocalStorage.ctorParameters = function () {
            return [
                { type: LocalDatabase },
                { type: JSONValidator }
            ];
        };
        /** @nocollapse */ LocalStorage.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.inject(LocalDatabase), i0.inject(JSONValidator)); }, token: LocalStorage, providedIn: "root" });
        return LocalStorage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.LocalDatabase = LocalDatabase;
    exports.IndexedDBDatabase = IndexedDBDatabase;
    exports.LocalStorageDatabase = LocalStorageDatabase;
    exports.MockLocalDatabase = MockLocalDatabase;
    exports.JSONValidator = JSONValidator;
    exports.LocalStorage = LocalStorage;
    exports.localStorageProviders = localStorageProviders;
    exports.LOCAL_STORAGE_PREFIX = LOCAL_STORAGE_PREFIX;
    exports.ɵa = localDatabaseFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXB3YS1sb2NhbC1zdG9yYWdlLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvdG9rZW5zLnRzIiwibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlL2xpYi9kYXRhYmFzZXMvbG9jYWxzdG9yYWdlLWRhdGFiYXNlLnRzIiwibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlL2xpYi9kYXRhYmFzZXMvaW5kZXhlZGRiLWRhdGFiYXNlLnRzIiwibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlL2xpYi9kYXRhYmFzZXMvbW9jay1sb2NhbC1kYXRhYmFzZS50cyIsIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvZGF0YWJhc2VzL2xvY2FsLWRhdGFiYXNlLnRzIiwibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvdmFsaWRhdGlvbi9qc29uLXZhbGlkYXRvci50cyIsIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvbGliLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX1BSRUZJWCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdsb2NhbFN0b3JhZ2VQcmVmaXgnLCB7IHByb3ZpZGVkSW46ICdyb290JywgZmFjdG9yeTogKCkgPT4gJycgfSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxTdG9yYWdlUHJvdmlkZXJzQ29uZmlnIHtcblxuICAvKiogT3B0aW9uYWwgcHJlZml4IHRvIGF2b2lkIGNvbGxpc2lvbiBpbiBtdWx0aXBsZSBhcHBzIG9uIHNhbWUgc3ViZG9tYWluICovXG4gIHByZWZpeD86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZVByb3ZpZGVycyhjb25maWc6IExvY2FsU3RvcmFnZVByb3ZpZGVyc0NvbmZpZyk6IFByb3ZpZGVyW10ge1xuICByZXR1cm4gW1xuICAgIGNvbmZpZy5wcmVmaXggPyB7IHByb3ZpZGU6IExPQ0FMX1NUT1JBR0VfUFJFRklYLCB1c2VWYWx1ZTogY29uZmlnLnByZWZpeCB9IDogW11cbiAgXTtcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IExvY2FsRGF0YWJhc2UgfSBmcm9tICcuL2xvY2FsLWRhdGFiYXNlJztcbmltcG9ydCB7IExPQ0FMX1NUT1JBR0VfUFJFRklYIH0gZnJvbSAnLi4vdG9rZW5zJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlRGF0YWJhc2UgaW1wbGVtZW50cyBMb2NhbERhdGFiYXNlIHtcblxuICAvKiBJbml0aWFsaXppbmcgbmF0aXZlIGxvY2FsU3RvcmFnZSByaWdodCBub3cgdG8gYmUgYWJsZSB0byBjaGVjayBpdHMgc3VwcG9ydCBvbiBjbGFzcyBpbnN0YW5jaWF0aW9uICovXG4gIHByb3RlY3RlZCBwcmVmaXggPSAnJztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KExPQ0FMX1NUT1JBR0VfUFJFRklYKSBwcm90ZWN0ZWQgdXNlclByZWZpeDogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcblxuICAgIGlmICh1c2VyUHJlZml4KSB7XG4gICAgICB0aGlzLnByZWZpeCA9IGAke3VzZXJQcmVmaXh9X2A7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBpdGVtIHZhbHVlIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBUaGUgaXRlbSdzIHZhbHVlIGlmIHRoZSBrZXkgZXhpc3RzLCBudWxsIG90aGVyd2lzZSwgd3JhcHBlZCBpbiBhbiBSeEpTIE9ic2VydmFibGVcbiAgICovXG4gIGdldEl0ZW08VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQgfCBudWxsPiB7XG5cbiAgICBjb25zdCB1bnBhcnNlZERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHt0aGlzLnByZWZpeH0ke2tleX1gKTtcbiAgICBsZXQgcGFyc2VkRGF0YTogVCB8IG51bGwgPSBudWxsO1xuXG4gICAgaWYgKHVucGFyc2VkRGF0YSAhPSBudWxsKSB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHVucGFyc2VkRGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoYEludmFsaWQgZGF0YSBpbiBsb2NhbFN0b3JhZ2UuYCkpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHBhcnNlZERhdGEpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gZGF0YSBUaGUgaXRlbSdzIHZhbHVlLCBtdXN0IE5PVCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHt0aGlzLnByZWZpeH0ke2tleX1gLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYCR7dGhpcy5wcmVmaXh9JHtrZXl9YCk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCwgZnJvbUV2ZW50LCBvZiwgdGhyb3dFcnJvciwgcmFjZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCwgZmlyc3QsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbG9jYWwtZGF0YWJhc2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlRGF0YWJhc2UgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZS1kYXRhYmFzZSc7XG5pbXBvcnQgeyBMT0NBTF9TVE9SQUdFX1BSRUZJWCB9IGZyb20gJy4uL3Rva2Vucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEluZGV4ZWREQkRhdGFiYXNlIGltcGxlbWVudHMgTG9jYWxEYXRhYmFzZSB7XG5cbiAgLyoqXG4gICAqIEluZGV4ZWREQiBkYXRhYmFzZSBuYW1lIGZvciBsb2NhbCBzdG9yYWdlXG4gICAqL1xuICBwcm90ZWN0ZWQgZGJOYW1lID0gJ25nU3RvcmFnZSc7XG4gIC8qKlxuICAgKiBJbmRleGVkREIgb2JqZWN0IHN0b3JlIG5hbWUgZm9yIGxvY2FsIHN0b3JhZ2VcbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBvYmplY3RTdG9yZU5hbWUgPSAnbG9jYWxTdG9yYWdlJztcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBrZXkgcGF0aCBuYW1lIGZvciBsb2NhbCBzdG9yYWdlICh3aGVyZSBhbiBpdGVtJ3Mga2V5IHdpbGwgYmUgc3RvcmVkKVxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGtleVBhdGggPSAna2V5JztcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBkYXRhIHBhdGggbmFtZSBmb3IgbG9jYWwgc3RvcmFnZSAod2hlcmUgaXRlbXMnIHZhbHVlIHdpbGwgYmUgc3RvcmVkKVxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGRhdGFQYXRoID0gJ3ZhbHVlJztcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBkYXRhYmFzZSBjb25uZWN0aW9uLCB3cmFwcGVkIGluIGEgUnhKUyBSZXBsYXlTdWJqZWN0IHRvIGJlIGFibGUgdG8gYWNjZXNzIHRoZSBjb25uZWN0aW9uXG4gICAqIGV2ZW4gYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gc3VjY2VzcyBldmVudCBoYXBwZW5lZFxuICAgKi9cbiAgcHJvdGVjdGVkIGRhdGFiYXNlOiBSZXBsYXlTdWJqZWN0PElEQkRhdGFiYXNlPjtcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBpcyBhdmFpbGFibGUgYnV0IGZhaWxpbmcgaW4gc29tZSBzY2VuYXJpb3MgKEZpcmVmb3ggcHJpdmF0ZSBtb2RlLCBTYWZhcmkgY3Jvc3Mtb3JpZ2luIGlmcmFtZXMpLFxuICAgKiBzbyBhIGZhbGxiYWNrIGNhbiBiZSBuZWVkZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgZmFsbGJhY2s6IExvY2FsRGF0YWJhc2UgfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogQ29ubmVjdHMgdG8gSW5kZXhlZERCXG4gICAqL1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KExPQ0FMX1NUT1JBR0VfUFJFRklYKSBwcm90ZWN0ZWQgcHJlZml4OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuXG4gICAgaWYgKHByZWZpeCkge1xuXG4gICAgICB0aGlzLmRiTmFtZSA9IGAke3ByZWZpeH1fJHt0aGlzLmRiTmFtZX1gO1xuXG4gICAgfVxuXG4gICAgLyogQ3JlYXRpbmcgdGhlIFJ4SlMgUmVwbGF5U3ViamVjdCAqL1xuICAgIHRoaXMuZGF0YWJhc2UgPSBuZXcgUmVwbGF5U3ViamVjdDxJREJEYXRhYmFzZT4oKTtcblxuICAgIC8qIENvbm5lY3RpbmcgdG8gSW5kZXhlZERCICovXG4gICAgdGhpcy5jb25uZWN0KHByZWZpeCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gdmFsdWUgaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VMOCwqB8IG51bGw+IHtcblxuICAgIC8qIEZhbGxiYWNrIHN0b3JhZ2UgaWYgc2V0ICovXG4gICAgaWYgKHRoaXMuZmFsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLmZhbGxiYWNrLmdldEl0ZW08VD4oa2V5KTtcbiAgICB9XG5cbiAgICAvKiBPcGVuaW5nIGEgdHJhc2FjdGlvbiBhbmQgcmVxdWVzdGluZyB0aGUgaXRlbSBpbiBsb2NhbCBzdG9yYWdlICovXG4gICAgcmV0dXJuIHRoaXMuZ2V0SXRlbUZyb21UcmFuc2FjdGlvbjxUPihrZXkpO1xuXG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgbWV0aG9kIHRvIGZhY3Rvcml6ZSB0aGUgZ2V0dGVyIGZvciBnZXRJdGVtIGFuZCBzZXRJdGVtLFxuICAgKiB0aGUgbGFzdCBvbmUgbmVlZGluZyB0byBiZSBmcm9tIGEgcHJlZXhpc3RpbmcgdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25QYXJhbSBPcHRpb25hbCBwcmUtZXhpc3RpbmcgdHJhbnNhY3Rpb24gdG8gdXNlIGZvciB0aGUgcmVhZCByZXF1ZXN0XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgcHJpdmF0ZSBnZXRJdGVtRnJvbVRyYW5zYWN0aW9uPFQgPSBhbnk+KGtleTogc3RyaW5nLCB0cmFuc2FjdGlvblBhcmFtPzogSURCT2JqZWN0U3RvcmUpOiBPYnNlcnZhYmxlPFTDgsKgfCBudWxsPiB7XG5cbiAgICBjb25zdCB0cmFuc2FjdGlvbiQgPSB0cmFuc2FjdGlvblBhcmFtID8gb2YodHJhbnNhY3Rpb25QYXJhbSkgOiB0aGlzLnRyYW5zYWN0aW9uKCk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24kLnBpcGUoXG4gICAgICBtYXAoKHRyYW5zYWN0aW9uKSA9PiB0cmFuc2FjdGlvbi5nZXQoa2V5KSksXG4gICAgICBtZXJnZU1hcCgocmVxdWVzdCkgPT4ge1xuXG4gICAgICAgIC8qIExpc3RlbmluZyB0byB0aGUgc3VjY2VzcyBldmVudCwgYW5kIHBhc3NpbmcgdGhlIGl0ZW0gdmFsdWUgaWYgZm91bmQsIG51bGwgb3RoZXJ3aXNlICovXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoZnJvbUV2ZW50KHJlcXVlc3QsICdzdWNjZXNzJykgYXMgT2JzZXJ2YWJsZTxFdmVudD4pLnBpcGUoXG4gICAgICAgICAgbWFwKChldmVudCkgPT4gKGV2ZW50LnRhcmdldCBhcyBJREJSZXF1ZXN0KS5yZXN1bHQpLFxuICAgICAgICAgIG1hcCgocmVzdWx0KSA9PiByZXN1bHQgJiYgKHRoaXMuZGF0YVBhdGggaW4gcmVzdWx0KSA/IChyZXN1bHRbdGhpcy5kYXRhUGF0aF0gYXMgVCkgOiBudWxsKVxuICAgICAgICApO1xuXG4gICAgICAgIC8qIE1lcmdpbmcgc3VjY2VzcyBhbmQgZXJyb3JzIGV2ZW50cyBhbmQgYXV0b2Nsb3NpbmcgdGhlIG9ic2VydmFibGUgKi9cbiAgICAgICAgcmV0dXJuIChyYWNlKHN1Y2Nlc3MsIHRoaXMudG9FcnJvck9ic2VydmFibGUocmVxdWVzdCwgYGdldHRlcmApKSBhcyBPYnNlcnZhYmxlPFQgfCBudWxsPilcbiAgICAgICAgICAucGlwZShmaXJzdCgpKTtcbiAgICAgIH0pLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogYW55KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIHNldCAqL1xuICAgIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWxsYmFjay5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgfVxuXG4gICAgLyogU3RvcmluZyBudWxsIGlzIG5vdCBjb3JyZWN0bHkgc3VwcG9ydGVkIGJ5IEluZGV4ZWREQiBhbmQgdW5uZWNlc3NhcnkgaGVyZSAqL1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcblxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gICAgfVxuXG4gICAgLyogVHJhbnNhY3Rpb24gbXVzdCBiZSB0aGUgc2FtZSBmb3IgcmVhZCBhbmQgd3JpdGUsIHRvIGF2b2lkIGNvbmN1cnJlbmN5IGlzc3VlcyAqL1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uJCA9IHRoaXMudHJhbnNhY3Rpb24oJ3JlYWR3cml0ZScpO1xuICAgIGxldCB0cmFuc2FjdGlvbjogSURCT2JqZWN0U3RvcmU7XG5cbiAgICAgICAgLyogT3BlbmluZyBhIHRyYW5zYWN0aW9uICovXG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbiQucGlwZShcbiAgICAgICAgICB0YXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbiA9IHZhbHVlO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIENoZWNrIGlmIHRoZSBrZXkgYWxyZWFkeSBleGlzdHMgb3Igbm90ICovXG4gICAgICAgICAgbWVyZ2VNYXAoKCkgPT4gdGhpcy5nZXRJdGVtRnJvbVRyYW5zYWN0aW9uKGtleSwgdHJhbnNhY3Rpb24pKSxcbiAgICAgICAgICBtYXAoKGV4aXN0aW5nRGF0YSkgPT4gKGV4aXN0aW5nRGF0YSA9PSBudWxsKSA/ICdhZGQnIDogJ3B1dCcpLFxuICAgICAgICAgIG1lcmdlTWFwKChtZXRob2QpID0+IHtcblxuICAgICAgICAgICAgbGV0IHJlcXVlc3Q6IElEQlJlcXVlc3Q7XG5cbiAgICAgICAgICAgIC8qIEFkZGluZyBvciB1cGRhdGluZyBsb2NhbCBzdG9yYWdlLCBiYXNlZCBvbiBwcmV2aW91cyBjaGVja2luZyAqL1xuICAgICAgICAgICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gdHJhbnNhY3Rpb24uYWRkKHsgW3RoaXMuZGF0YVBhdGhdOiBkYXRhIH0sIGtleSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3B1dCc6XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IHRyYW5zYWN0aW9uLnB1dCh7IFt0aGlzLmRhdGFQYXRoXTogZGF0YSB9LCBrZXkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBNZXJnaW5nIHN1Y2Nlc3MgKHBhc3NpbmcgdHJ1ZSkgYW5kIGVycm9yIGV2ZW50cyBhbmQgYXV0b2Nsb3NpbmcgdGhlIG9ic2VydmFibGUgKi9cbiAgICAgICAgICAgIHJldHVybiAocmFjZSh0aGlzLnRvU3VjY2Vzc09ic2VydmFibGUocmVxdWVzdCksIHRoaXMudG9FcnJvck9ic2VydmFibGUocmVxdWVzdCwgYHNldHRlcmApKSBhcyBPYnNlcnZhYmxlPGJvb2xlYW4+KVxuICAgICAgICAgICAgICAucGlwZShmaXJzdCgpKTtcblxuICAgICAgICB9KSxcbiAgICAgICAgZmlyc3QoKVxuICAgICAgKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIHNldCAqL1xuICAgIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWxsYmFjay5yZW1vdmVJdGVtKGtleSk7XG4gICAgfVxuXG4gICAgLyogT3BlbmluZyBhIHRyYW5zYWN0aW9uIGFuZCBjaGVja2luZyBpZiB0aGUgaXRlbSBleGlzdHMgaW4gbG9jYWwgc3RvcmFnZSAqL1xuICAgIHJldHVybiB0aGlzLmdldEl0ZW0oa2V5KS5waXBlKFxuICAgICAgbWVyZ2VNYXAoKGRhdGEpID0+IHtcblxuICAgICAgICAvKiBJZiB0aGUgaXRlbSBleGlzdHMgaW4gbG9jYWwgc3RvcmFnZSAqL1xuICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG5cbiAgICAgICAgICAvKiBPcGVuaW5nIGEgdHJhbnNhY3Rpb24gKi9cbiAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbigncmVhZHdyaXRlJykucGlwZShtZXJnZU1hcCgodHJhbnNhY3Rpb24pID0+IHtcblxuICAgICAgICAgICAgLyogRGVsZXRpbmcgdGhlIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZSAqL1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRyYW5zYWN0aW9uLmRlbGV0ZShrZXkpO1xuXG4gICAgICAgICAgICAvKiBNZXJnaW5nIHN1Y2Nlc3MgKHBhc3NpbmcgdHJ1ZSkgYW5kIGVycm9yIGV2ZW50cyBhbmQgYXV0b2Nsb3NpbmcgdGhlIG9ic2VydmFibGUgKi9cbiAgICAgICAgICAgIHJldHVybiAocmFjZSh0aGlzLnRvU3VjY2Vzc09ic2VydmFibGUocmVxdWVzdCksIHRoaXMudG9FcnJvck9ic2VydmFibGUocmVxdWVzdCwgYHJlbW92ZXJgKSkgYXMgT2JzZXJ2YWJsZTxib29sZWFuPilcbiAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSk7XG5cbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFBhc3NpbmcgdHJ1ZSBpZiB0aGUgaXRlbSBkb2VzIG5vdCBleGlzdCBpbiBsb2NhbCBzdG9yYWdlICovXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcblxuICAgICAgfSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gIGNsZWFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBzZXQgKi9cbiAgICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2suY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKiBPcGVuaW5nIGEgdHJhbnNhY3Rpb24gKi9cbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbigncmVhZHdyaXRlJykucGlwZShcbiAgICAgIG1lcmdlTWFwKCh0cmFuc2FjdGlvbikgPT4ge1xuXG4gICAgICAgIC8qIERlbGV0aW5nIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2UgKi9cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRyYW5zYWN0aW9uLmNsZWFyKCk7XG5cbiAgICAgICAgLyogTWVyZ2luZyBzdWNjZXNzIChwYXNzaW5nIHRydWUpIGFuZCBlcnJvciBldmVudHMgYW5kIGF1dG9jbG9zaW5nIHRoZSBvYnNlcnZhYmxlICovXG4gICAgICAgIHJldHVybiAocmFjZSh0aGlzLnRvU3VjY2Vzc09ic2VydmFibGUocmVxdWVzdCksIHRoaXMudG9FcnJvck9ic2VydmFibGUocmVxdWVzdCwgYGNsZWFyZXJgKSkgYXMgT2JzZXJ2YWJsZTxib29sZWFuPilcbiAgICAgICAgICAucGlwZShmaXJzdCgpKTtcblxuICAgICAgfSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIENvbm5lY3RzIHRvIEluZGV4ZWREQiBhbmQgY3JlYXRlcyB0aGUgb2JqZWN0IHN0b3JlIG9uIGZpcnN0IHRpbWVcbiAgICovXG4gIHByb3RlY3RlZCBjb25uZWN0KHByZWZpeDogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiB2b2lkIHtcblxuICAgIGxldCByZXF1ZXN0OiBJREJPcGVuREJSZXF1ZXN0O1xuXG4gICAgLyogQ29ubmVjdGluZyB0byBJbmRleGVkREIgKi9cbiAgICB0cnkge1xuXG4gICAgICByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4odGhpcy5kYk5hbWUpO1xuXG4gICAgfcOCwqBjYXRjaCAoZXJyb3IpIHtcblxuICAgICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBJbmRleGVkRGIgY29ubmVjdGlvbiBpcyBmYWlsaW5nICovXG4gICAgICB0aGlzLnNldEZhbGxiYWNrKHByZWZpeCk7XG5cbiAgICAgIHJldHVybjtcblxuICAgIH1cblxuICAgIC8qIExpc3RlbmluZyB0aGUgZXZlbnQgZmlyZWQgb24gZmlyc3QgY29ubmVjdGlvbiwgY3JlYXRpbmcgdGhlIG9iamVjdCBzdG9yZSBmb3IgbG9jYWwgc3RvcmFnZSAqL1xuICAgIChmcm9tRXZlbnQocmVxdWVzdCwgJ3VwZ3JhZGVuZWVkZWQnKSBhcyBPYnNlcnZhYmxlPEV2ZW50PilcbiAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuXG4gICAgICAgIC8qIEdldHRpbmcgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gKi9cbiAgICAgICAgY29uc3QgZGF0YWJhc2UgPSAoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdCBhcyBJREJEYXRhYmFzZTtcblxuICAgICAgICAvKiBDaGVja2luZyBpZiB0aGUgb2JqZWN0IHN0b3JlIGFscmVhZHkgZXhpc3RzLCB0byBhdm9pZCBlcnJvciAqL1xuICAgICAgICBpZiAoIWRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnModGhpcy5vYmplY3RTdG9yZU5hbWUpKSB7XG5cbiAgICAgICAgICAvKiBDcmVhdGluZyB0aGUgb2JqZWN0IHN0b3JlIGZvciBsb2NhbCBzdG9yYWdlICovXG4gICAgICAgICAgZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUodGhpcy5vYmplY3RTdG9yZU5hbWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgfSk7XG5cbiAgICAvKiBMaXN0ZW5pbmcgdGhlIHN1Y2Nlc3MgZXZlbnQgYW5kIGNvbnZlcnRpbmcgdG8gYW4gUnhKUyBPYnNlcnZhYmxlICovXG4gICAgY29uc3Qgc3VjY2VzcyA9IGZyb21FdmVudChyZXF1ZXN0LCAnc3VjY2VzcycpIGFzIE9ic2VydmFibGU8RXZlbnQ+O1xuXG4gICAgLyogTWVyZ2luZyBzdWNjZXNzIGFuZCBlcnJvcnMgZXZlbnRzICovXG4gICAgKHJhY2Uoc3VjY2VzcywgdGhpcy50b0Vycm9yT2JzZXJ2YWJsZShyZXF1ZXN0LCBgY29ubmVjdGlvbmApKSBhcyBPYnNlcnZhYmxlPEV2ZW50PilcbiAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuXG4gICAgICAgIC8qIFN0b3JpbmcgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gZm9yIGZ1cnRoZXIgYWNjZXNzICovXG4gICAgICAgIHRoaXMuZGF0YWJhc2UubmV4dCgoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdCBhcyBJREJEYXRhYmFzZSk7XG5cbiAgICAgIH0sICgpID0+IHtcblxuICAgICAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIEluZGV4ZWREYiBjb25uZWN0aW9uIGlzIGZhaWxpbmcgKi9cbiAgICAgICAgdGhpcy5zZXRGYWxsYmFjayhwcmVmaXgpO1xuXG4gICAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGFuIEluZGV4ZWREQiB0cmFuc2FjdGlvbiBhbmQgZ2V0cyB0aGUgbG9jYWwgc3RvcmFnZSBvYmplY3Qgc3RvcmVcbiAgICogQHBhcmFtIG1vZGUgRGVmYXVsdCB0byAncmVhZG9ubHknIGZvciByZWFkIG9wZXJhdGlvbnMsIG9yICdyZWFkd3JpdGUnIGZvciB3cml0ZSBvcGVyYXRpb25zXG4gICAqIEByZXR1cm5zIEFuIEluZGV4ZWREQiB0cmFuc2FjdGlvbiBvYmplY3Qgc3RvcmUsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgdHJhbnNhY3Rpb24obW9kZTogJ3JlYWRvbmx5JyB8ICdyZWFkd3JpdGUnID0gJ3JlYWRvbmx5Jyk6IE9ic2VydmFibGU8SURCT2JqZWN0U3RvcmU+IHtcblxuICAgIC8qIEZyb20gdGhlIEluZGV4ZWREQiBjb25uZWN0aW9uLCBvcGVuaW5nIGEgdHJhbnNhY3Rpb24gYW5kIGdldHRpbmcgdGhlIGxvY2FsIHN0b3JhZ2Ugb2JqZXQgc3RvcmUgKi9cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZVxuICAgICAgLnBpcGUobWFwKChkYXRhYmFzZSkgPT4gZGF0YWJhc2UudHJhbnNhY3Rpb24oW3RoaXMub2JqZWN0U3RvcmVOYW1lXSwgbW9kZSkub2JqZWN0U3RvcmUodGhpcy5vYmplY3RTdG9yZU5hbWUpKSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgSW5kZXhlZERCIHN1Y2Nlc3MgZXZlbnQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqIEBwYXJhbSByZXF1ZXN0IFRoZSByZXF1ZXN0IHRvIGxpc3RlblxuICAgKiBAcmV0dXJucyBBIFJ4SlMgT2JzZXJ2YWJsZSB3aXRoIHRydWUgdmFsdWVcbiAgICovXG4gIHByb3RlY3RlZCB0b1N1Y2Nlc3NPYnNlcnZhYmxlKHJlcXVlc3Q6IElEQlJlcXVlc3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIC8qIFRyYW5zZm9ybWluZyBhIEluZGV4ZWREQiBzdWNjZXNzIGV2ZW50IGluIGFuIFJ4SlMgT2JzZXJ2YWJsZSB3aXRoIHRydWUgdmFsdWUgKi9cbiAgICByZXR1cm4gKGZyb21FdmVudChyZXF1ZXN0LCAnc3VjY2VzcycpIGFzIE9ic2VydmFibGU8RXZlbnQ+KVxuICAgICAgLnBpcGUobWFwKCgpID0+IHRydWUpKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgYSBJbmRleGVkREIgZXJyb3IgZXZlbnQgaW4gYW4gUnhKUyBFcnJvck9ic2VydmFibGVcbiAgICogQHBhcmFtIHJlcXVlc3QgVGhlIHJlcXVlc3QgdG8gbGlzdGVuXG4gICAqIEBwYXJhbSBlcnJvciBPcHRpb25uYWwgZGV0YWlscyBhYm91dCB0aGUgZXJyb3IncyBvcmlnaW5cbiAgICogQHJldHVybnMgQSBSeEpTIEVycm9yT2JzZXJ2YWJsZVxuICAgKi9cbiAgcHJvdGVjdGVkIHRvRXJyb3JPYnNlcnZhYmxlKHJlcXVlc3Q6IElEQlJlcXVlc3QsIGVycm9yID0gYGApOiBPYnNlcnZhYmxlPG5ldmVyPiB7XG5cbiAgICAvKiBUcmFuc2Zvcm1pbmcgYSBJbmRleGVkREIgZXJyb3IgZXZlbnQgaW4gYW4gUnhKUyBFcnJvck9ic2VydmFibGUgKi9cbiAgICByZXR1cm4gKGZyb21FdmVudChyZXF1ZXN0LCAnZXJyb3InKSBhcyBPYnNlcnZhYmxlPEV2ZW50PilcbiAgICAgIC5waXBlKG1lcmdlTWFwKCgpID0+IHRocm93RXJyb3IobmV3IEVycm9yKGBJbmRleGVkREIgJHtlcnJvcn0gaXNzdWUgOiAkeyhyZXF1ZXN0LmVycm9yIGFzIERPTUV4Y2VwdGlvbikubWVzc2FnZX0uYCkpKSk7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRGYWxsYmFjayhwcmVmaXg6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLmZhbGxiYWNrID0gbmV3IExvY2FsU3RvcmFnZURhdGFiYXNlKHByZWZpeCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbG9jYWwtZGF0YWJhc2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNb2NrTG9jYWxEYXRhYmFzZSBpbXBsZW1lbnRzIExvY2FsRGF0YWJhc2Uge1xuXG4gIHByb3RlY3RlZCBsb2NhbFN0b3JhZ2UgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gdmFsdWUgaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgIGdldEl0ZW08VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQgfMOCwqBudWxsPiB7XG5cbiAgICBjb25zdCByYXdEYXRhOiBUIHwgbnVsbCA9IHRoaXMubG9jYWxTdG9yYWdlLmdldChrZXkpO1xuXG4gICAgcmV0dXJuIG9mKChyYXdEYXRhICE9PSB1bmRlZmluZWQpID8gcmF3RGF0YSA6IG51bGwpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gZGF0YSBUaGUgaXRlbSdzIHZhbHVlLCBtdXN0IE5PVCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHRoaXMubG9jYWxTdG9yYWdlLnNldChrZXksIGRhdGEpO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICB0aGlzLmxvY2FsU3RvcmFnZS5kZWxldGUoa2V5KTtcblxuICAgIHJldHVybiBvZih0cnVlKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHRoaXMubG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBQTEFURk9STV9JRCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSW5kZXhlZERCRGF0YWJhc2UgfSBmcm9tICcuL2luZGV4ZWRkYi1kYXRhYmFzZSc7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2VEYXRhYmFzZSB9IGZyb20gJy4vbG9jYWxzdG9yYWdlLWRhdGFiYXNlJztcbmltcG9ydCB7IE1vY2tMb2NhbERhdGFiYXNlIH0gZnJvbSAnLi9tb2NrLWxvY2FsLWRhdGFiYXNlJztcbmltcG9ydCB7IExPQ0FMX1NUT1JBR0VfUFJFRklYIH0gZnJvbSAnLi4vdG9rZW5zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsRGF0YWJhc2VGYWN0b3J5KHBsYXRmb3JtSWQ6IE9iamVjdCwgcHJlZml4OiBzdHJpbmcgfCBudWxsKSB7XG5cbiAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpICYmICgnaW5kZXhlZERCJyBpbiB3aW5kb3cpICYmIChpbmRleGVkREIgIT09IHVuZGVmaW5lZCkgJiYgKGluZGV4ZWREQiAhPT0gbnVsbCkpIHtcblxuICAgIC8qIFRyeSB3aXRoIEluZGV4ZWREQiBpbiBtb2Rlcm4gYnJvd3NlcnMgKi9cbiAgICByZXR1cm4gbmV3IEluZGV4ZWREQkRhdGFiYXNlKHByZWZpeCk7XG5cbiAgfSBlbHNlIGlmIChpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSAmJiAoJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93KSAmJiAobG9jYWxTdG9yYWdlICE9PSB1bmRlZmluZWQpICYmIChsb2NhbFN0b3JhZ2UgIT09IG51bGwpKSB7XG5cbiAgICAvKiBUcnkgd2l0aCBsb2NhbFN0b3JhZ2UgaW4gb2xkIGJyb3dzZXJzIChJRTkpICovXG4gICAgcmV0dXJuIG5ldyBMb2NhbFN0b3JhZ2VEYXRhYmFzZShwcmVmaXgpO1xuXG4gIH0gZWxzZSB7XG5cbiAgICAvKiBGYWtlIGRhdGFiYXNlIGZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgKFVuaXZlcnNhbCkgKi9cbiAgICByZXR1cm4gbmV3IE1vY2tMb2NhbERhdGFiYXNlKCk7XG5cbiAgfVxuXG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB1c2VGYWN0b3J5OiBsb2NhbERhdGFiYXNlRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIFBMQVRGT1JNX0lELFxuICAgIFtuZXcgT3B0aW9uYWwoKSwgTE9DQUxfU1RPUkFHRV9QUkVGSVhdXG4gIF1cbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTG9jYWxEYXRhYmFzZSB7XG5cbiAgYWJzdHJhY3QgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VCB8IG51bGw+O1xuICBhYnN0cmFjdCBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBhYnN0cmFjdCByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgYWJzdHJhY3QgY2xlYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxufVxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBKU09OU2NoZW1hIH0gZnJvbSAnLi9qc29uLXNjaGVtYSc7XG5cbi8qKlxuICogQHRvZG8gQWRkIG90aGVyIEpTT04gU2NoZW1hIHZhbGlkYXRpb24gZmVhdHVyZXNcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSlNPTlZhbGlkYXRvciB7XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGEgSlNPTiBkYXRhIGFnYWluc3QgYSBKU09OIFNjaGVtYVxuICAgKiBAcGFyYW0gZGF0YSBKU09OIGRhdGEgdG8gdmFsaWRhdGVcbiAgICogQHBhcmFtIHNjaGVtYSBTdWJzZXQgb2YgSlNPTiBTY2hlbWEuXG4gICAqIFR5cGVzIGFyZSBlbmZvcmNlZCB0byB2YWxpZGF0ZSBldmVyeXRoaW5nOlxuICAgKiBlYWNoIHZhbHVlIE1VU1QgaGF2ZSAndHlwZScgb3IgJ3Byb3BlcnRpZXMnIG9yICdpdGVtcycgb3IgJ2NvbnN0JyBvciAnZW51bScuXG4gICAqIFRoZXJlZm9yZSwgdW5saWtlIHRoZSBzcGVjLCBib29sZWFucyBhcmUgbm90IGFsbG93ZWQgYXMgc2NoZW1hcy5cbiAgICogTm90IGFsbCB2YWxpZGF0aW9uIGZlYXR1cmVzIGFyZSBzdXBwb3J0ZWQ6IGp1c3QgZm9sbG93IHRoZSBpbnRlcmZhY2UuXG4gICAqIEByZXR1cm5zIElmIGRhdGEgaXMgdmFsaWQgOiB0cnVlLCBpZiBpdCBpcyBpbnZhbGlkIDogZmFsc2UsIGFuZCB0aHJvd3MgaWYgdGhlIHNjaGVtYSBpcyBpbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZShkYXRhOiBhbnksIHNjaGVtYTogSlNPTlNjaGVtYSk6IGJvb2xlYW4ge1xuXG4gICAgLyoqIEB0b2RvIFdoZW4gVFMgMi44LCBleHBsb3JlIGlmIHRoaXMgaXMgcG9zc2libGUgd2l0aCBjb25kaXRpb25hbCB0eXBlcyAqL1xuICAgIGlmICgoKCEoc2NoZW1hLmhhc093blByb3BlcnR5KCdjb25zdCcpICYmIHNjaGVtYS5jb25zdCAhPT0gdW5kZWZpbmVkKVxuICAgICYmICEoc2NoZW1hLmhhc093blByb3BlcnR5KCdlbnVtJykgJiYgc2NoZW1hLmVudW0gIT0gbnVsbCkgJiYgIShzY2hlbWEuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiBzY2hlbWEudHlwZSAhPSBudWxsKSlcbiAgICB8fCBzY2hlbWEudHlwZSA9PT0gJ2FycmF5JyB8fCBzY2hlbWEudHlwZSA9PT0gJ29iamVjdCcpXG4gICAgJiYgIShzY2hlbWEuaGFzT3duUHJvcGVydHkoJ3Byb3BlcnRpZXMnKSAmJiBzY2hlbWEucHJvcGVydGllcyAhPSBudWxsKSAgJiYgIShzY2hlbWEuaGFzT3duUHJvcGVydHkoJ2l0ZW1zJykgJiYgc2NoZW1hLml0ZW1zICE9IG51bGwpKSB7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihgRWFjaCB2YWx1ZSBtdXN0IGhhdmUgYSAndHlwZScgb3IgJ3Byb3BlcnRpZXMnIG9yICdpdGVtcycgb3IgJ2NvbnN0JyBvciAnZW51bScsIHRvIGVuZm9yY2Ugc3RyaWN0IHR5cGVzLmApO1xuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnY29uc3QnKSAmJiBzY2hlbWEuY29uc3QgIT09IHVuZGVmaW5lZCAmJiAoZGF0YSAhPT0gc2NoZW1hLmNvbnN0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy52YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy52YWxpZGF0ZVR5cGUoZGF0YSwgc2NoZW1hKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy52YWxpZGF0ZUl0ZW1zKGRhdGEsIHNjaGVtYSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudmFsaWRhdGVQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudmFsaWRhdGVSZXF1aXJlZChkYXRhLCBzY2hlbWEpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCBpc09iamVjdE5vdE51bGwodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuXG4gICAgcmV0dXJuICh2YWx1ZSAhPT0gbnVsbCkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVQcm9wZXJ0aWVzKGRhdGE6IHsgW2s6IHN0cmluZ106IGFueTsgfSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBpZiAoIXNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgncHJvcGVydGllcycpIHx8IChzY2hlbWEucHJvcGVydGllcyA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzT2JqZWN0Tm90TnVsbChkYXRhKSkge1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgb2JqZWN0IGRvZXNuJ3QgaGF2ZSBtb3JlIHByb3BlcnRpZXMgdGhhbiBleHBlY3RlZFxuICAgICAqIEVxdWl2YWxlbnQgb2YgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlXG4gICAgICovXG4gICAgaWYgKE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKS5sZW5ndGggPCBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGgpIHtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfVxuXG4gICAgLyogUmVjdXJzaXZlbHkgdmFsaWRhdGUgYWxsIHByb3BlcnRpZXMgKi9cbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHNjaGVtYS5wcm9wZXJ0aWVzKSB7XG5cbiAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiYgZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcblxuICAgICAgICBpZiAoIXRoaXMudmFsaWRhdGUoZGF0YVtwcm9wZXJ0eV0sIHNjaGVtYS5wcm9wZXJ0aWVzW3Byb3BlcnR5XSkpIHtcblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVSZXF1aXJlZChkYXRhOiB7fSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBpZiAoIXNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgncmVxdWlyZWQnKSB8fCAoc2NoZW1hLnJlcXVpcmVkID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNPYmplY3ROb3ROdWxsKGRhdGEpKSB7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH1cblxuICAgIGZvciAoY29uc3QgcmVxdWlyZWRQcm9wIG9mIHNjaGVtYS5yZXF1aXJlZCkge1xuXG4gICAgICAvKiBDaGVja3MgaWYgdGhlIHByb3BlcnR5IGlzIHByZXNlbnQgaW4gdGhlIHNjaGVtYSAncHJvcGVydGllcycgKi9cbiAgICAgIGlmICghc2NoZW1hLnByb3BlcnRpZXMgfHwgIXNjaGVtYS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHJlcXVpcmVkUHJvcCkpIHtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdyZXF1aXJlZCcgcHJvcGVydGllcyBtdXN0IGJlIGRlc2NyaWJlZCBpbiAncHJvcGVydGllcycgdG9vLmApO1xuXG4gICAgICB9XG5cbiAgICAgIC8qIENoZWNrcyBpZiB0aGUgcHJvcGVydHkgaXMgcHJlc2VudCBpbiB0aGUgZGF0YSAqL1xuICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KHJlcXVpcmVkUHJvcCkpIHtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVFbnVtKGRhdGE6IGFueSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBpZiAoIXNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnZW51bScpIHx8IChzY2hlbWEuZW51bSA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqIEB0b2RvIE1vdmUgdG8gRVMyMDE2IC5pbmNsdWRlcygpID8gKi9cbiAgICByZXR1cm4gKHNjaGVtYS5lbnVtLmluZGV4T2YoZGF0YSkgIT09IC0xKTtcblxuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlVHlwZShkYXRhOiBhbnksIHNjaGVtYTogSlNPTlNjaGVtYSk6IGJvb2xlYW4ge1xuXG4gICAgaWYgKCFzY2hlbWEuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSB8fCAoc2NoZW1hLnR5cGUgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoc2NoZW1hLnR5cGUpIHtcblxuICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICAgIHJldHVybiBkYXRhID09PSBudWxsO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmcoZGF0YSwgc2NoZW1hKTtcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVOdW1iZXIoZGF0YSwgc2NoZW1hKTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdib29sZWFuJztcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCc7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGEpO1xuXG4gICAgfVxuXG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVJdGVtcyhkYXRhOiBhbnlbXSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBpZiAoIXNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSB8fCAoc2NoZW1hLml0ZW1zID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnbWF4SXRlbXMnKSAmJiAoc2NoZW1hLm1heEl0ZW1zICE9IG51bGwpKSB7XG5cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzY2hlbWEubWF4SXRlbXMpIHx8IHNjaGVtYS5tYXhJdGVtcyA8IDApIHtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdtYXhJdGVtcycgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLmApO1xuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhJdGVtcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdtaW5JdGVtcycpICYmIChzY2hlbWEubWluSXRlbXMgIT0gbnVsbCkpIHtcblxuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNjaGVtYS5taW5JdGVtcykgfHwgc2NoZW1hLm1pbkl0ZW1zIDwgMCkge1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJ21pbkl0ZW1zJyBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIuYCk7XG5cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkl0ZW1zKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ3VuaXF1ZUl0ZW1zJykgJiYgKHNjaGVtYS51bmlxdWVJdGVtcyAhPSBudWxsKSkge1xuXG4gICAgICBpZiAoc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7XG5cbiAgICAgICAgY29uc3QgZGF0YVNldCA9IG5ldyBTZXQoZGF0YSk7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSBkYXRhU2V0LnNpemUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkge1xuXG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUl0ZW1zTGlzdChkYXRhLCBzY2hlbWEpO1xuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkYXRhKSB7XG5cbiAgICAgIGlmICghdGhpcy52YWxpZGF0ZSh2YWx1ZSwgc2NoZW1hLml0ZW1zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlSXRlbXNMaXN0KGRhdGE6IGFueSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBjb25zdCBpdGVtcyA9IHNjaGVtYS5pdGVtcyBhcyBKU09OU2NoZW1hW107XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggIT09IGl0ZW1zLmxlbmd0aCkge1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICAgIGlmICghdGhpcy52YWxpZGF0ZShkYXRhW2ldLCBpdGVtc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZVN0cmluZyhkYXRhOiBhbnksIHNjaGVtYTogSlNPTlNjaGVtYSk6IGJvb2xlYW4ge1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ21heExlbmd0aCcpICYmIChzY2hlbWEubWF4TGVuZ3RoICE9IG51bGwpKSB7XG5cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzY2hlbWEubWF4TGVuZ3RoKSB8fCBzY2hlbWEubWF4TGVuZ3RoIDwgMCkge1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJ21heExlbmd0aCcgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLmApO1xuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnbWluTGVuZ3RoJykgJiYgKHNjaGVtYS5taW5MZW5ndGggIT0gbnVsbCkpIHtcblxuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNjaGVtYS5taW5MZW5ndGgpIHx8IHNjaGVtYS5taW5MZW5ndGggPCAwKSB7XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnbWluTGVuZ3RoJyBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIuYCk7XG5cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdwYXR0ZXJuJykgJiYgKHNjaGVtYS5wYXR0ZXJuICE9IG51bGwpKSB7XG5cbiAgICAgIGNvbnN0IHJlZ3VsYXJFeHByZXNzaW9uID0gbmV3IFJlZ0V4cChzY2hlbWEucGF0dGVybik7XG5cbiAgICAgIGlmICghcmVndWxhckV4cHJlc3Npb24udGVzdChkYXRhKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlTnVtYmVyKGRhdGE6IGFueSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKChzY2hlbWEudHlwZSA9PT0gJ2ludGVnZXInKSAmJiAhTnVtYmVyLmlzSW50ZWdlcihkYXRhKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ211bHRpcGxlT2YnKSAmJiAoc2NoZW1hLm11bHRpcGxlT2YgIT0gbnVsbCkpIHtcblxuICAgICAgaWYgKHNjaGVtYS5tdWx0aXBsZU9mIDw9IDApIHtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdtdWx0aXBsZU9mJyBtdXN0IGJlIGEgbnVtYmVyIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAwLmApO1xuXG4gICAgICB9XG5cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihkYXRhIC8gc2NoZW1hLm11bHRpcGxlT2YpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ21heGltdW0nKSAmJiAoc2NoZW1hLm1heGltdW0gIT0gbnVsbCkpIHtcblxuICAgICAgaWYgKGRhdGEgPiBzY2hlbWEubWF4aW11bSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdleGNsdXNpdmVNYXhpbXVtJykgJiYgKHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtICE9IG51bGwpKSB7XG5cbiAgICAgIGlmIChkYXRhID49IHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ21pbmltdW0nKSAmJiAoc2NoZW1hLm1pbmltdW0gIT0gbnVsbCkpIHtcblxuICAgICAgaWYgKGRhdGEgPCBzY2hlbWEubWluaW11bSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdleGNsdXNpdmVNaW5pbXVtJykgJiYgKHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICE9IG51bGwpKSB7XG5cbiAgICAgIGlmIChkYXRhIDw9IHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuXG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBMb2NhbERhdGFiYXNlIH0gZnJvbSAnLi9kYXRhYmFzZXMvbG9jYWwtZGF0YWJhc2UnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYSB9IGZyb20gJy4vdmFsaWRhdGlvbi9qc29uLXNjaGVtYSc7XG5pbXBvcnQgeyBKU09OVmFsaWRhdG9yIH0gZnJvbSAnLi92YWxpZGF0aW9uL2pzb24tdmFsaWRhdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBMU0dldEl0ZW1PcHRpb25zIHtcbiAgc2NoZW1hPzogSlNPTlNjaGVtYSB8IG51bGw7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZSB7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGdldEl0ZW1PcHRpb25zRGVmYXVsdDogTFNHZXRJdGVtT3B0aW9ucyA9IHtcbiAgICBzY2hlbWE6IG51bGxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGF0YWJhc2U6IExvY2FsRGF0YWJhc2UsIHByb3RlY3RlZCBqc29uVmFsaWRhdG9yOiBKU09OVmFsaWRhdG9yKSB7fVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gdmFsdWUgaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZywgb3B0aW9uczogTFNHZXRJdGVtT3B0aW9ucyA9IHRoaXMuZ2V0SXRlbU9wdGlvbnNEZWZhdWx0KTogT2JzZXJ2YWJsZTxUIHwgbnVsbD4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuZ2V0SXRlbTxUPihrZXkpLnBpcGUoXG5cbiAgICAgIC8qIFZhbGlkYXRlIGRhdGEgdXBvbiBhIGpzb24gc2NoZW1hIGlmIHJlcXVlc3RlZCAqL1xuICAgICAgbWVyZ2VNYXAoKGRhdGEpID0+IHtcblxuICAgICAgICBpZiAob3B0aW9ucy5zY2hlbWEgJiYgZGF0YSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgbGV0IHZhbGlkYXRpb24gPSB0cnVlO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24gPSB0aGlzLmpzb25WYWxpZGF0b3IudmFsaWRhdGUoZGF0YSwgb3B0aW9ucy5zY2hlbWEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF2YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoYEpTT04gaW52YWxpZGApKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvZihkYXRhKTtcblxuICAgICAgfSkpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gZGF0YSBUaGUgaXRlbSdzIHZhbHVlLCBtdXN0IE5PVCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLnNldEl0ZW0oa2V5LCBkYXRhKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UucmVtb3ZlSXRlbShrZXkpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIGNsZWFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuY2xlYXIoKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlLCBhbmQgYXV0by1zdWJzY3JpYmVzXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHBhcmFtIGRhdGEgVGhlIGl0ZW0ncyB2YWx1ZSwgbXVzdCBOT1QgYmUgbnVsbCBvciB1bmRlZmluZWRcbiAgICovXG4gIHNldEl0ZW1TdWJzY3JpYmUoa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xuXG4gICAgdGhpcy5zZXRJdGVtKGtleSwgZGF0YSkuc3Vic2NyaWJlKCgpID0+IHt9LCAoKSA9PiB7fSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZSwgYW5kIGF1dG8tc3Vic2NyaWJlc1xuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqL1xuICAgcmVtb3ZlSXRlbVN1YnNjcmliZShrZXk6IHN0cmluZyk6IHZvaWQge1xuXG4gICAgdGhpcy5yZW1vdmVJdGVtKGtleSkuc3Vic2NyaWJlKCgpID0+IHt9LCAoKSA9PiB7fSk7XG5cbiAgfVxuXG4gIC8qKiBEZWxldGVzIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2UsIGFuZCBhdXRvLXN1YnNjcmliZXMgKi9cbiAgY2xlYXJTdWJzY3JpYmUoKTogdm9pZCB7XG5cbiAgICB0aGlzLmNsZWFyKCkuc3Vic2NyaWJlKCgpID0+IHt9LCAoKSA9PiB7fSk7XG5cbiAgfVxuXG59XG4iXSwibmFtZXMiOlsiSW5qZWN0aW9uVG9rZW4iLCJ0aHJvd0Vycm9yIiwib2YiLCJJbmplY3RhYmxlIiwiT3B0aW9uYWwiLCJJbmplY3QiLCJSZXBsYXlTdWJqZWN0IiwibWFwIiwibWVyZ2VNYXAiLCJmcm9tRXZlbnQiLCJyYWNlIiwiZmlyc3QiLCJ0YXAiLCJpc1BsYXRmb3JtQnJvd3NlciIsIlBMQVRGT1JNX0lEIiwidHNsaWJfMS5fX3ZhbHVlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztB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