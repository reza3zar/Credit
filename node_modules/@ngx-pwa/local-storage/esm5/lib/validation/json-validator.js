/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * \@todo Add other JSON Schema validation features
 */
var JSONValidator = /** @class */ (function () {
    function JSONValidator() {
    }
    /**
     * Validate a JSON data against a JSON Schema
     * @param data JSON data to validate
     * @param schema Subset of JSON Schema.
     * Types are enforced to validate everything:
     * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
     * Therefore, unlike the spec, booleans are not allowed as schemas.
     * Not all validation features are supported: just follow the interface.
     * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid
     */
    /**
     * Validate a JSON data against a JSON Schema
     * @param {?} data JSON data to validate
     * @param {?} schema Subset of JSON Schema.
     * Types are enforced to validate everything:
     * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
     * Therefore, unlike the spec, booleans are not allowed as schemas.
     * Not all validation features are supported: just follow the interface.
     * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
     */
    JSONValidator.prototype.validate = /**
     * Validate a JSON data against a JSON Schema
     * @param {?} data JSON data to validate
     * @param {?} schema Subset of JSON Schema.
     * Types are enforced to validate everything:
     * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
     * Therefore, unlike the spec, booleans are not allowed as schemas.
     * Not all validation features are supported: just follow the interface.
     * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
     */
    function (data, schema) {
        /** @todo When TS 2.8, explore if this is possible with conditional types */
        if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)
            && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))
            || schema.type === 'array' || schema.type === 'object')
            && !(schema.hasOwnProperty('properties') && schema.properties != null) && !(schema.hasOwnProperty('items') && schema.items != null)) {
            throw new Error("Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.");
        }
        if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {
            return false;
        }
        if (!this.validateEnum(data, schema)) {
            return false;
        }
        if (!this.validateType(data, schema)) {
            return false;
        }
        if (!this.validateItems(data, schema)) {
            return false;
        }
        if (!this.validateProperties(data, schema)) {
            return false;
        }
        if (!this.validateRequired(data, schema)) {
            return false;
        }
        return true;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    JSONValidator.prototype.isObjectNotNull = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return (value !== null) && (typeof value === 'object');
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateProperties = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {
            return true;
        }
        if (!this.isObjectNotNull(data)) {
            return false;
        }
        /**
             * Check if the object doesn't have more properties than expected
             * Equivalent of additionalProperties: false
             */
        if (Object.keys(schema.properties).length < Object.keys(data).length) {
            return false;
        }
        /* Recursively validate all properties */
        for (var /** @type {?} */ property in schema.properties) {
            if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {
                if (!this.validate(data[property], schema.properties[property])) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateRequired = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (!schema.hasOwnProperty('required') || (schema.required == null)) {
            return true;
        }
        if (!this.isObjectNotNull(data)) {
            return false;
        }
        try {
            for (var _a = tslib_1.__values(schema.required), _b = _a.next(); !_b.done; _b = _a.next()) {
                var requiredProp = _b.value;
                /* Checks if the property is present in the schema 'properties' */
                if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {
                    throw new Error("'required' properties must be described in 'properties' too.");
                }
                /* Checks if the property is present in the data */
                if (!data.hasOwnProperty(requiredProp)) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
        var e_1, _c;
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateEnum = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {
            return true;
        }
        /** @todo Move to ES2016 .includes() ? */
        return (schema.enum.indexOf(data) !== -1);
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateType = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (!schema.hasOwnProperty('type') || (schema.type == null)) {
            return true;
        }
        switch (schema.type) {
            case 'null':
                return data === null;
            case 'string':
                return this.validateString(data, schema);
            case 'number':
            case 'integer':
                return this.validateNumber(data, schema);
            case 'boolean':
                return typeof data === 'boolean';
            case 'object':
                return typeof data === 'object';
            case 'array':
                return Array.isArray(data);
        }
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateItems = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (!schema.hasOwnProperty('items') || (schema.items == null)) {
            return true;
        }
        if (!Array.isArray(data)) {
            return false;
        }
        if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {
            if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {
                throw new Error("'maxItems' must be a non-negative integer.");
            }
            if (data.length > schema.maxItems) {
                return false;
            }
        }
        if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {
            if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {
                throw new Error("'minItems' must be a non-negative integer.");
            }
            if (data.length < schema.minItems) {
                return false;
            }
        }
        if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {
            if (schema.uniqueItems) {
                var /** @type {?} */ dataSet = new Set(data);
                if (data.length !== dataSet.size) {
                    return false;
                }
            }
        }
        if (Array.isArray(schema.items)) {
            return this.validateItemsList(data, schema);
        }
        try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                var value = data_1_1.value;
                if (!this.validate(value, schema.items)) {
                    return false;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return true;
        var e_2, _a;
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateItemsList = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        var /** @type {?} */ items = /** @type {?} */ (schema.items);
        if (data.length !== items.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < items.length; i += 1) {
            if (!this.validate(data[i], items[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateString = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (typeof data !== 'string') {
            return false;
        }
        if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {
            if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {
                throw new Error("'maxLength' must be a non-negative integer.");
            }
            if (data.length > schema.maxLength) {
                return false;
            }
        }
        if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {
            if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {
                throw new Error("'minLength' must be a non-negative integer.");
            }
            if (data.length < schema.minLength) {
                return false;
            }
        }
        if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {
            var /** @type {?} */ regularExpression = new RegExp(schema.pattern);
            if (!regularExpression.test(data)) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    JSONValidator.prototype.validateNumber = /**
     * @param {?} data
     * @param {?} schema
     * @return {?}
     */
    function (data, schema) {
        if (typeof data !== 'number') {
            return false;
        }
        if ((schema.type === 'integer') && !Number.isInteger(data)) {
            return false;
        }
        if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {
            if (schema.multipleOf <= 0) {
                throw new Error("'multipleOf' must be a number strictly greater than 0.");
            }
            if (!Number.isInteger(data / schema.multipleOf)) {
                return false;
            }
        }
        if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {
            if (data > schema.maximum) {
                return false;
            }
        }
        if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {
            if (data >= schema.exclusiveMaximum) {
                return false;
            }
        }
        if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {
            if (data < schema.minimum) {
                return false;
            }
        }
        if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {
            if (data <= schema.exclusiveMinimum) {
                return false;
            }
        }
        return true;
    };
    JSONValidator.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ JSONValidator.ngInjectableDef = i0.defineInjectable({ factory: function JSONValidator_Factory() { return new JSONValidator(); }, token: JSONValidator, providedIn: "root" });
    return JSONValidator;
}());
export { JSONValidator };

//# sourceMappingURL=data:application/json;base64,