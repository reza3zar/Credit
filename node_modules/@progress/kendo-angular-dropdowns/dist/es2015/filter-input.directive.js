import { Directive, ElementRef, Input, KeyValueDiffers } from '@angular/core';
/**
 * @hidden
 */
export class FilterInputDirective {
    constructor(element, differs) {
        this.element = element;
        this.differs = differs;
    }
    set focused(value) {
        this._focused = value;
        if (!this.differ && this.focused) {
            //differ does not work with Boolean, that is why we wrap it in an object
            this.differ = this.differs.find({ focused: this.focused }).create();
        }
    }
    get focused() {
        return this._focused;
    }
    ngDoCheck() {
        if (this.differ) {
            //differ does not work with Boolean, that is why we wrap it in an object
            const focusChanges = this.differ.diff({ focused: this.focused });
            if (focusChanges && this.focused) {
                this.element.nativeElement.focus();
            }
        }
    }
}
FilterInputDirective.decorators = [
    { type: Directive, args: [{
                selector: '[filterInput]' // tslint:disable-line
            },] },
];
/** @nocollapse */
FilterInputDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: KeyValueDiffers, },
];
FilterInputDirective.propDecorators = {
    'focused': [{ type: Input, args: ['filterInput',] },],
};
