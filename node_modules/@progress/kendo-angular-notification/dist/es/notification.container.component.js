import { Component, Input, ElementRef, ComponentFactoryResolver, ViewContainerRef, ViewChild, TemplateRef } from '@angular/core';
import { NotificationComponent } from './notification.component';
/**
 * @hidden
 *
 */
var NotificationContainerComponent = /** @class */ (function () {
    function NotificationContainerComponent(element, resolver) {
        this.element = element;
        this.resolver = resolver;
        this.id = '';
        this.notifications = [];
    }
    NotificationContainerComponent.prototype.ngOnDestroy = function () {
        this.notifications.forEach(function (notification) {
            if (notification.closeClickSubscription) {
                notification.closeClickSubscription.unsubscribe();
            }
        });
        this.notifications = [];
    };
    NotificationContainerComponent.prototype.addNotification = function (settings) {
        var position = settings.position;
        var animation = settings.animation || null;
        this.id = position.horizontal + " " + position.vertical;
        this.position = position;
        this.animation = animation;
        var factory = this.resolver.resolveComponentFactory(NotificationComponent);
        var notificationRef = this.container.createComponent(factory);
        this.applySettings(notificationRef, settings);
        var customComponent = null;
        if (typeof settings.content === 'function') {
            var customFactory = this.resolver.resolveComponentFactory(settings.content);
            customComponent = notificationRef.instance.container.createComponent(customFactory);
        }
        notificationRef.instance.cdr.detectChanges();
        this.notifications.push(notificationRef.instance);
        this.applyPosition();
        this.applyContainerWrap();
        return {
            hide: function () { return notificationRef.instance.hide(customComponent); },
            notification: notificationRef,
            content: customComponent ? customComponent.instance : null
        };
    };
    NotificationContainerComponent.prototype.hide = function (notificationRef) {
        var instance = notificationRef.instance;
        var index = this.notifications.indexOf(instance);
        this.notifications.splice(index, 1);
        if (instance.closeClickSubscription) {
            instance.closeClickSubscription.unsubscribe();
        }
        instance.templateRef = null;
        instance.templateString = null;
        instance.cdr.detectChanges();
        notificationRef.destroy();
    };
    /**
     * @hidden
     */
    NotificationContainerComponent.prototype.applyContainerWrap = function () {
        if (this.position.horizontal === 'right') {
            return 'wrap-reverse';
        }
        return 'wrap';
    };
    NotificationContainerComponent.prototype.applySettings = function (notificationRef, settings) {
        var _this = this;
        var notification = notificationRef.instance;
        var content = settings.content;
        var animation = settings.animation || null;
        notification.closeClickSubscription = notification.close
            .subscribe(function () { return _this.hide(notificationRef); });
        if (typeof content === 'string') {
            notification.templateString = content;
        }
        if (content instanceof TemplateRef) {
            notification.templateRef = content;
        }
        notification.animation = animation;
        var type = settings.type;
        if (type && type.style === undefined) {
            type.style = 'none';
        }
        if (type && type.icon === undefined) {
            type.icon = true;
        }
        notification.type = type;
        notification.closable = settings.closable;
        notification.hideAfter = settings.hideAfter;
        notification.width = settings.width;
        notification.height = settings.height;
    };
    NotificationContainerComponent.prototype.applyPosition = function () {
        var element = this.element.nativeElement.children[0];
        var elementHalfWidth = element.getBoundingClientRect().width / 2;
        var positionStyles = this.setContainerPosition(this.position, elementHalfWidth);
        Object.keys(positionStyles).forEach(function (cssStyle) {
            element.style[cssStyle] = positionStyles[cssStyle];
        });
    };
    NotificationContainerComponent.prototype.setContainerPosition = function (position, offsetMargin) {
        var positionLayout = {
            horizontal: {
                left: { left: 0, alignItems: 'flex-start' },
                right: { right: 0, alignItems: 'flex-start' },
                center: { left: '50%', marginLeft: -offsetMargin + "px", alignItems: 'center' }
            },
            vertical: {
                top: { top: 0 },
                bottom: { bottom: 0 }
            }
        };
        var horizontal = positionLayout.horizontal[position.horizontal];
        var vertical = positionLayout.vertical[position.vertical];
        return Object.assign({}, horizontal, vertical);
    };
    NotificationContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-notification-container',
                    template: "\n    <div class=\"k-notification-group\" [style.flexWrap]=\"applyContainerWrap()\">\n        <ng-container #container></ng-container>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NotificationContainerComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ComponentFactoryResolver, },
    ]; };
    NotificationContainerComponent.propDecorators = {
        'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] },],
        'id': [{ type: Input },],
    };
    return NotificationContainerComponent;
}());
export { NotificationContainerComponent };
