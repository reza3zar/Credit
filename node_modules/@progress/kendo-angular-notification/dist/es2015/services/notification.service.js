import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';
import { NotificationContainerComponent } from '../notification.container.component';
/**
 * A service for opening Notification components dynamically
 * ([see example]({% slug overview_notification %})).
 *
 * @export
 * @class NotificationService
 */
export class NotificationService {
    /**
     * @hidden
     */
    constructor(resolver, appRef, injector) {
        this.resolver = resolver;
        this.appRef = appRef;
        this.injector = injector;
        this.notificationContainers = [];
        this.position = { horizontal: 'right', vertical: 'top' };
    }
    /**
     * Opens a Notification component. Created Notification are mounted
     * in the DOM directly in the root application component.
     *
     * @param {NotificationSettings} settings - The settings which define the Notification.
     *
     * @returns {NotificationRef} - A reference to the Notification object and the convenience properties.
     */
    show(settings) {
        if (!settings) {
            throw new Error('NotificationSettings settings are required');
        }
        const position = settings.position || this.position;
        const appRootComponent = this.appRef.components[0].location.nativeElement;
        const currentId = `${position.horizontal} ${position.vertical}`;
        let container;
        let notificationRef;
        let notificationContainer = this.notificationContainers.find(c => c.id === currentId);
        if (!notificationContainer) {
            container = this.resolver
                .resolveComponentFactory(NotificationContainerComponent)
                .create(this.injector);
            notificationContainer = container.instance;
            this.appRef.attachView(container.hostView);
            const domElem = container.hostView.rootNodes[0];
            appRootComponent.appendChild(domElem);
            this.notificationContainers.push(notificationContainer);
        }
        settings.position = position;
        notificationRef = notificationContainer.addNotification(settings);
        return notificationRef;
    }
}
NotificationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NotificationService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
];
