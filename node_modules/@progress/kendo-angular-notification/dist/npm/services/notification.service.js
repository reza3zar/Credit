"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var notification_container_component_1 = require("../notification.container.component");
/**
 * A service for opening Notification components dynamically
 * ([see example]({% slug overview_notification %})).
 *
 * @export
 * @class NotificationService
 */
var NotificationService = /** @class */ (function () {
    /**
     * @hidden
     */
    function NotificationService(resolver, appRef, injector) {
        this.resolver = resolver;
        this.appRef = appRef;
        this.injector = injector;
        this.notificationContainers = [];
        this.position = { horizontal: 'right', vertical: 'top' };
    }
    /**
     * Opens a Notification component. Created Notification are mounted
     * in the DOM directly in the root application component.
     *
     * @param {NotificationSettings} settings - The settings which define the Notification.
     *
     * @returns {NotificationRef} - A reference to the Notification object and the convenience properties.
     */
    NotificationService.prototype.show = function (settings) {
        if (!settings) {
            throw new Error('NotificationSettings settings are required');
        }
        var position = settings.position || this.position;
        var appRootComponent = this.appRef.components[0].location.nativeElement;
        var currentId = position.horizontal + " " + position.vertical;
        var container;
        var notificationRef;
        var notificationContainer = this.notificationContainers.find(function (c) { return c.id === currentId; });
        if (!notificationContainer) {
            container = this.resolver
                .resolveComponentFactory(notification_container_component_1.NotificationContainerComponent)
                .create(this.injector);
            notificationContainer = container.instance;
            this.appRef.attachView(container.hostView);
            var domElem = container.hostView.rootNodes[0];
            appRootComponent.appendChild(domElem);
            this.notificationContainers.push(notificationContainer);
        }
        settings.position = position;
        notificationRef = notificationContainer.addNotification(settings);
        return notificationRef;
    };
    NotificationService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    NotificationService.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.ApplicationRef, },
        { type: core_1.Injector, },
    ]; };
    return NotificationService;
}());
exports.NotificationService = NotificationService;
