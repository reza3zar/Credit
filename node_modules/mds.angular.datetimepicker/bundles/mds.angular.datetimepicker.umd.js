(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('mds.persian.datetime'), require('@angular/core'), require('@angular/forms'), require('@angular/animations'), require('@angular/platform-browser'), require('@angular/common'), require('@angular/material'), require('@angular/material/button'), require('@angular/material/form-field'), require('@angular/material/grid-list')) :
    typeof define === 'function' && define.amd ? define('mds.angular.datetimepicker', ['exports', 'mds.persian.datetime', '@angular/core', '@angular/forms', '@angular/animations', '@angular/platform-browser', '@angular/common', '@angular/material', '@angular/material/button', '@angular/material/form-field', '@angular/material/grid-list'], factory) :
    (factory((global.mds = global.mds || {}, global.mds.angular = global.mds.angular || {}, global.mds.angular.datetimepicker = {}),global.mds_persian_datetime,global.ng.core,global.ng.forms,global.ng.animations,global.ng.platformBrowser,global.ng.common,global.ng.material,global.ng.material.button,global.ng.material['form-field'],global.ng.material['grid-list']));
}(this, (function (exports,mds_persian_datetime,i0,forms,animations,platformBrowser,common,material,button,formField,gridList) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var TemplateTypeEnum = {
        bootstrap: 1,
        material: 2,
    };
    TemplateTypeEnum[TemplateTypeEnum.bootstrap] = 'bootstrap';
    TemplateTypeEnum[TemplateTypeEnum.material] = 'material';
    /** @enum {number} */
    var TextBoxTypeEnum = {
        withButton: 1,
        withoutButton: 2,
    };
    TextBoxTypeEnum[TextBoxTypeEnum.withButton] = 'withButton';
    TextBoxTypeEnum[TextBoxTypeEnum.withoutButton] = 'withoutButton';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PersianDateTime = mds_persian_datetime.Mds.PersianDateTime;
    var MdsDatetimePickerUtility = (function () {
        function MdsDatetimePickerUtility() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        MdsDatetimePickerUtility.toPersianNumber = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (input == '' || input == null)
                    return '';
                input = input.replace(/ي/img, 'ی').replace(/ك/img, 'ک');
                //۰ ۱ ۲ ۳ ۴ ۵ ۶ ۷ ۸ ۹
                return input.replace(/0/img, '۰')
                    .replace(/1/img, '۱')
                    .replace(/2/img, '۲')
                    .replace(/3/img, '۳')
                    .replace(/4/img, '۴')
                    .replace(/5/img, '۵')
                    .replace(/6/img, '۶')
                    .replace(/7/img, '۷')
                    .replace(/8/img, '۸')
                    .replace(/9/img, '۹');
            };
        /**
         * @param {?} input
         * @return {?}
         */
        MdsDatetimePickerUtility.toEnglishNumber = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (input == '' || input == null)
                    return 0;
                input = input.replace(/ي/img, 'ی').replace(/ك/img, 'ک');
                //۰ ۱ ۲ ۳ ۴ ۵ ۶ ۷ ۸ ۹
                input = input.replace(/,/img, '')
                    .replace(/۰/img, '0')
                    .replace(/۱/img, '1')
                    .replace(/۲/img, '2')
                    .replace(/۳/img, '3')
                    .replace(/۴/img, '4')
                    .replace(/۵/img, '5')
                    .replace(/۶/img, '6')
                    .replace(/۷/img, '7')
                    .replace(/۸/img, '8')
                    .replace(/۹/img, '9');
                return Number(input);
            };
        /**
         * @param {?} input
         * @return {?}
         */
        MdsDatetimePickerUtility.toEnglishString = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (input == '' || input == null)
                    return '';
                input = input.replace(/ي/img, 'ی').replace(/ك/img, 'ک');
                //۰ ۱ ۲ ۳ ۴ ۵ ۶ ۷ ۸ ۹
                input = input.replace(/,/img, '')
                    .replace(/۰/img, '0')
                    .replace(/۱/img, '1')
                    .replace(/۲/img, '2')
                    .replace(/۳/img, '3')
                    .replace(/۴/img, '4')
                    .replace(/۵/img, '5')
                    .replace(/۶/img, '6')
                    .replace(/۷/img, '7')
                    .replace(/۸/img, '8')
                    .replace(/۹/img, '9');
                return input;
            };
        /**
         * @param {?} date
         * @param {?=} format
         * @return {?}
         */
        MdsDatetimePickerUtility.dateTimeToString = /**
         * @param {?} date
         * @param {?=} format
         * @return {?}
         */
            function (date, format) {
                if (format === void 0) {
                    format = '';
                }
                if (format == '' || format == null)
                    return this.zeroPad(date.getFullYear(), '0000') + "/" + this.zeroPad(date.getMonth() + 1, '00') + "/" + this.zeroPad(date.getDate(), '00') + "   " + this.zeroPad(date.getHours(), '00') + ":" + this.zeroPad(date.getMinutes(), '00') + ":" + this.zeroPad(date.getSeconds(), '00');
                /** @type {?} */
                var dateTimeString = format;
                dateTimeString = dateTimeString.replace(/yyyy/, this.zeroPad(date.getFullYear(), '0000'));
                dateTimeString = dateTimeString.replace(/yy/, this.zeroPad(date.getFullYear(), '00'));
                dateTimeString = dateTimeString.replace(/dddd/, this.getGregorianWeekDayName(date.getDay()));
                dateTimeString = dateTimeString.replace(/dd/, this.zeroPad(date.getDate(), '00'));
                dateTimeString = dateTimeString.replace(/d/, date.getDate().toString());
                dateTimeString = dateTimeString.replace(/hh/, this.zeroPad(date.getHours(), '00'));
                dateTimeString = dateTimeString.replace(/h/, date.getHours().toString());
                dateTimeString = dateTimeString.replace(/mm/, this.zeroPad(date.getMinutes(), '00'));
                dateTimeString = dateTimeString.replace(/m/, date.getMinutes().toString());
                dateTimeString = dateTimeString.replace(/ss/, this.zeroPad(date.getSeconds(), '00'));
                dateTimeString = dateTimeString.replace(/s/, date.getSeconds().toString());
                dateTimeString = dateTimeString.replace(/fff/, this.zeroPad(date.getMilliseconds(), '000'));
                dateTimeString = dateTimeString.replace(/ff/, this.zeroPad(date.getMilliseconds() / 10, '00'));
                dateTimeString = dateTimeString.replace(/f/, (date.getMilliseconds() / 10).toString());
                dateTimeString = dateTimeString.replace(/MMMM/, this.getGregorianMonthName(date.getMonth()));
                dateTimeString = dateTimeString.replace(/MM/, this.zeroPad(date.getMonth() + 1, '00'));
                dateTimeString = dateTimeString.replace(/M(?!a)/, (date.getMonth() + 1).toString());
                return dateTimeString;
            };
        /**
         * @param {?} nr
         * @param {?} base
         * @return {?}
         */
        MdsDatetimePickerUtility.zeroPad = /**
         * @param {?} nr
         * @param {?} base
         * @return {?}
         */
            function (nr, base) {
                if (nr == undefined || nr == '')
                    return base;
                /** @type {?} */
                var len = (String(base).length - String(nr).length) + 1;
                return len > 0 ? new Array(len).join('0') + nr : nr;
            };
        /**
         * @param {?} monthIndex
         * @return {?}
         */
        MdsDatetimePickerUtility.getGregorianMonthName = /**
         * @param {?} monthIndex
         * @return {?}
         */
            function (monthIndex) {
                return [
                    "January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"
                ][monthIndex];
            };
        /**
         * @param {?} weekDayIndex
         * @return {?}
         */
        MdsDatetimePickerUtility.getGregorianWeekDayName = /**
         * @param {?} weekDayIndex
         * @return {?}
         */
            function (weekDayIndex) {
                return ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "FrIMdsAngularDateTimePickerDay", "Saturday"][weekDayIndex];
            };
        /**
         * @param {?} dateRangeString
         * @return {?}
         */
        MdsDatetimePickerUtility.getPersianDateRanges = /**
         * @param {?} dateRangeString
         * @return {?}
         */
            function (dateRangeString) {
                /** @type {?} */
                var startEndDateArrayResult = new Array();
                try {
                    /** @type {?} */
                    var startEndDateArray = dateRangeString.split(' - ');
                    /** @type {?} */
                    var startMdsPersianDateTime = PersianDateTime.parse(startEndDateArray[0]);
                    /** @type {?} */
                    var endMdsPersianDateTime = PersianDateTime.parse(startEndDateArray[1]);
                    if (endMdsPersianDateTime.toDate() < startMdsPersianDateTime.toDate())
                        throw new Error('Range date is not valid. End date must be bigger than start date');
                    startEndDateArrayResult.push(startMdsPersianDateTime);
                    startEndDateArrayResult.push(endMdsPersianDateTime);
                }
                catch (e) {
                    throw new Error('Range date is not valid. You must enter range date string like "1396/03/06 - 1396/03/21"');
                }
                return startEndDateArrayResult;
            };
        /**
         * @param {?} dateRangeString
         * @return {?}
         */
        MdsDatetimePickerUtility.getDateRanges = /**
         * @param {?} dateRangeString
         * @return {?}
         */
            function (dateRangeString) {
                /** @type {?} */
                var startEndDateArrayResult = new Array();
                try {
                    /** @type {?} */
                    var startEndDateArray = dateRangeString.split(' - ');
                    /** @type {?} */
                    var startDateTime = new Date(Date.parse(startEndDateArray[0]));
                    /** @type {?} */
                    var endDateTime = new Date(Date.parse(startEndDateArray[1]));
                    if (endDateTime < startDateTime)
                        throw new Error('Range date is not valid. End date must be bigger than start date');
                    startEndDateArrayResult.push(startDateTime);
                    startEndDateArrayResult.push(endDateTime);
                }
                catch (e) {
                    throw new Error('Range date is not valid. You must enter range date string like "2017/02/06 - 2017/02/18"');
                }
                return startEndDateArrayResult;
            };
        return MdsDatetimePickerUtility;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MdsAngularPersianDateTimePickerComponent = (function () {
        function MdsAngularPersianDateTimePickerComponent(element) {
            var _this = this;
            this.element = element;
            //#region Input OutPut
            /**
             * از بوت استرپ استفاده شود یا متریال
             * TemplateTypeEnum
             */
            this.templateType = TemplateTypeEnum.bootstrap;
            /**
             * نوع نمایش تکس باکس
             * TextBoxTypeEnum
             */
            this.textBoxType = TextBoxTypeEnum.withButton;
            /**
             * مقدار اولیه
             */
            this.initialValue = '';
            /**
             * نوع نمایش دیت پیکر به صورت این لاین باشد یا نه
             */
            this.inLine = true;
            /**
             * آیا از کاراکترهای فارسی استفاده شود
             * وقتی تقویم میلادی است بدون تاثیر می شود
             */
            this.persianChar = true;
            /**
             * آیا دیت پیکر به شکل انتخاب رنج تاریخی باشد یا نه
             */
            this.rangeSelector = false;
            /**
             * تقویم میلادی باشد یا شمسی
             */
            this.isPersian = true;
            /**
             * آیا تایم پیکر نمایش داده بشود یا نه
             * در نوع انتخاب رنج تاریخی بدون تاثیر است
             */
            this.timePicker = true;
            /**
             * PlaceHolder
             */
            this.placeHolder = '';
            /**
             * آیکون
             */
            this.buttonIcon = '📅';
            /**
              * فرمت پیش فرض 1393/09/14   13:49:40
              * yyyy: سال چهار رقمی
              * yy: سال دو رقمی
              * MMMM: نام فارسی ماه
              * MM: عدد دو رقمی ماه
              * M: عدد یک رقمی ماه
              * dddd: نام فارسی روز هفته
              * dd: عدد دو رقمی روز ماه
              * d: عدد یک رقمی روز ماه
              * HH: ساعت دو رقمی با فرمت 00 تا 24
              * H: ساعت یک رقمی با فرمت 0 تا 24
              * hh: ساعت دو رقمی با فرمت 00 تا 12
              * h: ساعت یک رقمی با فرمت 0 تا 12
              * mm: عدد دو رقمی دقیقه
              * m: عدد یک رقمی دقیقه
              * ss: ثانیه دو رقمی
              * s: ثانیه یک رقمی
              * fff: میلی ثانیه 3 رقمی
              * ff: میلی ثانیه 2 رقمی
              * f: میلی ثانیه یک رقمی
              * tt: ب.ظ یا ق.ظ
              * t: حرف اول از ب.ظ یا ق.ظ
              **/
            this.format = '';
            /**
             * وقتی تاریخ انتخابی عوض می شود این اونت فراخوانی می شود
             */
            this.dateChanged = new i0.EventEmitter();
            /**
             * وقتی رنج تاریخی انتخاب شده عوض می شود این اونت فراخوانی می شود
             */
            this.rangeDateChanged = new i0.EventEmitter();
            /**
             * وقتی کلیدی روی تکس باکس انتخاب تاریخ فشرده می شود این اونت فراخوانی می شود
             */
            this.textBoxKeyDown = new i0.EventEmitter();
            /**
             * وقتی روی تکس باکس انتخاب تاریخ بلور می شود این اونت فراخوانی می شود
             */
            this.textBoxBlur = new i0.EventEmitter();
            /**
             * وقتی روی تکس باکس انتخاب تاریخ فوکوس می شود این اونت فراخوانی می شود
             */
            this.textBoxFocus = new i0.EventEmitter();
            /**
             * وقتی روی تکس باکس انتخاب تاریخ تغییری ایجاد می شود این اونت فراخوانی می شود
             */
            this.textBoxChange = new i0.EventEmitter();
            //#endregion
            this.myControl = new forms.FormControl();
            this.afterViewInit = false;
            this.inClearFunction = false;
            this.showingDateTimePickerLocked = false;
            this.showDatePicker = false;
            this._selectedDateTime = null;
            this._selectedDateTimeRanges = null;
            //#region ControlValueAccessor
            this.propagateChange = function () { };
            this.valIMdsAngularDateTimePickerDateFn = function () { };
            /** @type {?} */
            var doc = document.getElementsByTagName('html')[0];
            doc.addEventListener('click', function (event) {
                /** @type {?} */
                var targetElement = ((event.target));
                if (_this.showDatePicker && event.target &&
                    _this.element.nativeElement !== event.target &&
                    !_this.element.nativeElement.contains(event.target) &&
                    !targetElement.hasAttribute('data-mds-persian-datetimepicker')) {
                    _this.showDatePicker = false;
                    _this.mdsDateTimePickerCore.hideSelecMonthAndYearBlock();
                    _this.mdsDateTimePickerCore.resetIncompleteRanges();
                }
            }, false);
        }
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // this.initialValue = !this.persianChar ? MdsDatetimePickerUtility.toEnglishString(this.initialValue) : MdsDatetimePickerUtility.toPersianNumber(this.initialValue);
                // if (this.initialValue != '' && this.rangeSelector) {
                //   if (this.isPersian)
                //     MdsDatetimePickerUtility.getPersianDateRanges(this.initialValue);
                //   else
                //     MdsDatetimePickerUtility.getDateRanges(this.initialValue);
                // }
                // this.myControl.setValue(this.initialValue);
                if (!this.isPersian)
                    this.persianChar = false;
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.afterViewInit = true;
            };
        Object.defineProperty(MdsAngularPersianDateTimePickerComponent.prototype, "selectedDateTime", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedDateTime;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!this.mdsDateTimePickerCore)
                    return;
                try {
                    this.mdsDateTimePickerCore.setDateTimeByDate(!value ? null : new Date(value));
                    if (value == null)
                        this._selectedDateTime = null;
                    else
                        this._selectedDateTime = new Date(value);
                }
                catch (e) {
                    this.clear();
                    console.error(e);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerComponent.prototype, "selectedDateTimeRanges", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedDateTimeRanges;
            },
            set: /**
             * @param {?} values
             * @return {?}
             */ function (values) {
                if (!this.mdsDateTimePickerCore)
                    return;
                try {
                    if (values == null || values.length < 2)
                        return;
                    this.mdsDateTimePickerCore.setDateTimeRangesByDate(values[0] == null ? null : new Date(values[0]), values[1] == null ? null : new Date(values[1]));
                    this._selectedDateTimeRanges = [values[0], values[1]];
                }
                catch (e) {
                    this.clear();
                    console.error(e);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.getEventObject = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                return {
                    eventArgs: event,
                    selectedDate: this.mdsDateTimePickerCore.getSelectedDate,
                    selectedRangeDates: this.mdsDateTimePickerCore.getSelectedRangeDates
                };
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.getSelectedDateObject = /**
         * @return {?}
         */
            function () {
                return {
                    selectedDate: this.mdsDateTimePickerCore.getSelectedDate,
                    selectedRangeDates: this.mdsDateTimePickerCore.getSelectedRangeDates
                };
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.showDatePickerButtonClicked = /**
         * @return {?}
         */
            function () {
                this.showDatePicker = !this.showDatePicker;
                if (this.showDatePicker) ;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.dateChangedHandler = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                if (!this.afterViewInit)
                    return;
                this.dateChanged.emit(date);
                if (date != null) {
                    this.myControl.setValue(date.formatString);
                    this.selectedDateTime = new Date(date.utcDateTime);
                    if (!this.showingDateTimePickerLocked)
                        this.showDatePicker = false;
                    this.propagateChange(this.getSelectedDateObject());
                }
            };
        /**
         * @param {?} rangeDate
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.rangeDateChangedHandler = /**
         * @param {?} rangeDate
         * @return {?}
         */
            function (rangeDate) {
                if (!this.afterViewInit)
                    return;
                this.myControl.setValue('');
                if (rangeDate == null) {
                    this.rangeDateChanged.emit(rangeDate);
                    this.selectedDateTimeRanges = [null, null];
                    this.propagateChange(this.getSelectedDateObject());
                    return;
                }
                if (rangeDate.startDate.formatString != '' && rangeDate.endDate.formatString != '')
                    this.myControl.setValue(rangeDate.startDate.formatString + " - " + rangeDate.endDate.formatString);
                this.rangeDateChanged.emit(rangeDate);
                if (rangeDate.startDate.formatString != '' && rangeDate.endDate.formatString != '' && !this.showingDateTimePickerLocked)
                    this.showDatePicker = false;
                this.selectedDateTimeRanges = [rangeDate.startDate.utcDateTime, rangeDate.endDate.utcDateTime];
                this.propagateChange(this.getSelectedDateObject());
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.dateTimeTextBoxOnFocusHandler = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                document.getElementsByTagName('html')[0].click();
                try {
                    if (this.selectedDateTime != null)
                        this.mdsDateTimePickerCore.setDateTimeByDate(this.selectedDateTime);
                }
                catch (e) {
                    this.clear();
                    console.error(e);
                }
                this.showDatePickerButtonClicked();
                this.textBoxFocus.emit(this.getEventObject(event));
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.dateTimeTextBoxOnBlurHandler = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var value = !this.myControl.value ? '' : this.myControl.value.trim();
                if (this.persianChar)
                    value = MdsDatetimePickerUtility.toPersianNumber(value);
                else
                    value = MdsDatetimePickerUtility.toEnglishString(value);
                /** @type {?} */
                var targetElement = ((event.target));
                if (!targetElement.hasAttribute('data-mds-persian-datetimepicker')) {
                    this.showingDateTimePickerLocked = true;
                    this.mdsDateTimePickerCore.setDateTimeByString(value);
                    this.showingDateTimePickerLocked = false;
                }
                this.textBoxBlur.emit(this.getEventObject(event));
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.dateTimeTextBoxOnKeyDownHandler = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.keyCode != 13) {
                    this.textBoxKeyDown.emit(this.getEventObject(event));
                    return;
                }
                /** @type {?} */
                var value = event.target.value.trim();
                if (!value)
                    this.mdsDateTimePickerCore.clearDateTimePicker();
                else
                    this.mdsDateTimePickerCore.setDateTimeByString(value);
                this.showDatePicker = false;
                this.textBoxKeyDown.emit(this.getEventObject(event));
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                if (this.inClearFunction || !this.mdsDateTimePickerCore)
                    return;
                this.inClearFunction = true;
                this.myControl.setValue('');
                this.selectedDateTime = null;
                this.selectedDateTimeRanges = [null, null];
                this.mdsDateTimePickerCore.clearDateTimePicker();
                this.inClearFunction = false;
            };
        /**
         * @param {?} dateTime
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.setDateTime = /**
         * @param {?} dateTime
         * @return {?}
         */
            function (dateTime) {
                try {
                    this.mdsDateTimePickerCore.setDateTimeByDate(dateTime);
                }
                catch (e) {
                    this.clear();
                    console.error(e);
                }
            };
        /**
         * @param {?} startDateTime
         * @param {?} endDateTime
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.setDateTimeRanges = /**
         * @param {?} startDateTime
         * @param {?} endDateTime
         * @return {?}
         */
            function (startDateTime, endDateTime) {
                try {
                    this.mdsDateTimePickerCore.setDateTimeRangesByDate(startDateTime, endDateTime);
                }
                catch (e) {
                    this.clear();
                    console.error(e);
                }
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.showDateTimePicker = /**
         * @return {?}
         */
            function () {
                this.showDatePicker = true;
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.hideDateTimePicker = /**
         * @return {?}
         */
            function () {
                this.showDatePicker = false;
            };
        /**
         * @param {?} valueModel
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.writeValue = /**
         * @param {?} valueModel
         * @return {?}
         */
            function (valueModel) {
                if (!valueModel || (!valueModel.selectedDate && !valueModel.selectedRangeDates)) {
                    this.clear();
                    return;
                }
                if (this.rangeSelector && valueModel.selectedRangeDates)
                    this.selectedDateTimeRanges = [valueModel.selectedRangeDates.startDate.utcDateTime, valueModel.selectedRangeDates.endDate.utcDateTime];
                else if (valueModel.selectedDate)
                    this.selectedDateTime = valueModel.selectedDate.utcDateTime;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.propagateChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                //this.disabled = isDisabled
                if (isDisabled)
                    this.myControl.disable();
                else
                    this.myControl.enable();
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MdsAngularPersianDateTimePickerComponent.prototype.valIMdsAngularDateTimePickerDate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.valIMdsAngularDateTimePickerDateFn(c.value);
            };
        MdsAngularPersianDateTimePickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mds-angular-persian-datetimepicker',
                        template: "<div *ngIf=\"inLine\" class=\"datepicker-box\">\r\n  <mds-datetime-picker-core *ngIf=\"inLine\" [initialValue]=\"initialValue\" [rangeSelector]=\"rangeSelector\" [persianChar]=\"persianChar\"\r\n    [isPersian]=\"isPersian\" [timePicker]=\"timePicker\" [format]=\"format\" [templateType]=\"templateType\" #mdsDateTimePickerCore\r\n    (dateChanged)=\"dateChangedHandler($event)\" (rangeDateChanged)=\"rangeDateChangedHandler($event)\">\r\n  </mds-datetime-picker-core>\r\n</div>\r\n\r\n<div *ngIf=\"!inLine && templateType == 2\" class=\"datepicker-container\">\r\n  <mat-form-field>\r\n    <input matInput type=\"text\" [placeholder]=\"placeHolder\" [formControl]=\"myControl\" (focus)=\"dateTimeTextBoxOnFocusHandler($event)\"\r\n      (blur)=\"dateTimeTextBoxOnBlurHandler($event)\" (keydown)=\"dateTimeTextBoxOnKeyDownHandler($event)\" data-mds-persian-datetimepicker>\r\n    <span matPrefix>\r\n      <span *ngIf=\"textBoxType == 1\" mat-button class=\"calendar-icon cursor-pointer\">\r\n        <span [innerHTML]=\"buttonIcon\"></span>\r\n      </span>\r\n    </span>\r\n  </mat-form-field>\r\n  <div class=\"datepicker\" [hidden]=\"!showDatePicker\">\r\n    <mds-datetime-picker-core #mdsDateTimePickerCore [initialValue]=\"initialValue\" [rangeSelector]=\"rangeSelector\" [persianChar]=\"persianChar\"\r\n      [isPersian]=\"isPersian\" [timePicker]=\"timePicker\" [format]=\"format\" [templateType]=\"2\" (dateChanged)=\"dateChangedHandler($event)\"\r\n      (rangeDateChanged)=\"rangeDateChangedHandler($event)\">\r\n    </mds-datetime-picker-core>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"!inLine && templateType == 1\" class=\"datepicker-container\">\r\n  <div class=\"input-group\" *ngIf=\"textBoxType == 1\">\r\n    <div class=\"input-group-prepend cursor-pointer calendar-icon\" (click)=\"showDatePickerButtonClicked()\">\r\n      <span class=\"input-group-text\" [innerHTML]=\"buttonIcon\"></span>\r\n    </div>\r\n    <input type=\"text\" class=\"form-control\" [placeholder]=\"placeHolder\" [formControl]=\"myControl\" (focus)=\"dateTimeTextBoxOnFocusHandler($event)\"\r\n      (blur)=\"dateTimeTextBoxOnBlurHandler($event)\" (keydown)=\"dateTimeTextBoxOnKeyDownHandler($event)\" data-mds-persian-datetimepicker>\r\n  </div>\r\n  <input type=\"text\" *ngIf=\"textBoxType == 2\" [placeholder]=\"placeHolder\" class=\"form-control\" [formControl]=\"myControl\" (focus)=\"dateTimeTextBoxOnFocusHandler($event)\"\r\n    (blur)=\"dateTimeTextBoxOnBlurHandler($event)\" (keydown)=\"dateTimeTextBoxOnKeyDownHandler($event)\" data-mds-persian-datetimepicker>\r\n  <div class=\"datepicker datepicker-bootstrap\" [hidden]=\"!showDatePicker\">\r\n    <mds-datetime-picker-core #mdsDateTimePickerCore [initialValue]=\"initialValue\" [rangeSelector]=\"rangeSelector\" [persianChar]=\"persianChar\"\r\n      [isPersian]=\"isPersian\" [timePicker]=\"timePicker\" [format]=\"format\" [templateType]=\"1\" (dateChanged)=\"dateChangedHandler($event)\"\r\n      (rangeDateChanged)=\"rangeDateChangedHandler($event)\">\r\n    </mds-datetime-picker-core>\r\n  </div>\r\n</div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return MdsAngularPersianDateTimePickerComponent; }),
                                multi: true
                            }
                        ],
                        styles: [".datepicker-container{position:relative;direction:ltr}.datepicker{background:#fff;position:absolute;z-index:999999;top:53px;left:0;min-width:300px;border:1px solid #f7f7f7;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.datepicker-bootstrap{top:34px}.hidden{display:none}.cursor-pointer{cursor:pointer}.datepicker-box{border:1px solid #ccc;position:relative}.mat-form-field{width:100%}.calendar-icon{font-size:18px}.calendar-icon[mat-button]{margin-right:6px;float:left}"]
                    }] }
        ];
        MdsAngularPersianDateTimePickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        MdsAngularPersianDateTimePickerComponent.propDecorators = {
            mdsDateTimePickerCore: [{ type: i0.ViewChild, args: ['mdsDateTimePickerCore',] }],
            templateType: [{ type: i0.Input }],
            textBoxType: [{ type: i0.Input }],
            initialValue: [{ type: i0.Input }],
            inLine: [{ type: i0.Input }],
            persianChar: [{ type: i0.Input }],
            rangeSelector: [{ type: i0.Input }],
            isPersian: [{ type: i0.Input }],
            timePicker: [{ type: i0.Input }],
            placeHolder: [{ type: i0.Input }],
            buttonIcon: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            dateChanged: [{ type: i0.Output }],
            rangeDateChanged: [{ type: i0.Output }],
            textBoxKeyDown: [{ type: i0.Output }],
            textBoxBlur: [{ type: i0.Output }],
            textBoxFocus: [{ type: i0.Output }],
            textBoxChange: [{ type: i0.Output }]
        };
        return MdsAngularPersianDateTimePickerComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MdsDatetimePickerResourcesService = (function () {
        function MdsDatetimePickerResourcesService() {
            this.persianResources = {
                'Year': 'سال',
                'Month': 'ماه',
                'Day': 'روز',
                'PreviousYear': 'سال قبل',
                'PreviousMonth': 'ماه قبل',
                'NextYear': 'سال بعد',
                'NextMonth': 'ماه بعد',
                'SelectMonth': 'انتخاب ماه',
                'Today': 'امروز',
                'Confirm': 'تایید',
                'Reject': 'رد',
                'Start': 'شروع',
                'End': 'پایان'
            };
            this.englishResources = {
                'Year': 'Year',
                'Month': 'Month',
                'Day': 'Day',
                'PreviousYear': 'Previous Year',
                'PreviousMonth': 'Previous Month',
                'NextYear': 'Next Year',
                'NextMonth': 'Next Month',
                'SelectMonth': 'Select Month',
                'Today': 'Today',
                'Confirm': 'Confirm',
                'Reject': 'Reject',
                'Start': 'Start',
                'End': 'End'
            };
        }
        MdsDatetimePickerResourcesService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ MdsDatetimePickerResourcesService.ngInjectableDef = i0.defineInjectable({ factory: function MdsDatetimePickerResourcesService_Factory() { return new MdsDatetimePickerResourcesService(); }, token: MdsDatetimePickerResourcesService, providedIn: "root" });
        return MdsDatetimePickerResourcesService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PersianDateTime$1 = mds_persian_datetime.Mds.PersianDateTime;
    var PersianDayOfWeek = mds_persian_datetime.Mds.PersianDayOfWeek;
    var GregorianDayOfWeek = mds_persian_datetime.Mds.GregorianDayOfWeek;
    var MdsAngularPersianDateTimePickerCoreComponent = (function () {
        function MdsAngularPersianDateTimePickerCoreComponent(resourcesService) {
            this.resourcesService = resourcesService;
            this.templateType = TemplateTypeEnum.bootstrap;
            this.initialValue = '';
            this._persianChar = true;
            this._isPersian = true;
            this.rangeSelector = false;
            this.timePicker = false;
            /**
              * فرمت پیش فرض 1393/09/14   13:49:40
              * yyyy: سال چهار رقمی
              * yy: سال دو رقمی
              * MMMM: نام فارسی ماه
              * MM: عدد دو رقمی ماه
              * M: عدد یک رقمی ماه
              * dddd: نام فارسی روز هفته
              * dd: عدد دو رقمی روز ماه
              * d: عدد یک رقمی روز ماه
              * HH: ساعت دو رقمی با فرمت 00 تا 24
              * H: ساعت یک رقمی با فرمت 0 تا 24
              * hh: ساعت دو رقمی با فرمت 00 تا 12
              * h: ساعت یک رقمی با فرمت 0 تا 12
              * mm: عدد دو رقمی دقیقه
              * m: عدد یک رقمی دقیقه
              * ss: ثانیه دو رقمی
              * s: ثانیه یک رقمی
              * fff: میلی ثانیه 3 رقمی
              * ff: میلی ثانیه 2 رقمی
              * f: میلی ثانیه یک رقمی
              * tt: ب.ظ یا ق.ظ
              * t: حرف اول از ب.ظ یا ق.ظ
              **/
            this.format = '';
            this.dateChanged = new i0.EventEmitter();
            this.rangeDateChanged = new i0.EventEmitter();
            this.daysAnimationStateName = 'visible';
            this.monthOrYearSelectorVisibilityStateName = 'hidden';
            this.monthSelectorVisibilityStateName = 'hidden';
            this.yearSelectorVisibilityStateName = 'hidden';
            // تاریخی که برای نمایش تقویم استفاده می شود
            this._dateTime = null;
            this._persianDateTime = null;
            // روز انتخاب شده
            this._selectedDateTime = null;
            this._selectedPersianDateTime = null;
            // روز شروع انتخاب شده در رنج سلکتور
            this._selectedStartDateTime = null;
            this._selectedPersianStartDateTime = null;
            // روز پایانی انتخاب شده در رنج سلکتور
            this._selectedEndDateTime = null;
            this._selectedPersianEndDateTime = null;
            this._resources = null;
            this._year = 0;
            this._yearString = '';
            this._month = 0;
            this._monthName = '';
            this._monthNames = [];
            this._hour = 0;
            this._hourString = '';
            this._minute = 0;
            this._minuteString = '';
            this._second = 0;
            this._secondString = '';
            this._weekdayNames = [];
            this._IMdsAngularDateTimePickerDate = null;
            this._selectedRangeDatesObject = null;
        }
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.rangeSelector)
                    this.timePicker = false;
                if (!this.isPersian)
                    this.persianChar = false;
                if (this.initialValue != '') {
                    if (this.rangeSelector) {
                        try {
                            if (this.isPersian) {
                                /** @type {?} */
                                var ranges = MdsDatetimePickerUtility.getPersianDateRanges(this.initialValue);
                                this.setSelectedRangePersianDateTimes(ranges);
                            }
                            else {
                                /** @type {?} */
                                var ranges = MdsDatetimePickerUtility.getDateRanges(this.initialValue);
                                this.setSelectedRangeDateTimes(ranges);
                            }
                            this.dateTime = this.selectedStartDateTime;
                        }
                        catch (e) {
                            console.error('value is in wrong format, when rangeSelector is true you should write value like "1396/03/01 - 1396/03/15" or "2017/3/9 - 2017/3/10"', e);
                            this.setSelectedRangeDateTimes(null);
                            this.dateTime = null;
                        }
                    }
                    else {
                        try {
                            if (this.isPersian)
                                this.dateTime = PersianDateTime$1.parse(this.initialValue).toDate();
                            else
                                this.dateTime = new Date(Date.parse(this.initialValue));
                        }
                        catch (e) {
                            console.error('value is in wrong format, you should write value like "1396/03/01  11:30:27" or "2017/09/03  11:30:00", you can remove time', e);
                            this.dateTime = null;
                        }
                    }
                }
                else {
                    this.dateTime = null;
                }
                this.updateYearsList();
                this.updateMonthDays();
                if (this.initialValue != '') {
                    if (this.rangeSelector)
                        this.fireRangeChangeEvent();
                    else
                        this.fireChangeEvent();
                }
            };
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "persianChar", {
            get: /**
             * @return {?}
             */ function () {
                return this._persianChar;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (this._persianChar == value)
                    return;
                this._persianChar = value;
                this._yearString = '';
                this.resetMonthDaysWithContent();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isPersian", {
            get: /**
             * @return {?}
             */ function () {
                return this._isPersian;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._isPersian = value;
                this._monthName = '';
                this._monthNames = [];
                this._weekdayNames = [];
                this._resources = null;
                this._yearString = '';
                if (this.dateTime != null) {
                    this.updateYearsList();
                    this.updateMonthDays();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} dateString
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.splitStartEndDateString = /**
         * @param {?} dateString
         * @return {?}
         */
            function (dateString) {
                return dateString.split(' - ');
            };
        /**
         * @param {?} dateTimes
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.setSelectedRangeDateTimes = /**
         * @param {?} dateTimes
         * @return {?}
         */
            function (dateTimes) {
                dateTimes = dateTimes == null || dateTimes.length < 2 ? [null, null] : dateTimes;
                this.selectedStartDateTime = dateTimes[0];
                this.selectedEndDateTime = dateTimes[1];
            };
        /**
         * @param {?} persianDateTimes
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.setSelectedRangePersianDateTimes = /**
         * @param {?} persianDateTimes
         * @return {?}
         */
            function (persianDateTimes) {
                /** @type {?} */
                var ranges = [
                    persianDateTimes[0] == null ? null : persianDateTimes[0].toDate(),
                    persianDateTimes[1] == null ? null : persianDateTimes[1].toDate()
                ];
                this.setSelectedRangeDateTimes(ranges);
            };
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "persianStartDayOfMonth", {
            get: /**
             * @return {?}
             */ function () {
                return this.persianDateTime.startDayOfMonthDayOfWeek;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "gregorianStartDayOfMonth", {
            get: /**
             * @return {?}
             */ function () {
                return ((new Date(this.dateTime.getFullYear(), this.dateTime.getMonth(), 1).getDay()));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} dateTime
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.clearTime = /**
         * @param {?} dateTime
         * @return {?}
         */
            function (dateTime) {
                if (dateTime == null)
                    return;
                dateTime.setHours(0, 0, 0, 0);
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.getDateTimeFormat = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var format = this.format;
                if (format.trim() == '') {
                    format = 'yyyy/MM/dd';
                    if (this.timePicker && !this.rangeSelector)
                        format += '   hh:mm:ss';
                }
                else if (this.rangeSelector || !this.timePicker)
                    format = format.replace(/t*|f*|s*|m*|h*|H*/, '');
                return format;
            };
        /**
         * @param {?} dateTime
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.setDateTimeByDate = /**
         * @param {?} dateTime
         * @return {?}
         */
            function (dateTime) {
                this.dateTime = this.selectedDateTime = dateTime;
                this.selectedStartDateTime = !dateTime ? null : new Date(dateTime);
            };
        /**
         * @param {?} startDateTime
         * @param {?} endDateTime
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.setDateTimeRangesByDate = /**
         * @param {?} startDateTime
         * @param {?} endDateTime
         * @return {?}
         */
            function (startDateTime, endDateTime) {
                this.dateTime = this.selectedDateTime = startDateTime;
                this.selectedStartDateTime = startDateTime == null ? null : new Date(startDateTime);
                this.selectedEndDateTime = endDateTime == null ? null : new Date(endDateTime);
            };
        /**
         * @param {?} dateTimeString
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.setDateTimeByString = /**
         * @param {?} dateTimeString
         * @return {?}
         */
            function (dateTimeString) {
                try {
                    if (dateTimeString == '') {
                        this.clearDateTimePicker();
                        return;
                    }
                    if (this.isPersian) {
                        if (this.rangeSelector) {
                            /** @type {?} */
                            var startAndEndDateArray = this.splitStartEndDateString(dateTimeString);
                            this.dateTime = this.selectedStartDateTime = PersianDateTime$1.parse(startAndEndDateArray[0]).toDate();
                            this.selectedEndDateTime = PersianDateTime$1.parse(startAndEndDateArray[1]).toDate();
                            if (this.selectedStartDateTime > this.selectedEndDateTime)
                                throw new Error('Start date must be less than end date');
                        }
                        else
                            this.dateTime = this.selectedDateTime = PersianDateTime$1.parse(dateTimeString).toDate();
                    }
                    else {
                        if (this.rangeSelector) {
                            /** @type {?} */
                            var startAndEndDateArray = this.splitStartEndDateString(dateTimeString);
                            this.dateTime = this.selectedStartDateTime = new Date(Date.parse(startAndEndDateArray[0]));
                            this.selectedEndDateTime = new Date(Date.parse(startAndEndDateArray[1]));
                            if (this.selectedStartDateTime > this.selectedEndDateTime)
                                throw new Error('Start date must be less than end date');
                        }
                        else
                            this.dateTime = this.selectedDateTime = new Date(Date.parse(dateTimeString));
                    }
                    if (this.rangeSelector)
                        this.fireRangeChangeEvent();
                    else
                        this.fireChangeEvent();
                    this.updateMonthDays();
                }
                catch (e) {
                    this.clearDateTimePicker();
                    throw new Error(e);
                }
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.clearDateTimePicker = /**
         * @return {?}
         */
            function () {
                this.dateTime = null;
                this.selectedDateTime = this.selectedStartDateTime = this.selectedEndDateTime = null;
                this.resetToFalseRangeParametersInMonthDays();
                if (this.rangeSelector)
                    this.fireRangeChangeEvent();
                else
                    this.fireChangeEvent();
                this.updateMonthDays();
            };
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedDate", {
            get: /**
             * @return {?}
             */ function () {
                return this.getSelectedDateObject;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedRangeDates", {
            get: /**
             * @return {?}
             */ function () {
                return this.getSelectedRangeDatesObject;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "dateTime", {
            get: /**
             * @return {?}
             */ function () {
                return this._dateTime;
            },
            set: /**
             * @param {?} dateTime
             * @return {?}
             */ function (dateTime) {
                this._dateTime = dateTime == null ? new Date() : new Date(dateTime);
                this._persianDateTime = null;
                this._year = this._month = 0;
                this._yearString = this._monthName = '';
                this._hour = this._minute = this._second = 0;
                this._hourString = this._minuteString = this._secondString = '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "persianDateTime", {
            get: /**
             * @return {?}
             */ function () {
                if (this.dateTime == null)
                    return null;
                if (this._persianDateTime != null)
                    return this._persianDateTime;
                this._persianDateTime = new PersianDateTime$1(this.dateTime);
                return this._persianDateTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedDateTime", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedDateTime;
            },
            set: /**
             * @param {?} dateTime
             * @return {?}
             */ function (dateTime) {
                this._selectedDateTime = dateTime == null ? null : new Date(dateTime);
                this._IMdsAngularDateTimePickerDate = null;
                this._selectedPersianDateTime = null;
                if (this.rangeSelector || !this.timePicker)
                    this.clearTime(dateTime);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedPersianDateTime", {
            get: /**
             * @return {?}
             */ function () {
                if (this._selectedPersianDateTime != null)
                    return this._selectedPersianDateTime;
                this._selectedPersianDateTime = new PersianDateTime$1(this.selectedDateTime);
                return this._selectedPersianDateTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedStartDateTime", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedStartDateTime;
            },
            set: /**
             * @param {?} dateTime
             * @return {?}
             */ function (dateTime) {
                this._selectedStartDateTime = dateTime == null ? null : new Date(dateTime);
                this._selectedRangeDatesObject = null;
                this._selectedPersianStartDateTime = null;
                this.clearTime(dateTime);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedPersianStartDateTime", {
            get: /**
             * @return {?}
             */ function () {
                if (this._selectedPersianStartDateTime != null)
                    return this._selectedPersianStartDateTime;
                this._selectedPersianStartDateTime = new PersianDateTime$1(this.selectedStartDateTime);
                return this._selectedPersianStartDateTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedEndDateTime", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectedEndDateTime;
            },
            set: /**
             * @param {?} dateTime
             * @return {?}
             */ function (dateTime) {
                this._selectedEndDateTime = dateTime == null ? null : new Date(dateTime);
                this._selectedRangeDatesObject = null;
                this._selectedPersianEndDateTime = null;
                this.clearTime(dateTime);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedPersianEndDateTime", {
            get: /**
             * @return {?}
             */ function () {
                if (this._selectedPersianEndDateTime != null)
                    return this._selectedPersianEndDateTime;
                this._selectedPersianEndDateTime = new PersianDateTime$1(this.selectedEndDateTime);
                return this._selectedPersianEndDateTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "resources", {
            get: /**
             * @return {?}
             */ function () {
                if (this._resources != null)
                    return this._resources;
                if (this.isPersian)
                    this._resources = this.resourcesService.persianResources;
                else
                    this._resources = this.resourcesService.englishResources;
                return this._resources;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "year", {
            get: /**
             * @return {?}
             */ function () {
                if (this._year > 0)
                    return this._year;
                this._year = this.isPersian
                    ? this.persianDateTime.year
                    : this.dateTime.getFullYear();
                return this._year;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "yearString", {
            get: /**
             * @return {?}
             */ function () {
                if (this._yearString != '')
                    return this._yearString;
                this._yearString = this.persianChar
                    ? MdsDatetimePickerUtility.toPersianNumber(this.year.toString())
                    : this.dateTime.getFullYear().toString();
                return this._yearString;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "month", {
            get: /**
             * @return {?}
             */ function () {
                if (this._month > 0)
                    return this._month;
                this._month = this.isPersian
                    ? PersianDateTime$1.getPersianMonthIndex(this.persianDateTime.monthName)
                    : this.dateTime.getMonth();
                return this._month;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "monthName", {
            get: /**
             * @return {?}
             */ function () {
                if (this._monthName != '')
                    return this._monthName;
                this._monthName = this.isPersian
                    ? this.persianDateTime.monthName
                    : PersianDateTime$1.getGregorianMonthNames[this.month];
                return this._monthName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "monthNames", {
            get: /**
             * @return {?}
             */ function () {
                if (this._monthNames != null && this._monthNames.length > 0)
                    return this._monthNames;
                if (this.isPersian) {
                    /** @type {?} */
                    var allPersianMonths = PersianDateTime$1.getPersianMonthNames;
                    this._monthNames = [
                        allPersianMonths[2], allPersianMonths[1], allPersianMonths[0],
                        allPersianMonths[5], allPersianMonths[4], allPersianMonths[3],
                        allPersianMonths[8], allPersianMonths[7], allPersianMonths[6],
                        allPersianMonths[11], allPersianMonths[10], allPersianMonths[9]
                    ];
                }
                else {
                    this._monthNames = PersianDateTime$1.getGregorianMonthNames;
                }
                return this._monthNames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "hour", {
            get: /**
             * @return {?}
             */ function () {
                if (this._hour > 0)
                    return this._hour;
                this._hour = this.dateTime.getHours();
                return this._hour;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "hourString", {
            get: /**
             * @return {?}
             */ function () {
                if (this._hourString != '')
                    return this._hourString;
                this._hourString = this.hour.toString();
                if (this.persianChar)
                    this._hourString = MdsDatetimePickerUtility.toPersianNumber(this._hourString);
                return this._hourString;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "minute", {
            get: /**
             * @return {?}
             */ function () {
                if (this._minute > 0)
                    return this._minute;
                this._minute = this.dateTime.getMinutes();
                return this._minute;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "minuteString", {
            get: /**
             * @return {?}
             */ function () {
                if (this._minuteString != '')
                    return this._minuteString;
                this._minuteString = this.minute.toString();
                if (this.persianChar)
                    this._minuteString = MdsDatetimePickerUtility.toPersianNumber(this._minuteString);
                return this._minuteString;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "second", {
            get: /**
             * @return {?}
             */ function () {
                if (this._second > 0)
                    return this._second;
                this._second = this.dateTime.getSeconds();
                return this._second;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "secondString", {
            get: /**
             * @return {?}
             */ function () {
                if (this._secondString != '')
                    return this._secondString;
                this._secondString = this.second.toString();
                if (this.persianChar)
                    this._secondString = MdsDatetimePickerUtility.toPersianNumber(this._secondString);
                return this._secondString;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "weekdayNames", {
            get: /**
             * @return {?}
             */ function () {
                if (this._weekdayNames != null && this._weekdayNames.length > 0)
                    return this._weekdayNames;
                if (this.isPersian) {
                    // حروف اول نام های روز هفته شمسی
                    /** @type {?} */
                    var persianWeekDayNames = PersianDateTime$1.getPersianWeekdayNames;
                    this._weekdayNames = [
                        persianWeekDayNames[6][0], persianWeekDayNames[5][0], persianWeekDayNames[4][0],
                        persianWeekDayNames[3][0], persianWeekDayNames[2][0], persianWeekDayNames[1][0],
                        persianWeekDayNames[0][0]
                    ];
                }
                else {
                    /** @type {?} */
                    var gregorianWeekDayNames = PersianDateTime$1.getGregorianWeekdayNames;
                    this._weekdayNames = [
                        gregorianWeekDayNames[1][0] + gregorianWeekDayNames[1][1],
                        gregorianWeekDayNames[2][0] + gregorianWeekDayNames[2][1],
                        gregorianWeekDayNames[3][0] + gregorianWeekDayNames[3][1],
                        gregorianWeekDayNames[4][0] + gregorianWeekDayNames[4][1],
                        gregorianWeekDayNames[5][0] + gregorianWeekDayNames[5][1],
                        gregorianWeekDayNames[6][0] + gregorianWeekDayNames[6][1],
                        gregorianWeekDayNames[0][0] + gregorianWeekDayNames[0][1]
                    ];
                }
                return this._weekdayNames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedDateObject", {
            get: /**
             * @return {?}
             */ function () {
                if (this.selectedDateTime == null)
                    return null;
                if (this._IMdsAngularDateTimePickerDate != null)
                    return this._IMdsAngularDateTimePickerDate;
                /** @type {?} */
                var format = this.getDateTimeFormat();
                if (this.isPersian) {
                    this._IMdsAngularDateTimePickerDate = {
                        year: this.selectedPersianDateTime.year,
                        month: this.selectedPersianDateTime.month,
                        day: this.selectedPersianDateTime.day,
                        hour: this.selectedPersianDateTime.hour,
                        minute: this.selectedPersianDateTime.minute,
                        second: this.selectedPersianDateTime.second,
                        millisecond: this.selectedPersianDateTime.millisecond,
                        formatString: this.selectedPersianDateTime.toString(format),
                        utcDateTime: this.selectedDateTime
                    };
                }
                else {
                    this._IMdsAngularDateTimePickerDate = {
                        year: this.selectedDateTime.getFullYear(),
                        month: this.selectedDateTime.getMonth(),
                        day: this.selectedDateTime.getDate(),
                        hour: this.selectedDateTime.getHours(),
                        minute: this.selectedDateTime.getMinutes(),
                        second: this.selectedDateTime.getSeconds(),
                        millisecond: this.selectedDateTime.getMilliseconds(),
                        formatString: MdsDatetimePickerUtility.dateTimeToString(this.selectedDateTime, format),
                        utcDateTime: this.selectedDateTime
                    };
                }
                if (this.persianChar)
                    this._IMdsAngularDateTimePickerDate.formatString = MdsDatetimePickerUtility.toPersianNumber(this._IMdsAngularDateTimePickerDate.formatString);
                else
                    this._IMdsAngularDateTimePickerDate.formatString = MdsDatetimePickerUtility.toEnglishString(this._IMdsAngularDateTimePickerDate.formatString);
                return this._IMdsAngularDateTimePickerDate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedDay", {
            get: /**
             * @return {?}
             */ function () {
                if (this.getSelectedDateObject == null || this.rangeSelector)
                    return 0;
                return this.getSelectedDateObject.day;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedRangeDatesObject", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.rangeSelector || this.selectedStartDateTime == null && this.selectedEndDateTime == null)
                    return null;
                if (this._selectedRangeDatesObject != null)
                    return this._selectedRangeDatesObject;
                /** @type {?} */
                var format = this.getDateTimeFormat();
                /** @type {?} */
                var startDate;
                /** @type {?} */
                var endDate;
                if (this.isPersian) {
                    startDate = {
                        year: this.selectedStartDateTime == null ? 0 : this.selectedPersianStartDateTime.year,
                        month: this.selectedStartDateTime == null ? 0 : this.selectedPersianStartDateTime.month,
                        day: this.selectedStartDateTime == null ? 0 : this.selectedPersianStartDateTime.day,
                        hour: 0,
                        minute: 0,
                        second: 0,
                        millisecond: 0,
                        formatString: this.selectedStartDateTime == null ? '' : this.selectedPersianStartDateTime.toString(format),
                        utcDateTime: this.selectedStartDateTime
                    };
                    endDate = {
                        year: this.selectedPersianEndDateTime == null ? 0 : this.selectedPersianEndDateTime.year,
                        month: this.selectedPersianEndDateTime == null ? 0 : this.selectedPersianEndDateTime.month,
                        day: this.selectedPersianEndDateTime == null ? 0 : this.selectedPersianEndDateTime.day,
                        hour: 0,
                        minute: 0,
                        second: 0,
                        millisecond: 0,
                        formatString: this.selectedPersianEndDateTime == null ? '' : this.selectedPersianEndDateTime.toString(format),
                        utcDateTime: this.selectedEndDateTime
                    };
                }
                else {
                    startDate = {
                        year: this.selectedStartDateTime == null ? 0 : this.selectedStartDateTime.getFullYear(),
                        month: this.selectedStartDateTime == null ? 0 : this.selectedStartDateTime.getMonth(),
                        day: this.selectedStartDateTime == null ? 0 : this.selectedStartDateTime.getDate(),
                        hour: 0,
                        minute: 0,
                        second: 0,
                        millisecond: 0,
                        formatString: this.selectedStartDateTime == null ? '' : MdsDatetimePickerUtility.dateTimeToString(this.selectedStartDateTime, format),
                        utcDateTime: this.selectedStartDateTime == null ? null : this.selectedStartDateTime
                    };
                    endDate = {
                        year: this.selectedEndDateTime == null ? 0 : this.selectedEndDateTime.getFullYear(),
                        month: this.selectedEndDateTime == null ? 0 : this.selectedEndDateTime.getMonth(),
                        day: this.selectedEndDateTime == null ? 0 : this.selectedEndDateTime.getDate(),
                        hour: 0,
                        minute: 0,
                        second: 0,
                        millisecond: 0,
                        formatString: this.selectedEndDateTime == null ? '' : MdsDatetimePickerUtility.dateTimeToString(this.selectedEndDateTime, format),
                        utcDateTime: this.selectedEndDateTime == null ? null : this.selectedEndDateTime
                    };
                }
                this._selectedRangeDatesObject = {
                    startDate: startDate,
                    endDate: endDate
                };
                return this._selectedRangeDatesObject;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isRejectButtonDisable", {
            get: /**
             * @return {?}
             */ function () {
                return this.selectedStartDateTime == null && this.selectedEndDateTime == null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isConfirmButtonDisable", {
            get: /**
             * @return {?}
             */ function () {
                return this.selectedStartDateTime == null || this.selectedEndDateTime == null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.updateYearsList = /**
         * @return {?}
         */
            function () {
                this.yearsToSelect = [];
                /** @type {?} */
                var selectedYear = this.year;
                for (var i = selectedYear - 37; i <= selectedYear + 37; i++) {
                    if (this.persianChar)
                        this.yearsToSelect.push(MdsDatetimePickerUtility.toPersianNumber(i.toString()));
                    else
                        this.yearsToSelect.push(i.toString());
                }
            };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} day
         * @param {?} disabled
         * @param {?} holiDay
         * @param {?} isToday
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.getDayObject = /**
         * @param {?} year
         * @param {?} month
         * @param {?} day
         * @param {?} disabled
         * @param {?} holiDay
         * @param {?} isToday
         * @return {?}
         */
            function (year, month, day, disabled, holiDay, isToday) {
                /** @type {?} */
                var isWithinDateRange = false;
                /** @type {?} */
                var isStartOrEndOfRange = false;
                if (this.rangeSelector && this.selectedStartDateTime != null) {
                    /** @type {?} */
                    var dateTime = this.isPersian
                        ? PersianDateTime$1.fromPersianDate(year, month, day).toDate()
                        : new Date(year, month, day);
                    isWithinDateRange = dateTime >= this.selectedStartDateTime;
                    if (this.selectedEndDateTime != null)
                        isWithinDateRange = isWithinDateRange && dateTime <= this.selectedEndDateTime;
                    isStartOrEndOfRange =
                        (this.selectedStartDateTime != null && dateTime.getTime() == this.selectedStartDateTime.getTime()) ||
                            (this.selectedEndDateTime != null && dateTime.getTime() == this.selectedEndDateTime.getTime());
                }
                return {
                    year: year,
                    month: month,
                    day: day,
                    dayString: this.persianChar ? MdsDatetimePickerUtility.toPersianNumber(day.toString()) : day.toString(),
                    disable: disabled,
                    holiDay: holiDay,
                    today: isToday,
                    isWithinRange: isWithinDateRange,
                    isStartOrEndOfRange: isStartOrEndOfRange
                };
            };
        Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isRangeSelectorReady", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.rangeSelector)
                    return false;
                if (this.selectedStartDateTime == null)
                    return false; // هنوز روز شروع انتخاب نشده است
                if (this.selectedStartDateTime != null && this.selectedEndDateTime != null)
                    return false; // رنج تاریخ انتخاب شده بود
                return true;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.updateMonthDays = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var days = [];
                /** @type {?} */
                var counter = 0;
                /** @type {?} */
                var year = 0;
                /** @type {?} */
                var month = 0;
                if (this.isPersian) {
                    /** @type {?} */
                    var persianDateTimeNow = PersianDateTime$1.now;
                    /** @type {?} */
                    var today = persianDateTimeNow.day;
                    /** @type {?} */
                    var isYearAndMonthInCurrentMonth = persianDateTimeNow.year == this.persianDateTime.year && persianDateTimeNow.month == this.persianDateTime.month;
                    // روزهای ماه قبل
                    if (this.persianStartDayOfMonth != PersianDayOfWeek.Saturday) {
                        /** @type {?} */
                        var previousPersianMonth = this.persianDateTime.addMonths(-1);
                        year = previousPersianMonth.year;
                        month = previousPersianMonth.month;
                        for (var i = previousPersianMonth.getMonthDays - this.persianStartDayOfMonth + 1; i <= previousPersianMonth.getMonthDays; i++) {
                            counter++;
                            days.push(this.getDayObject(year, month, i, true, false, false));
                        }
                    }
                    // روزهای ماه جاری
                    year = this.persianDateTime.year;
                    month = this.persianDateTime.month;
                    for (var i = 1; i <= this.persianDateTime.getMonthDays; i++) {
                        counter++;
                        days.push(this.getDayObject(year, month, i, false, false, isYearAndMonthInCurrentMonth && i == today));
                    }
                    // روزهای ماه بعد
                    /** @type {?} */
                    var nextMonthPersianDateTime = this.persianDateTime.addMonths(1);
                    year = nextMonthPersianDateTime.year;
                    month = nextMonthPersianDateTime.month;
                    for (var i = 1; counter <= (6 * 7) - 1; i++) {
                        counter++;
                        days.push(this.getDayObject(year, month, i, true, false, false));
                    }
                    // درست کردن راست به چپ بودن تقویم
                    /** @type {?} */
                    var temp = days.slice(0);
                    for (var row = 0; row < 6; row++) {
                        for (var column = 0; column < 7; column++) {
                            /** @type {?} */
                            var index1 = row * 7 + column;
                            /** @type {?} */
                            var index2 = Math.abs((row + 1) * 7 - (column + 1));
                            days[index1] = temp[index2];
                            if (column == 0)
                                days[index1].holiDay = true;
                        }
                    }
                }
                else {
                    /** @type {?} */
                    var dateTimeNow = new Date();
                    /** @type {?} */
                    var today = dateTimeNow.getDate();
                    /** @type {?} */
                    var isYearAndMonthInCurrentMonth = dateTimeNow.getMonth() == this.dateTime.getMonth() && dateTimeNow.getFullYear() == this.dateTime.getFullYear();
                    // روزهای ماه قبل
                    if (this.gregorianStartDayOfMonth != GregorianDayOfWeek.Saturday) {
                        /** @type {?} */
                        var dateTimeClone = new Date(this.dateTime);
                        dateTimeClone.setMonth(this.dateTime.getMonth());
                        year = dateTimeClone.getFullYear();
                        month = dateTimeClone.getMonth();
                        /** @type {?} */
                        var previousMonthDays = new Date(dateTimeClone.getFullYear(), dateTimeClone.getMonth(), 0).getDate();
                        for (var i = previousMonthDays - this.gregorianStartDayOfMonth + 1; i <= previousMonthDays; i++) {
                            counter++;
                            days.push(this.getDayObject(year, month - 1, i, true, false, false));
                        }
                    }
                    // روزهای ماه جاری
                    year = this.dateTime.getFullYear();
                    month = this.dateTime.getMonth();
                    /** @type {?} */
                    var currentMonthDays = new Date(year, month, 0).getDate();
                    for (var i = 1; i <= currentMonthDays; i++) {
                        counter++;
                        days.push(this.getDayObject(year, month, i, false, false, isYearAndMonthInCurrentMonth && i == today));
                    }
                    // روزهای ماه بعد
                    /** @type {?} */
                    var nextMonthDateTime = new Date(year, month + 1, 1);
                    year = nextMonthDateTime.getFullYear();
                    month = nextMonthDateTime.getMonth();
                    for (var i = 1; counter <= (6 * 7) - 1; i++) {
                        counter++;
                        days.push(this.getDayObject(year, month, i, true, false, false));
                    }
                    // تعطیل کردن روزهای جمعه
                    for (var row = 0; row < 6; row++) {
                        for (var column = 0; column < 7; column++) {
                            /** @type {?} */
                            var index1 = row * 7 + column;
                            if (column == 0)
                                days[index1].holiDay = true;
                        }
                    }
                }
                this.daysInMonth = days;
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.fireChangeEvent = /**
         * @return {?}
         */
            function () {
                this.dateChanged.emit(this.getSelectedDateObject);
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.fireRangeChangeEvent = /**
         * @return {?}
         */
            function () {
                this.rangeDateChanged.emit(this.getSelectedRangeDatesObject);
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.resetToFalseRangeParametersInMonthDays = /**
         * @return {?}
         */
            function () {
                try {
                    for (var _a = __values(this.daysInMonth), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var IMdsAngularDateTimePickerDay = _b.value;
                        IMdsAngularDateTimePickerDay.isWithinRange = false;
                        IMdsAngularDateTimePickerDay.isStartOrEndOfRange = false;
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var e_1, _c;
            };
        /**
         * ریست کردن تمامی اطلاعات روزهای ماه
         */
        /**
         * ریست کردن تمامی اطلاعات روزهای ماه
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.resetMonthDaysWithContent = /**
         * ریست کردن تمامی اطلاعات روزهای ماه
         * @return {?}
         */
            function () {
                if (this.daysInMonth == undefined)
                    return;
                try {
                    for (var _a = __values(this.daysInMonth), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var IMdsAngularDateTimePickerDay = _b.value;
                        IMdsAngularDateTimePickerDay.isWithinRange = false;
                        IMdsAngularDateTimePickerDay.isStartOrEndOfRange = false;
                        IMdsAngularDateTimePickerDay.dayString = this.persianChar
                            ? MdsDatetimePickerUtility.toPersianNumber(IMdsAngularDateTimePickerDay.day.toString())
                            : IMdsAngularDateTimePickerDay.day.toString();
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                var e_2, _c;
            };
        /**
         * مخفی کردن بلاک های انتخاب ماه و سال
         */
        /**
         * مخفی کردن بلاک های انتخاب ماه و سال
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.hideSelecMonthAndYearBlock = /**
         * مخفی کردن بلاک های انتخاب ماه و سال
         * @return {?}
         */
            function () {
                this.monthOrYearSelectorVisibilityStateName = 'hidden';
                this.monthSelectorVisibilityStateName = 'hidden';
                this.yearSelectorVisibilityStateName = 'hidden';
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.resetIncompleteRanges = /**
         * @return {?}
         */
            function () {
                if (this.selectedStartDateTime == null || this.selectedEndDateTime == null) {
                    this.selectedStartDateTime = this.selectedEndDateTime = null;
                    this._selectedPersianStartDateTime = this._selectedPersianEndDateTime = null;
                    this.resetToFalseRangeParametersInMonthDays();
                }
            };
        /**
         * کلیک روی دکمه نام ماه در بالای پیکر برای انتخاب ماه
         */
        /**
         * کلیک روی دکمه نام ماه در بالای پیکر برای انتخاب ماه
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.monthButtonOnClick = /**
         * کلیک روی دکمه نام ماه در بالای پیکر برای انتخاب ماه
         * @return {?}
         */
            function () {
                this.monthOrYearSelectorVisibilityStateName = 'visible';
                this.monthSelectorVisibilityStateName = 'visible';
            };
        /**
         * کلیک روی دکمه سال در بالای پیکر برای انتخاب سال
         */
        /**
         * کلیک روی دکمه سال در بالای پیکر برای انتخاب سال
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.selectYearButtonOnClick = /**
         * کلیک روی دکمه سال در بالای پیکر برای انتخاب سال
         * @return {?}
         */
            function () {
                this.monthOrYearSelectorVisibilityStateName = 'visible';
                this.yearSelectorVisibilityStateName = 'visible';
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.monthsBlockVisibilityAnimationDone = /**
         * @return {?}
         */
            function () {
                this.updateMonthDays();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.yearsBlockVisibilityAnimationDone = /**
         * @return {?}
         */
            function () {
                this.updateYearsList();
                this.updateMonthDays();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.nextYearButtonOnClick = /**
         * @return {?}
         */
            function () {
                if (this.isPersian)
                    this.dateTime = this.persianDateTime.addYears(1).toDate();
                else
                    this.dateTime = new Date(this.dateTime.setFullYear(this.dateTime.getFullYear() + 1));
                this.updateMonthDays();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.nextMonthButtonOnClick = /**
         * @return {?}
         */
            function () {
                if (this.isPersian)
                    this.dateTime = this.persianDateTime.addMonths(1).toDate();
                else
                    this.dateTime = new Date(this.dateTime.setMonth(this.dateTime.getMonth() + 1));
                this.updateMonthDays();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.previousMonthButtonOnClick = /**
         * @return {?}
         */
            function () {
                if (this.isPersian)
                    this.dateTime = this.persianDateTime.addMonths(-1).toDate();
                else
                    this.dateTime = new Date(this.dateTime.setMonth(this.dateTime.getMonth() - 1));
                this.updateMonthDays();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.previousYearButtonOnClick = /**
         * @return {?}
         */
            function () {
                if (this.isPersian)
                    this.dateTime = this.persianDateTime.addYears(-1).toDate();
                else
                    this.dateTime = new Date(this.dateTime.setFullYear(this.dateTime.getFullYear() - 1));
                this.updateMonthDays();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.hourUpButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.dateTime = new Date(this.dateTime.setHours(this.dateTime.getHours() + 1));
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.hourDownButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.dateTime = new Date(this.dateTime.setHours(this.dateTime.getHours() - 1));
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.minuteUpButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.dateTime = new Date(this.dateTime.setMinutes(this.dateTime.getMinutes() + 1));
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.minuteDownButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.dateTime = new Date(this.dateTime.setMinutes(this.dateTime.getMinutes() - 1));
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.secondUpButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.dateTime = new Date(this.dateTime.setSeconds(this.dateTime.getSeconds() + 1));
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.secondDownButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.dateTime = new Date(this.dateTime.setSeconds(this.dateTime.getSeconds() - 1));
            };
        /**
         * انتخاب ماه از روی لیست ماه ها
         */
        /**
         * انتخاب ماه از روی لیست ماه ها
         * @param {?} selectedMonthName
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.monthOnClick = /**
         * انتخاب ماه از روی لیست ماه ها
         * @param {?} selectedMonthName
         * @return {?}
         */
            function (selectedMonthName) {
                /** @type {?} */
                var monthIndex = this.isPersian
                    ? PersianDateTime$1.getPersianMonthIndex(selectedMonthName)
                    : PersianDateTime$1.getGregorianMonthNameIndex(selectedMonthName);
                if (this.isPersian)
                    this.dateTime = this.persianDateTime.setPersianMonth(monthIndex + 1).toDate();
                else {
                    /** @type {?} */
                    var dateTimeClone = new Date(this.dateTime);
                    dateTimeClone.setMonth(monthIndex);
                    this.dateTime = new Date(dateTimeClone);
                }
                this.hideSelecMonthAndYearBlock();
            };
        /**
         * انتخاب سال از روی لیست سال ها
         */
        /**
         * انتخاب سال از روی لیست سال ها
         * @param {?} selectedYear
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.yearOnClick = /**
         * انتخاب سال از روی لیست سال ها
         * @param {?} selectedYear
         * @return {?}
         */
            function (selectedYear) {
                /** @type {?} */
                var year = this.isPersian ? Number(MdsDatetimePickerUtility.toEnglishNumber(selectedYear)) : Number(selectedYear);
                if (this.isPersian)
                    this.dateTime = this.persianDateTime.setPersianYear(year).toDate();
                else {
                    /** @type {?} */
                    var dateTimeClone = new Date(this.dateTime);
                    dateTimeClone.setFullYear(year);
                    this.dateTime = new Date(dateTimeClone);
                }
                this.hideSelecMonthAndYearBlock();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.todayButtonOnClick = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var dateTimeNow = new Date();
                if (this.dateTime.getFullYear() != dateTimeNow.getFullYear() || this.dateTime.getMonth() != dateTimeNow.getMonth()) {
                    this.dateTime = dateTimeNow;
                    this.updateMonthDays();
                }
                else
                    this.dateTime = dateTimeNow;
                this.selectedDateTime = dateTimeNow;
                if (!this.rangeSelector)
                    this.fireChangeEvent();
            };
        /**
         * @param {?} dayObject
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.dayButtonOnClick = /**
         * @param {?} dayObject
         * @return {?}
         */
            function (dayObject) {
                // روی روزهای ماه های قبل یا بعد کلیک شده است
                if (dayObject.disable) {
                    if (this.isPersian)
                        this.dateTime = PersianDateTime$1.fromPersianDate(dayObject.year, dayObject.month, dayObject.day).toDate();
                    else {
                        /** @type {?} */
                        var dateTimeClone = new Date(this.dateTime);
                        dateTimeClone.setDate(dayObject.day);
                        dateTimeClone.setMonth(dayObject.month);
                        dateTimeClone.setFullYear(dayObject.year);
                        this.dateTime = dateTimeClone;
                    }
                    this.updateMonthDays();
                    return;
                }
                // نال کردن تاریخ های شروع و پایان برای انتخاب مجدد رنج تاریخ 
                // در صورتی که رنج گرفته شده بود
                if (this.rangeSelector && this.selectedStartDateTime != null && this.selectedEndDateTime != null) {
                    this.selectedStartDateTime = null;
                    this.selectedEndDateTime = null;
                    this.resetToFalseRangeParametersInMonthDays();
                }
                // \\
                // روز انتخاب شده
                this.selectedDateTime = this.isPersian
                    ? PersianDateTime$1.fromPersianDateTime(dayObject.year, dayObject.month, dayObject.day, this.hour, this.minute, this.second, 0).toDate()
                    : new Date(dayObject.year, dayObject.month, dayObject.day, this.hour, this.minute, this.second);
                if (this.rangeSelector) {
                    if (this.selectedStartDateTime == null || this.selectedStartDateTime >= this.selectedDateTime) {
                        this.resetToFalseRangeParametersInMonthDays();
                        this.selectedStartDateTime = this.selectedDateTime;
                        dayObject.isStartOrEndOfRange = true;
                    }
                    else {
                        this.selectedEndDateTime = this.selectedDateTime;
                        dayObject.isStartOrEndOfRange = true;
                    }
                }
                if (this.rangeSelector && this.selectedStartDateTime != null && this.selectedEndDateTime != null)
                    this.fireRangeChangeEvent();
                else if (!this.rangeSelector)
                    this.fireChangeEvent();
            };
        /**
         * @param {?} dayObject
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.dayButtonOnHover = /**
         * @param {?} dayObject
         * @return {?}
         */
            function (dayObject) {
                if (!this.isRangeSelectorReady)
                    return;
                // تاریخ روزی که موس روی آن است
                /** @type {?} */
                var hoverCellDate = this.isPersian
                    ? PersianDateTime$1.fromPersianDate(dayObject.year, dayObject.month, dayObject.day).toDate()
                    : new Date(dayObject.year, dayObject.month, dayObject.day);
                try {
                    for (var _a = __values(this.daysInMonth), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var IMdsAngularDateTimePickerDay = _b.value;
                        /** @type {?} */
                        var currentDate = this.isPersian
                            ? PersianDateTime$1.fromPersianDate(IMdsAngularDateTimePickerDay.year, IMdsAngularDateTimePickerDay.month, IMdsAngularDateTimePickerDay.day).toDate()
                            : new Date(IMdsAngularDateTimePickerDay.year, IMdsAngularDateTimePickerDay.month, IMdsAngularDateTimePickerDay.day);
                        IMdsAngularDateTimePickerDay.isWithinRange = currentDate >= this.selectedStartDateTime && currentDate <= hoverCellDate;
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                var e_3, _c;
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.rejectButtonOnClick = /**
         * @return {?}
         */
            function () {
                this.selectedDateTime = null;
                this.selectedStartDateTime = this.selectedEndDateTime = null;
                this.resetToFalseRangeParametersInMonthDays();
                this.fireRangeChangeEvent();
            };
        /**
         * @return {?}
         */
        MdsAngularPersianDateTimePickerCoreComponent.prototype.confirmButtonOnClick = /**
         * @return {?}
         */
            function () {
                if (this.selectedStartDateTime != null && this.selectedEndDateTime != null)
                    this.fireRangeChangeEvent();
            };
        MdsAngularPersianDateTimePickerCoreComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mds-datetime-picker-core',
                        template: "<ng-container class=\"mds-datetime-picker\">\r\n  <div class=\"mds-datepicker-years-months\" [@monthAndYearSelectorVisibility]=\"monthSelectorVisibilityStateName\" (@monthAndYearSelectorVisibility.done)=\"monthsBlockVisibilityAnimationDone()\">\r\n    <table class=\"table table-sm text-center\">\r\n      <tbody>\r\n        <tr *ngFor=\"let row of [1, 2, 3, 4]\">\r\n          <td *ngFor=\"let col of [1, 2, 3]\" (click)=\"monthOnClick(monthNames[(row - 1) * 3 + col - 1])\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>\r\n            <div>{{monthNames[(row - 1) * 3 + col - 1]}}</div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div class=\"mds-datepicker-years-months\" [@monthAndYearSelectorVisibility]=\"yearSelectorVisibilityStateName\" (@monthAndYearSelectorVisibility.done)=\"yearsBlockVisibilityAnimationDone()\">\r\n    <table class=\"table table-sm table-striped text-center\">\r\n      <tbody>\r\n        <tr *ngFor=\"let row of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\">\r\n          <ng-container *ngFor=\"let col of [1, 2, 3, 4, 5]\">\r\n            <td *ngIf=\"yearsToSelect[(row - 1) * 5 + col - 1] as year\" (click)=\"yearOnClick(year)\" [ngClass]=\"{'warning1': year == yearString}\"\r\n              data-mds-persian-datetimepicker class=\"cursor-pointer\">\r\n              {{year}}\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div>\r\n    <table class=\"table table-sm table-condensed text-center\">\r\n      <thead>\r\n        <tr class=\"gray1\" *ngIf=\"isPersian\">\r\n          <td colspan=\"100\">\r\n            <table class=\"table table-sm gray1\">\r\n              <tr>\r\n                <td title=\"{{resources.NextYear}}\" (click)=\"nextYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&lt;&lt;</td>\r\n                <td title=\"{{resources.NextMonth}}\" (click)=\"nextMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&lt;</td>\r\n                <td (click)=\"selectYearButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{yearString}}</td>\r\n                <td (click)=\"monthButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{monthName}}</td>\r\n                <td title=\"{{resources.PreviousMonth}}\" (click)=\"previousMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;</td>\r\n                <td title=\"{{resources.PreviousYear}}\" (click)=\"previousYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;&gt;</td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"gray1\" *ngIf=\"!isPersian\">\r\n          <td colspan=\"100\">\r\n            <table class=\"table table-sm gray1\">\r\n              <tr>\r\n                <td title=\"{{resources.PreviousYear}}\" (click)=\"previousYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&lt;&lt;</td>\r\n                <td title=\"{{resources.PreviousMonth}}\" (click)=\"previousMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\"\r\n                  data-mds-persian-datetimepicker>&lt;</td>\r\n                <td (click)=\"monthButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{monthName}}</td>\r\n                <td (click)=\"selectYearButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{yearString}}</td>\r\n                <td title=\"{{resources.NextMonth}}\" (click)=\"nextMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;</td>\r\n                <td title=\"{{resources.NextYear}}\" (click)=\"nextYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;&gt;</td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n        <tr *ngIf=\"rangeSelector\">\r\n          <td colspan=\"2\"></td>\r\n          <td [ngClass]=\"{'text-muted': isRejectButtonDisable}\" title=\"{{resources.Reject}}\" (click)=\"rejectButtonOnClick()\" class=\"cursor-pointer font18\"\r\n            data-mds-persian-datetimepicker>&#215;</td>\r\n          <td></td>\r\n          <td [ngClass]=\"{'text-muted': isConfirmButtonDisable}\" title=\"{{resources.Confirm}}\" (click)=\"confirmButtonOnClick()\" class=\"cursor-pointer font18\"\r\n            data-mds-persian-datetimepicker>&#10003;</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n        <tr class=\"gray2\">\r\n          <td *ngFor=\"let dayName of weekdayNames; let i = index;\" [ngClass]=\"{'text-danger': i == 0}\">{{dayName}}</td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let row of [1, 2, 3, 4, 5, 6]\">\r\n          <ng-container *ngFor=\"let col of [1, 2, 3, 4, 5, 6, 7]\">\r\n            <td *ngIf=\"daysInMonth[(row - 1) * 7 + col - 1] as dayObject\" data-mds-persian-datetimepicker [@daysStateName]=\"daysAnimationStateName\"\r\n              class=\"cursor-pointer\" [ngClass]=\"{'text-danger': dayObject.holiDay,\r\n                        'today': dayObject.today,\r\n                        'warning1': dayObject.day == getSelectedDay,\r\n                        'selected-range': dayObject.isWithinRange,\r\n                        'text-muted': dayObject.disable}\" (click)=\"dayButtonOnClick(dayObject)\" (mouseenter)=\"dayButtonOnHover(dayObject)\">\r\n              <span [ngClass]=\"{'selected-day': dayObject.isStartOrEndOfRange}\" data-mds-persian-datetimepicker>{{dayObject.dayString}}</span>\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n        <tr *ngIf=\"timePicker\">\r\n          <td colspan=\"2\"></td>\r\n          <td class=\"cursor-pointer\" (click)=\"hourUpButtonOnClick()\" data-mds-persian-datetimepicker>\u25B2</td>\r\n          <td class=\"cursor-pointer\" (click)=\"minuteUpButtonOnClick()\" data-mds-persian-datetimepicker>\u25B2</td>\r\n          <td class=\"cursor-pointer\" (click)=\"secondUpButtonOnClick()\" data-mds-persian-datetimepicker>\u25B2</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n        <tr *ngIf=\"timePicker\">\r\n          <td colspan=\"2\"></td>\r\n          <td>{{hourString}}</td>\r\n          <td>{{minuteString}}</td>\r\n          <td>{{secondString}}</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n        <tr *ngIf=\"timePicker\">\r\n          <td colspan=\"2\"></td>\r\n          <td class=\"cursor-pointer\" (click)=\"hourDownButtonOnClick()\" data-mds-persian-datetimepicker>\u25BC</td>\r\n          <td class=\"cursor-pointer\" (click)=\"minuteDownButtonOnClick()\" data-mds-persian-datetimepicker>\u25BC</td>\r\n          <td class=\"cursor-pointer\" (click)=\"secondDownButtonOnClick()\" data-mds-persian-datetimepicker>\u25BC</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td class=\"cursor-pointer\" colspan=\"100\" (click)=\"todayButtonOnClick()\" data-mds-persian-datetimepicker> {{resources.Today}} </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  </div>\r\n</ng-container>",
                        animations: [
                            animations.trigger('daysStateName', [
                                animations.transition('void => *', [
                                    animations.style({ transform: 'rotateY(90deg)' }),
                                    animations.animate('200ms ease-in')
                                ])
                            ]),
                            animations.trigger('monthAndYearSelectorVisibility', [
                                animations.state('visible', animations.style({ opacity: 1, transform: 'rotateY(0deg)' })),
                                animations.state('hidden', animations.style({ opacity: 0, transform: 'rotateY(90deg)' })),
                                animations.transition('hidden => visible', [animations.animate('0.2s ease-in')]),
                                animations.transition('visible => hidden', [animations.animate('0.2s ease-out')])
                            ])
                        ],
                        styles: [".mds-datetime-picker{direction:ltr}.mds-datepicker-years-months{width:100%;height:100%;position:absolute;left:0;top:0;background-color:#fff;overflow:hidden;overflow-y:auto;z-index:999;direction:ltr}.width100{width:100%}.minWidth30px{min-width:30px}.text-center{text-align:center}.selected-day{display:block;margin:0 auto;background:#c9e1ff}.text-muted{opacity:.4}.warning1{background-color:#ffe66d}.gray1{background-color:#e8e8e8}.gray2{background-color:#f8f8f8}.selected-range{background-color:#d9f2e6}.today{background-color:#b4e5fb}.text-danger{color:red}.disable{opacity:.5}hr{margin:1px 0}button{width:100%}.font18{font-size:18px}.cursor-pointer{cursor:pointer}.table{margin-bottom:0}.table td{vertical-align:middle}td.cursor-pointer:hover{background-color:#e0e0e0}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:2px}.rotate90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.rotate-90{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}"]
                    }] }
        ];
        MdsAngularPersianDateTimePickerCoreComponent.ctorParameters = function () {
            return [
                { type: MdsDatetimePickerResourcesService }
            ];
        };
        MdsAngularPersianDateTimePickerCoreComponent.propDecorators = {
            templateType: [{ type: i0.Input }],
            initialValue: [{ type: i0.Input }],
            persianChar: [{ type: i0.Input }],
            isPersian: [{ type: i0.Input }],
            rangeSelector: [{ type: i0.Input }],
            timePicker: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            dateChanged: [{ type: i0.Output }],
            rangeDateChanged: [{ type: i0.Output }]
        };
        return MdsAngularPersianDateTimePickerCoreComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SafeHtmlPipe = (function () {
        function SafeHtmlPipe(sanitized) {
            this.sanitized = sanitized;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        SafeHtmlPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return 'this.sanitized.bypassSecurityTrustHtml(value)';
            };
        SafeHtmlPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'safeHtml'
                    },] }
        ];
        SafeHtmlPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return SafeHtmlPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PersianNumberPipe = (function () {
        function PersianNumberPipe() {
        }
        /**
         * @param {?} value
         * @param {?} isPersian
         * @return {?}
         */
        PersianNumberPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} isPersian
         * @return {?}
         */
            function (value, isPersian) {
                if (!isPersian)
                    return value;
                return MdsDatetimePickerUtility.toPersianNumber(value);
            };
        PersianNumberPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'persianNumber' },] }
        ];
        return PersianNumberPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MdsAngularPersianDateTimePickerModule = (function () {
        function MdsAngularPersianDateTimePickerModule() {
        }
        MdsAngularPersianDateTimePickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            formField.MatFormFieldModule, button.MatButtonModule, material.MatInputModule,
                            gridList.MatGridListModule, forms.FormsModule, forms.ReactiveFormsModule
                        ],
                        declarations: [
                            MdsAngularPersianDateTimePickerCoreComponent,
                            MdsAngularPersianDateTimePickerComponent, SafeHtmlPipe, PersianNumberPipe
                        ],
                        exports: [
                            MdsAngularPersianDateTimePickerComponent
                        ]
                    },] }
        ];
        return MdsAngularPersianDateTimePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.TemplateTypeEnum = TemplateTypeEnum;
    exports.TextBoxTypeEnum = TextBoxTypeEnum;
    exports.MdsDatetimePickerUtility = MdsDatetimePickerUtility;
    exports.MdsAngularPersianDateTimePickerComponent = MdsAngularPersianDateTimePickerComponent;
    exports.MdsAngularPersianDateTimePickerModule = MdsAngularPersianDateTimePickerModule;
    exports.ɵa = MdsAngularPersianDateTimePickerCoreComponent;
    exports.ɵd = PersianNumberPipe;
    exports.ɵc = SafeHtmlPipe;
    exports.ɵb = MdsDatetimePickerResourcesService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,