/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { TemplateTypeEnum, TextBoxTypeEnum } from './classes/enums';
import { MdsDatetimePickerUtility } from './classes/mds-datetime-picker.utility';
import { MdsAngularPersianDateTimePickerCoreComponent } from './core/mds-angular-persian-date-time-picker-core.component';
export class MdsAngularPersianDateTimePickerComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        //#region Input OutPut
        /**
         * از بوت استرپ استفاده شود یا متریال
         * TemplateTypeEnum
         */
        this.templateType = TemplateTypeEnum.bootstrap;
        /**
         * نوع نمایش تکس باکس
         * TextBoxTypeEnum
         */
        this.textBoxType = TextBoxTypeEnum.withButton;
        /**
         * مقدار اولیه
         */
        this.initialValue = '';
        /**
         * نوع نمایش دیت پیکر به صورت این لاین باشد یا نه
         */
        this.inLine = true;
        /**
         * آیا از کاراکترهای فارسی استفاده شود
         * وقتی تقویم میلادی است بدون تاثیر می شود
         */
        this.persianChar = true;
        /**
         * آیا دیت پیکر به شکل انتخاب رنج تاریخی باشد یا نه
         */
        this.rangeSelector = false;
        /**
         * تقویم میلادی باشد یا شمسی
         */
        this.isPersian = true;
        /**
         * آیا تایم پیکر نمایش داده بشود یا نه
         * در نوع انتخاب رنج تاریخی بدون تاثیر است
         */
        this.timePicker = true;
        /**
         * PlaceHolder
         */
        this.placeHolder = '';
        /**
         * آیکون
         */
        this.buttonIcon = '📅';
        /**
          * فرمت پیش فرض 1393/09/14   13:49:40
          * yyyy: سال چهار رقمی
          * yy: سال دو رقمی
          * MMMM: نام فارسی ماه
          * MM: عدد دو رقمی ماه
          * M: عدد یک رقمی ماه
          * dddd: نام فارسی روز هفته
          * dd: عدد دو رقمی روز ماه
          * d: عدد یک رقمی روز ماه
          * HH: ساعت دو رقمی با فرمت 00 تا 24
          * H: ساعت یک رقمی با فرمت 0 تا 24
          * hh: ساعت دو رقمی با فرمت 00 تا 12
          * h: ساعت یک رقمی با فرمت 0 تا 12
          * mm: عدد دو رقمی دقیقه
          * m: عدد یک رقمی دقیقه
          * ss: ثانیه دو رقمی
          * s: ثانیه یک رقمی
          * fff: میلی ثانیه 3 رقمی
          * ff: میلی ثانیه 2 رقمی
          * f: میلی ثانیه یک رقمی
          * tt: ب.ظ یا ق.ظ
          * t: حرف اول از ب.ظ یا ق.ظ
          **/
        this.format = '';
        /**
         * وقتی تاریخ انتخابی عوض می شود این اونت فراخوانی می شود
         */
        this.dateChanged = new EventEmitter();
        /**
         * وقتی رنج تاریخی انتخاب شده عوض می شود این اونت فراخوانی می شود
         */
        this.rangeDateChanged = new EventEmitter();
        /**
         * وقتی کلیدی روی تکس باکس انتخاب تاریخ فشرده می شود این اونت فراخوانی می شود
         */
        this.textBoxKeyDown = new EventEmitter();
        /**
         * وقتی روی تکس باکس انتخاب تاریخ بلور می شود این اونت فراخوانی می شود
         */
        this.textBoxBlur = new EventEmitter();
        /**
         * وقتی روی تکس باکس انتخاب تاریخ فوکوس می شود این اونت فراخوانی می شود
         */
        this.textBoxFocus = new EventEmitter();
        /**
         * وقتی روی تکس باکس انتخاب تاریخ تغییری ایجاد می شود این اونت فراخوانی می شود
         */
        this.textBoxChange = new EventEmitter();
        //#endregion
        this.myControl = new FormControl();
        this.afterViewInit = false;
        this.inClearFunction = false;
        this.showingDateTimePickerLocked = false;
        this.showDatePicker = false;
        this._selectedDateTime = null;
        this._selectedDateTimeRanges = null;
        //#region ControlValueAccessor
        this.propagateChange = () => { };
        this.valIMdsAngularDateTimePickerDateFn = () => { };
        /** @type {?} */
        const doc = document.getElementsByTagName('html')[0];
        doc.addEventListener('click', (event) => {
            /** @type {?} */
            let targetElement = (/** @type {?} */ (event.target));
            if (this.showDatePicker && event.target &&
                this.element.nativeElement !== event.target &&
                !this.element.nativeElement.contains(event.target) &&
                !targetElement.hasAttribute('data-mds-persian-datetimepicker')) {
                this.showDatePicker = false;
                this.mdsDateTimePickerCore.hideSelecMonthAndYearBlock();
                this.mdsDateTimePickerCore.resetIncompleteRanges();
            }
        }, false);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.initialValue = !this.persianChar ? MdsDatetimePickerUtility.toEnglishString(this.initialValue) : MdsDatetimePickerUtility.toPersianNumber(this.initialValue);
        // if (this.initialValue != '' && this.rangeSelector) {
        //   if (this.isPersian)
        //     MdsDatetimePickerUtility.getPersianDateRanges(this.initialValue);
        //   else
        //     MdsDatetimePickerUtility.getDateRanges(this.initialValue);
        // }
        // this.myControl.setValue(this.initialValue);
        if (!this.isPersian)
            this.persianChar = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.afterViewInit = true;
    }
    /**
     * @return {?}
     */
    get selectedDateTime() {
        return this._selectedDateTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedDateTime(value) {
        if (!this.mdsDateTimePickerCore)
            return;
        try {
            this.mdsDateTimePickerCore.setDateTimeByDate(!value ? null : new Date(value));
            if (value == null)
                this._selectedDateTime = null;
            else
                this._selectedDateTime = new Date(value);
        }
        catch (e) {
            this.clear();
            console.error(e);
        }
    }
    /**
     * @return {?}
     */
    get selectedDateTimeRanges() {
        return this._selectedDateTimeRanges;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set selectedDateTimeRanges(values) {
        if (!this.mdsDateTimePickerCore)
            return;
        try {
            if (values == null || values.length < 2)
                return;
            this.mdsDateTimePickerCore.setDateTimeRangesByDate(values[0] == null ? null : new Date(values[0]), values[1] == null ? null : new Date(values[1]));
            this._selectedDateTimeRanges = [values[0], values[1]];
        }
        catch (e) {
            this.clear();
            console.error(e);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getEventObject(event) {
        return {
            eventArgs: event,
            selectedDate: this.mdsDateTimePickerCore.getSelectedDate,
            selectedRangeDates: this.mdsDateTimePickerCore.getSelectedRangeDates
        };
    }
    /**
     * @return {?}
     */
    getSelectedDateObject() {
        return {
            selectedDate: this.mdsDateTimePickerCore.getSelectedDate,
            selectedRangeDates: this.mdsDateTimePickerCore.getSelectedRangeDates
        };
    }
    /**
     * @return {?}
     */
    showDatePickerButtonClicked() {
        this.showDatePicker = !this.showDatePicker;
        if (this.showDatePicker) {
            //const rectObject = this.element.nativeElement.getBoundingClientRect();
            //this.topOffset = rectObject.top;
            //this.leftOffset = rectObject.left;
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    dateChangedHandler(date) {
        if (!this.afterViewInit)
            return;
        this.dateChanged.emit(date);
        if (date != null) {
            this.myControl.setValue(date.formatString);
            this.selectedDateTime = new Date(date.utcDateTime);
            if (!this.showingDateTimePickerLocked)
                this.showDatePicker = false;
            this.propagateChange(this.getSelectedDateObject());
        }
    }
    /**
     * @param {?} rangeDate
     * @return {?}
     */
    rangeDateChangedHandler(rangeDate) {
        if (!this.afterViewInit)
            return;
        this.myControl.setValue('');
        if (rangeDate == null) {
            this.rangeDateChanged.emit(rangeDate);
            this.selectedDateTimeRanges = [null, null];
            this.propagateChange(this.getSelectedDateObject());
            return;
        }
        if (rangeDate.startDate.formatString != '' && rangeDate.endDate.formatString != '')
            this.myControl.setValue(`${rangeDate.startDate.formatString} - ${rangeDate.endDate.formatString}`);
        this.rangeDateChanged.emit(rangeDate);
        if (rangeDate.startDate.formatString != '' && rangeDate.endDate.formatString != '' && !this.showingDateTimePickerLocked)
            this.showDatePicker = false;
        this.selectedDateTimeRanges = [rangeDate.startDate.utcDateTime, rangeDate.endDate.utcDateTime];
        this.propagateChange(this.getSelectedDateObject());
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dateTimeTextBoxOnFocusHandler(event) {
        document.getElementsByTagName('html')[0].click();
        try {
            if (this.selectedDateTime != null)
                this.mdsDateTimePickerCore.setDateTimeByDate(this.selectedDateTime);
        }
        catch (e) {
            this.clear();
            console.error(e);
        }
        this.showDatePickerButtonClicked();
        this.textBoxFocus.emit(this.getEventObject(event));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dateTimeTextBoxOnBlurHandler(event) {
        /** @type {?} */
        let value = !this.myControl.value ? '' : this.myControl.value.trim();
        if (this.persianChar)
            value = MdsDatetimePickerUtility.toPersianNumber(value);
        else
            value = MdsDatetimePickerUtility.toEnglishString(value);
        /** @type {?} */
        let targetElement = (/** @type {?} */ (event.target));
        if (!targetElement.hasAttribute('data-mds-persian-datetimepicker')) {
            this.showingDateTimePickerLocked = true;
            this.mdsDateTimePickerCore.setDateTimeByString(value);
            this.showingDateTimePickerLocked = false;
        }
        this.textBoxBlur.emit(this.getEventObject(event));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dateTimeTextBoxOnKeyDownHandler(event) {
        if (event.keyCode != 13) {
            this.textBoxKeyDown.emit(this.getEventObject(event));
            return;
        }
        /** @type {?} */
        let value = event.target.value.trim();
        if (!value)
            this.mdsDateTimePickerCore.clearDateTimePicker();
        else
            this.mdsDateTimePickerCore.setDateTimeByString(value);
        this.showDatePicker = false;
        this.textBoxKeyDown.emit(this.getEventObject(event));
    }
    /**
     * @return {?}
     */
    clear() {
        if (this.inClearFunction || !this.mdsDateTimePickerCore)
            return;
        this.inClearFunction = true;
        this.myControl.setValue('');
        this.selectedDateTime = null;
        this.selectedDateTimeRanges = [null, null];
        this.mdsDateTimePickerCore.clearDateTimePicker();
        this.inClearFunction = false;
    }
    /**
     * @param {?} dateTime
     * @return {?}
     */
    setDateTime(dateTime) {
        try {
            this.mdsDateTimePickerCore.setDateTimeByDate(dateTime);
        }
        catch (e) {
            this.clear();
            console.error(e);
        }
    }
    /**
     * @param {?} startDateTime
     * @param {?} endDateTime
     * @return {?}
     */
    setDateTimeRanges(startDateTime, endDateTime) {
        try {
            this.mdsDateTimePickerCore.setDateTimeRangesByDate(startDateTime, endDateTime);
        }
        catch (e) {
            this.clear();
            console.error(e);
        }
    }
    /**
     * @return {?}
     */
    showDateTimePicker() {
        this.showDatePicker = true;
    }
    /**
     * @return {?}
     */
    hideDateTimePicker() {
        this.showDatePicker = false;
    }
    /**
     * @param {?} valueModel
     * @return {?}
     */
    writeValue(valueModel) {
        if (!valueModel || (!valueModel.selectedDate && !valueModel.selectedRangeDates)) {
            this.clear();
            return;
        }
        if (this.rangeSelector && valueModel.selectedRangeDates)
            this.selectedDateTimeRanges = [valueModel.selectedRangeDates.startDate.utcDateTime, valueModel.selectedRangeDates.endDate.utcDateTime];
        else if (valueModel.selectedDate)
            this.selectedDateTime = valueModel.selectedDate.utcDateTime;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        //this.disabled = isDisabled
        if (isDisabled)
            this.myControl.disable();
        else
            this.myControl.enable();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    valIMdsAngularDateTimePickerDate(c) {
        return this.valIMdsAngularDateTimePickerDateFn(c.value);
    }
}
MdsAngularPersianDateTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mds-angular-persian-datetimepicker',
                template: "<div *ngIf=\"inLine\" class=\"datepicker-box\">\r\n  <mds-datetime-picker-core *ngIf=\"inLine\" [initialValue]=\"initialValue\" [rangeSelector]=\"rangeSelector\" [persianChar]=\"persianChar\"\r\n    [isPersian]=\"isPersian\" [timePicker]=\"timePicker\" [format]=\"format\" [templateType]=\"templateType\" #mdsDateTimePickerCore\r\n    (dateChanged)=\"dateChangedHandler($event)\" (rangeDateChanged)=\"rangeDateChangedHandler($event)\">\r\n  </mds-datetime-picker-core>\r\n</div>\r\n\r\n<div *ngIf=\"!inLine && templateType == 2\" class=\"datepicker-container\">\r\n  <mat-form-field>\r\n    <input matInput type=\"text\" [placeholder]=\"placeHolder\" [formControl]=\"myControl\" (focus)=\"dateTimeTextBoxOnFocusHandler($event)\"\r\n      (blur)=\"dateTimeTextBoxOnBlurHandler($event)\" (keydown)=\"dateTimeTextBoxOnKeyDownHandler($event)\" data-mds-persian-datetimepicker>\r\n    <span matPrefix>\r\n      <span *ngIf=\"textBoxType == 1\" mat-button class=\"calendar-icon cursor-pointer\">\r\n        <span [innerHTML]=\"buttonIcon\"></span>\r\n      </span>\r\n    </span>\r\n  </mat-form-field>\r\n  <div class=\"datepicker\" [hidden]=\"!showDatePicker\">\r\n    <mds-datetime-picker-core #mdsDateTimePickerCore [initialValue]=\"initialValue\" [rangeSelector]=\"rangeSelector\" [persianChar]=\"persianChar\"\r\n      [isPersian]=\"isPersian\" [timePicker]=\"timePicker\" [format]=\"format\" [templateType]=\"2\" (dateChanged)=\"dateChangedHandler($event)\"\r\n      (rangeDateChanged)=\"rangeDateChangedHandler($event)\">\r\n    </mds-datetime-picker-core>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"!inLine && templateType == 1\" class=\"datepicker-container\">\r\n  <div class=\"input-group\" *ngIf=\"textBoxType == 1\">\r\n    <div class=\"input-group-prepend cursor-pointer calendar-icon\" (click)=\"showDatePickerButtonClicked()\">\r\n      <span class=\"input-group-text\" [innerHTML]=\"buttonIcon\"></span>\r\n    </div>\r\n    <input type=\"text\" class=\"form-control\" [placeholder]=\"placeHolder\" [formControl]=\"myControl\" (focus)=\"dateTimeTextBoxOnFocusHandler($event)\"\r\n      (blur)=\"dateTimeTextBoxOnBlurHandler($event)\" (keydown)=\"dateTimeTextBoxOnKeyDownHandler($event)\" data-mds-persian-datetimepicker>\r\n  </div>\r\n  <input type=\"text\" *ngIf=\"textBoxType == 2\" [placeholder]=\"placeHolder\" class=\"form-control\" [formControl]=\"myControl\" (focus)=\"dateTimeTextBoxOnFocusHandler($event)\"\r\n    (blur)=\"dateTimeTextBoxOnBlurHandler($event)\" (keydown)=\"dateTimeTextBoxOnKeyDownHandler($event)\" data-mds-persian-datetimepicker>\r\n  <div class=\"datepicker datepicker-bootstrap\" [hidden]=\"!showDatePicker\">\r\n    <mds-datetime-picker-core #mdsDateTimePickerCore [initialValue]=\"initialValue\" [rangeSelector]=\"rangeSelector\" [persianChar]=\"persianChar\"\r\n      [isPersian]=\"isPersian\" [timePicker]=\"timePicker\" [format]=\"format\" [templateType]=\"1\" (dateChanged)=\"dateChangedHandler($event)\"\r\n      (rangeDateChanged)=\"rangeDateChangedHandler($event)\">\r\n    </mds-datetime-picker-core>\r\n  </div>\r\n</div>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MdsAngularPersianDateTimePickerComponent),
                        multi: true
                    }
                ],
                styles: [".datepicker-container{position:relative;direction:ltr}.datepicker{background:#fff;position:absolute;z-index:999999;top:53px;left:0;min-width:300px;border:1px solid #f7f7f7;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.datepicker-bootstrap{top:34px}.hidden{display:none}.cursor-pointer{cursor:pointer}.datepicker-box{border:1px solid #ccc;position:relative}.mat-form-field{width:100%}.calendar-icon{font-size:18px}.calendar-icon[mat-button]{margin-right:6px;float:left}"]
            }] }
];
MdsAngularPersianDateTimePickerComponent.ctorParameters = () => [
    { type: ElementRef }
];
MdsAngularPersianDateTimePickerComponent.propDecorators = {
    mdsDateTimePickerCore: [{ type: ViewChild, args: ['mdsDateTimePickerCore',] }],
    templateType: [{ type: Input }],
    textBoxType: [{ type: Input }],
    initialValue: [{ type: Input }],
    inLine: [{ type: Input }],
    persianChar: [{ type: Input }],
    rangeSelector: [{ type: Input }],
    isPersian: [{ type: Input }],
    timePicker: [{ type: Input }],
    placeHolder: [{ type: Input }],
    buttonIcon: [{ type: Input }],
    format: [{ type: Input }],
    dateChanged: [{ type: Output }],
    rangeDateChanged: [{ type: Output }],
    textBoxKeyDown: [{ type: Output }],
    textBoxBlur: [{ type: Output }],
    textBoxFocus: [{ type: Output }],
    textBoxChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.mdsDateTimePickerCore;
    /**
     * از بوت استرپ استفاده شود یا متریال
     * TemplateTypeEnum
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.templateType;
    /**
     * نوع نمایش تکس باکس
     * TextBoxTypeEnum
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.textBoxType;
    /**
     * مقدار اولیه
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.initialValue;
    /**
     * نوع نمایش دیت پیکر به صورت این لاین باشد یا نه
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.inLine;
    /**
     * آیا از کاراکترهای فارسی استفاده شود
     * وقتی تقویم میلادی است بدون تاثیر می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.persianChar;
    /**
     * آیا دیت پیکر به شکل انتخاب رنج تاریخی باشد یا نه
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.rangeSelector;
    /**
     * تقویم میلادی باشد یا شمسی
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.isPersian;
    /**
     * آیا تایم پیکر نمایش داده بشود یا نه
     * در نوع انتخاب رنج تاریخی بدون تاثیر است
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.timePicker;
    /**
     * PlaceHolder
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.placeHolder;
    /**
     * آیکون
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.buttonIcon;
    /**
     * فرمت پیش فرض 1393/09/14   13:49:40
     * yyyy: سال چهار رقمی
     * yy: سال دو رقمی
     * MMMM: نام فارسی ماه
     * MM: عدد دو رقمی ماه
     * M: عدد یک رقمی ماه
     * dddd: نام فارسی روز هفته
     * dd: عدد دو رقمی روز ماه
     * d: عدد یک رقمی روز ماه
     * HH: ساعت دو رقمی با فرمت 00 تا 24
     * H: ساعت یک رقمی با فرمت 0 تا 24
     * hh: ساعت دو رقمی با فرمت 00 تا 12
     * h: ساعت یک رقمی با فرمت 0 تا 12
     * mm: عدد دو رقمی دقیقه
     * m: عدد یک رقمی دقیقه
     * ss: ثانیه دو رقمی
     * s: ثانیه یک رقمی
     * fff: میلی ثانیه 3 رقمی
     * ff: میلی ثانیه 2 رقمی
     * f: میلی ثانیه یک رقمی
     * tt: ب.ظ یا ق.ظ
     * t: حرف اول از ب.ظ یا ق.ظ
     *
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.format;
    /**
     * وقتی تاریخ انتخابی عوض می شود این اونت فراخوانی می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.dateChanged;
    /**
     * وقتی رنج تاریخی انتخاب شده عوض می شود این اونت فراخوانی می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.rangeDateChanged;
    /**
     * وقتی کلیدی روی تکس باکس انتخاب تاریخ فشرده می شود این اونت فراخوانی می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.textBoxKeyDown;
    /**
     * وقتی روی تکس باکس انتخاب تاریخ بلور می شود این اونت فراخوانی می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.textBoxBlur;
    /**
     * وقتی روی تکس باکس انتخاب تاریخ فوکوس می شود این اونت فراخوانی می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.textBoxFocus;
    /**
     * وقتی روی تکس باکس انتخاب تاریخ تغییری ایجاد می شود این اونت فراخوانی می شود
     * @type {?}
     */
    MdsAngularPersianDateTimePickerComponent.prototype.textBoxChange;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.myControl;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.afterViewInit;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.inClearFunction;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.showingDateTimePickerLocked;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.showDatePicker;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype._selectedDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype._selectedDateTimeRanges;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.propagateChange;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.valIMdsAngularDateTimePickerDateFn;
    /** @type {?} */
    MdsAngularPersianDateTimePickerComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,