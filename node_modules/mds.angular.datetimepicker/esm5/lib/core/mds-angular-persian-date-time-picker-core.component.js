/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { Mds } from 'mds.persian.datetime';
var PersianDateTime = Mds.PersianDateTime;
var PersianDayOfWeek = Mds.PersianDayOfWeek;
var GregorianDayOfWeek = Mds.GregorianDayOfWeek;
import { MdsDatetimePickerResourcesService } from '../service/mds-datetime-picker-resources.service';
import { MdsDatetimePickerUtility } from '../classes/mds-datetime-picker.utility';
import { TemplateTypeEnum } from '../classes/enums';
var MdsAngularPersianDateTimePickerCoreComponent = /** @class */ (function () {
    function MdsAngularPersianDateTimePickerCoreComponent(resourcesService) {
        this.resourcesService = resourcesService;
        this.templateType = TemplateTypeEnum.bootstrap;
        this.initialValue = '';
        this._persianChar = true;
        this._isPersian = true;
        this.rangeSelector = false;
        this.timePicker = false;
        /**
          * فرمت پیش فرض 1393/09/14   13:49:40
          * yyyy: سال چهار رقمی
          * yy: سال دو رقمی
          * MMMM: نام فارسی ماه
          * MM: عدد دو رقمی ماه
          * M: عدد یک رقمی ماه
          * dddd: نام فارسی روز هفته
          * dd: عدد دو رقمی روز ماه
          * d: عدد یک رقمی روز ماه
          * HH: ساعت دو رقمی با فرمت 00 تا 24
          * H: ساعت یک رقمی با فرمت 0 تا 24
          * hh: ساعت دو رقمی با فرمت 00 تا 12
          * h: ساعت یک رقمی با فرمت 0 تا 12
          * mm: عدد دو رقمی دقیقه
          * m: عدد یک رقمی دقیقه
          * ss: ثانیه دو رقمی
          * s: ثانیه یک رقمی
          * fff: میلی ثانیه 3 رقمی
          * ff: میلی ثانیه 2 رقمی
          * f: میلی ثانیه یک رقمی
          * tt: ب.ظ یا ق.ظ
          * t: حرف اول از ب.ظ یا ق.ظ
          **/
        this.format = '';
        this.dateChanged = new EventEmitter();
        this.rangeDateChanged = new EventEmitter();
        this.daysAnimationStateName = 'visible';
        this.monthOrYearSelectorVisibilityStateName = 'hidden';
        this.monthSelectorVisibilityStateName = 'hidden';
        this.yearSelectorVisibilityStateName = 'hidden';
        // تاریخی که برای نمایش تقویم استفاده می شود
        this._dateTime = null;
        this._persianDateTime = null;
        // روز انتخاب شده
        this._selectedDateTime = null;
        this._selectedPersianDateTime = null;
        // روز شروع انتخاب شده در رنج سلکتور
        this._selectedStartDateTime = null;
        this._selectedPersianStartDateTime = null;
        // روز پایانی انتخاب شده در رنج سلکتور
        this._selectedEndDateTime = null;
        this._selectedPersianEndDateTime = null;
        this._resources = null;
        this._year = 0;
        this._yearString = '';
        this._month = 0;
        this._monthName = '';
        this._monthNames = [];
        this._hour = 0;
        this._hourString = '';
        this._minute = 0;
        this._minuteString = '';
        this._second = 0;
        this._secondString = '';
        this._weekdayNames = [];
        this._IMdsAngularDateTimePickerDate = null;
        this._selectedRangeDatesObject = null;
    }
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.rangeSelector)
            this.timePicker = false;
        if (!this.isPersian)
            this.persianChar = false;
        if (this.initialValue != '') {
            if (this.rangeSelector) {
                try {
                    if (this.isPersian) {
                        /** @type {?} */
                        var ranges = MdsDatetimePickerUtility.getPersianDateRanges(this.initialValue);
                        this.setSelectedRangePersianDateTimes(ranges);
                    }
                    else {
                        /** @type {?} */
                        var ranges = MdsDatetimePickerUtility.getDateRanges(this.initialValue);
                        this.setSelectedRangeDateTimes(ranges);
                    }
                    this.dateTime = this.selectedStartDateTime;
                }
                catch (e) {
                    console.error('value is in wrong format, when rangeSelector is true you should write value like "1396/03/01 - 1396/03/15" or "2017/3/9 - 2017/3/10"', e);
                    this.setSelectedRangeDateTimes(null);
                    this.dateTime = null;
                }
            }
            else {
                try {
                    if (this.isPersian)
                        this.dateTime = PersianDateTime.parse(this.initialValue).toDate();
                    else
                        this.dateTime = new Date(Date.parse(this.initialValue));
                }
                catch (e) {
                    console.error('value is in wrong format, you should write value like "1396/03/01  11:30:27" or "2017/09/03  11:30:00", you can remove time', e);
                    this.dateTime = null;
                }
            }
        }
        else {
            this.dateTime = null;
        }
        this.updateYearsList();
        this.updateMonthDays();
        if (this.initialValue != '') {
            if (this.rangeSelector)
                this.fireRangeChangeEvent();
            else
                this.fireChangeEvent();
        }
    };
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "persianChar", {
        get: /**
         * @return {?}
         */
        function () {
            return this._persianChar;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._persianChar == value)
                return;
            this._persianChar = value;
            this._yearString = '';
            this.resetMonthDaysWithContent();
        },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isPersian", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isPersian;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isPersian = value;
            this._monthName = '';
            this._monthNames = [];
            this._weekdayNames = [];
            this._resources = null;
            this._yearString = '';
            if (this.dateTime != null) {
                this.updateYearsList();
                this.updateMonthDays();
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    /**
     * @param {?} dateString
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.splitStartEndDateString = /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        return dateString.split(' - ');
    };
    /**
     * @param {?} dateTimes
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.setSelectedRangeDateTimes = /**
     * @param {?} dateTimes
     * @return {?}
     */
    function (dateTimes) {
        dateTimes = dateTimes == null || dateTimes.length < 2 ? [null, null] : dateTimes;
        this.selectedStartDateTime = dateTimes[0];
        this.selectedEndDateTime = dateTimes[1];
    };
    /**
     * @param {?} persianDateTimes
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.setSelectedRangePersianDateTimes = /**
     * @param {?} persianDateTimes
     * @return {?}
     */
    function (persianDateTimes) {
        /** @type {?} */
        var ranges = [
            persianDateTimes[0] == null ? null : persianDateTimes[0].toDate(),
            persianDateTimes[1] == null ? null : persianDateTimes[1].toDate()
        ];
        this.setSelectedRangeDateTimes(ranges);
    };
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "persianStartDayOfMonth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.persianDateTime.startDayOfMonthDayOfWeek;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "gregorianStartDayOfMonth", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (new Date(this.dateTime.getFullYear(), this.dateTime.getMonth(), 1).getDay()));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} dateTime
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.clearTime = /**
     * @param {?} dateTime
     * @return {?}
     */
    function (dateTime) {
        if (dateTime == null)
            return;
        dateTime.setHours(0, 0, 0, 0);
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.getDateTimeFormat = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var format = this.format;
        if (format.trim() == '') {
            format = 'yyyy/MM/dd';
            if (this.timePicker && !this.rangeSelector)
                format += '   hh:mm:ss';
        }
        else if (this.rangeSelector || !this.timePicker)
            format = format.replace(/t*|f*|s*|m*|h*|H*/, '');
        return format;
    };
    /**
     * @param {?} dateTime
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.setDateTimeByDate = /**
     * @param {?} dateTime
     * @return {?}
     */
    function (dateTime) {
        this.dateTime = this.selectedDateTime = dateTime;
        this.selectedStartDateTime = !dateTime ? null : new Date(dateTime);
    };
    /**
     * @param {?} startDateTime
     * @param {?} endDateTime
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.setDateTimeRangesByDate = /**
     * @param {?} startDateTime
     * @param {?} endDateTime
     * @return {?}
     */
    function (startDateTime, endDateTime) {
        this.dateTime = this.selectedDateTime = startDateTime;
        this.selectedStartDateTime = startDateTime == null ? null : new Date(startDateTime);
        this.selectedEndDateTime = endDateTime == null ? null : new Date(endDateTime);
    };
    /**
     * @param {?} dateTimeString
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.setDateTimeByString = /**
     * @param {?} dateTimeString
     * @return {?}
     */
    function (dateTimeString) {
        try {
            if (dateTimeString == '') {
                this.clearDateTimePicker();
                return;
            }
            if (this.isPersian) {
                if (this.rangeSelector) {
                    /** @type {?} */
                    var startAndEndDateArray = this.splitStartEndDateString(dateTimeString);
                    this.dateTime = this.selectedStartDateTime = PersianDateTime.parse(startAndEndDateArray[0]).toDate();
                    this.selectedEndDateTime = PersianDateTime.parse(startAndEndDateArray[1]).toDate();
                    if (this.selectedStartDateTime > this.selectedEndDateTime)
                        throw new Error('Start date must be less than end date');
                }
                else
                    this.dateTime = this.selectedDateTime = PersianDateTime.parse(dateTimeString).toDate();
            }
            else {
                if (this.rangeSelector) {
                    /** @type {?} */
                    var startAndEndDateArray = this.splitStartEndDateString(dateTimeString);
                    this.dateTime = this.selectedStartDateTime = new Date(Date.parse(startAndEndDateArray[0]));
                    this.selectedEndDateTime = new Date(Date.parse(startAndEndDateArray[1]));
                    if (this.selectedStartDateTime > this.selectedEndDateTime)
                        throw new Error('Start date must be less than end date');
                }
                else
                    this.dateTime = this.selectedDateTime = new Date(Date.parse(dateTimeString));
            }
            if (this.rangeSelector)
                this.fireRangeChangeEvent();
            else
                this.fireChangeEvent();
            this.updateMonthDays();
        }
        catch (e) {
            this.clearDateTimePicker();
            throw new Error(e);
        }
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.clearDateTimePicker = /**
     * @return {?}
     */
    function () {
        this.dateTime = null;
        this.selectedDateTime = this.selectedStartDateTime = this.selectedEndDateTime = null;
        this.resetToFalseRangeParametersInMonthDays();
        if (this.rangeSelector)
            this.fireRangeChangeEvent();
        else
            this.fireChangeEvent();
        this.updateMonthDays();
    };
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getSelectedDateObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedRangeDates", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getSelectedRangeDatesObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "dateTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateTime;
        },
        set: /**
         * @param {?} dateTime
         * @return {?}
         */
        function (dateTime) {
            this._dateTime = dateTime == null ? new Date() : new Date(dateTime);
            this._persianDateTime = null;
            this._year = this._month = 0;
            this._yearString = this._monthName = '';
            this._hour = this._minute = this._second = 0;
            this._hourString = this._minuteString = this._secondString = '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "persianDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.dateTime == null)
                return null;
            if (this._persianDateTime != null)
                return this._persianDateTime;
            this._persianDateTime = new PersianDateTime(this.dateTime);
            return this._persianDateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedDateTime;
        },
        set: /**
         * @param {?} dateTime
         * @return {?}
         */
        function (dateTime) {
            this._selectedDateTime = dateTime == null ? null : new Date(dateTime);
            this._IMdsAngularDateTimePickerDate = null;
            this._selectedPersianDateTime = null;
            if (this.rangeSelector || !this.timePicker)
                this.clearTime(dateTime);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedPersianDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._selectedPersianDateTime != null)
                return this._selectedPersianDateTime;
            this._selectedPersianDateTime = new PersianDateTime(this.selectedDateTime);
            return this._selectedPersianDateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedStartDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedStartDateTime;
        },
        set: /**
         * @param {?} dateTime
         * @return {?}
         */
        function (dateTime) {
            this._selectedStartDateTime = dateTime == null ? null : new Date(dateTime);
            this._selectedRangeDatesObject = null;
            this._selectedPersianStartDateTime = null;
            this.clearTime(dateTime);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedPersianStartDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._selectedPersianStartDateTime != null)
                return this._selectedPersianStartDateTime;
            this._selectedPersianStartDateTime = new PersianDateTime(this.selectedStartDateTime);
            return this._selectedPersianStartDateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedEndDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedEndDateTime;
        },
        set: /**
         * @param {?} dateTime
         * @return {?}
         */
        function (dateTime) {
            this._selectedEndDateTime = dateTime == null ? null : new Date(dateTime);
            this._selectedRangeDatesObject = null;
            this._selectedPersianEndDateTime = null;
            this.clearTime(dateTime);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "selectedPersianEndDateTime", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._selectedPersianEndDateTime != null)
                return this._selectedPersianEndDateTime;
            this._selectedPersianEndDateTime = new PersianDateTime(this.selectedEndDateTime);
            return this._selectedPersianEndDateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "resources", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._resources != null)
                return this._resources;
            if (this.isPersian)
                this._resources = this.resourcesService.persianResources;
            else
                this._resources = this.resourcesService.englishResources;
            return this._resources;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "year", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._year > 0)
                return this._year;
            this._year = this.isPersian
                ? this.persianDateTime.year
                : this.dateTime.getFullYear();
            return this._year;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "yearString", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._yearString != '')
                return this._yearString;
            this._yearString = this.persianChar
                ? MdsDatetimePickerUtility.toPersianNumber(this.year.toString())
                : this.dateTime.getFullYear().toString();
            return this._yearString;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "month", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._month > 0)
                return this._month;
            this._month = this.isPersian
                ? PersianDateTime.getPersianMonthIndex(this.persianDateTime.monthName)
                : this.dateTime.getMonth();
            return this._month;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "monthName", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._monthName != '')
                return this._monthName;
            this._monthName = this.isPersian
                ? this.persianDateTime.monthName
                : PersianDateTime.getGregorianMonthNames[this.month];
            return this._monthName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "monthNames", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._monthNames != null && this._monthNames.length > 0)
                return this._monthNames;
            if (this.isPersian) {
                /** @type {?} */
                var allPersianMonths = PersianDateTime.getPersianMonthNames;
                this._monthNames = [
                    allPersianMonths[2], allPersianMonths[1], allPersianMonths[0],
                    allPersianMonths[5], allPersianMonths[4], allPersianMonths[3],
                    allPersianMonths[8], allPersianMonths[7], allPersianMonths[6],
                    allPersianMonths[11], allPersianMonths[10], allPersianMonths[9]
                ];
            }
            else {
                this._monthNames = PersianDateTime.getGregorianMonthNames;
            }
            return this._monthNames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "hour", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._hour > 0)
                return this._hour;
            this._hour = this.dateTime.getHours();
            return this._hour;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "hourString", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._hourString != '')
                return this._hourString;
            this._hourString = this.hour.toString();
            if (this.persianChar)
                this._hourString = MdsDatetimePickerUtility.toPersianNumber(this._hourString);
            return this._hourString;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "minute", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._minute > 0)
                return this._minute;
            this._minute = this.dateTime.getMinutes();
            return this._minute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "minuteString", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._minuteString != '')
                return this._minuteString;
            this._minuteString = this.minute.toString();
            if (this.persianChar)
                this._minuteString = MdsDatetimePickerUtility.toPersianNumber(this._minuteString);
            return this._minuteString;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "second", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._second > 0)
                return this._second;
            this._second = this.dateTime.getSeconds();
            return this._second;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "secondString", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._secondString != '')
                return this._secondString;
            this._secondString = this.second.toString();
            if (this.persianChar)
                this._secondString = MdsDatetimePickerUtility.toPersianNumber(this._secondString);
            return this._secondString;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "weekdayNames", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._weekdayNames != null && this._weekdayNames.length > 0)
                return this._weekdayNames;
            if (this.isPersian) {
                // حروف اول نام های روز هفته شمسی
                /** @type {?} */
                var persianWeekDayNames = PersianDateTime.getPersianWeekdayNames;
                this._weekdayNames = [
                    persianWeekDayNames[6][0], persianWeekDayNames[5][0], persianWeekDayNames[4][0],
                    persianWeekDayNames[3][0], persianWeekDayNames[2][0], persianWeekDayNames[1][0],
                    persianWeekDayNames[0][0]
                ];
            }
            else {
                /** @type {?} */
                var gregorianWeekDayNames = PersianDateTime.getGregorianWeekdayNames;
                this._weekdayNames = [
                    gregorianWeekDayNames[1][0] + gregorianWeekDayNames[1][1],
                    gregorianWeekDayNames[2][0] + gregorianWeekDayNames[2][1],
                    gregorianWeekDayNames[3][0] + gregorianWeekDayNames[3][1],
                    gregorianWeekDayNames[4][0] + gregorianWeekDayNames[4][1],
                    gregorianWeekDayNames[5][0] + gregorianWeekDayNames[5][1],
                    gregorianWeekDayNames[6][0] + gregorianWeekDayNames[6][1],
                    gregorianWeekDayNames[0][0] + gregorianWeekDayNames[0][1]
                ];
            }
            return this._weekdayNames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedDateObject", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.selectedDateTime == null)
                return null;
            if (this._IMdsAngularDateTimePickerDate != null)
                return this._IMdsAngularDateTimePickerDate;
            /** @type {?} */
            var format = this.getDateTimeFormat();
            if (this.isPersian) {
                this._IMdsAngularDateTimePickerDate = {
                    year: this.selectedPersianDateTime.year,
                    month: this.selectedPersianDateTime.month,
                    day: this.selectedPersianDateTime.day,
                    hour: this.selectedPersianDateTime.hour,
                    minute: this.selectedPersianDateTime.minute,
                    second: this.selectedPersianDateTime.second,
                    millisecond: this.selectedPersianDateTime.millisecond,
                    formatString: this.selectedPersianDateTime.toString(format),
                    utcDateTime: this.selectedDateTime
                };
            }
            else {
                this._IMdsAngularDateTimePickerDate = {
                    year: this.selectedDateTime.getFullYear(),
                    month: this.selectedDateTime.getMonth(),
                    day: this.selectedDateTime.getDate(),
                    hour: this.selectedDateTime.getHours(),
                    minute: this.selectedDateTime.getMinutes(),
                    second: this.selectedDateTime.getSeconds(),
                    millisecond: this.selectedDateTime.getMilliseconds(),
                    formatString: MdsDatetimePickerUtility.dateTimeToString(this.selectedDateTime, format),
                    utcDateTime: this.selectedDateTime
                };
            }
            if (this.persianChar)
                this._IMdsAngularDateTimePickerDate.formatString = MdsDatetimePickerUtility.toPersianNumber(this._IMdsAngularDateTimePickerDate.formatString);
            else
                this._IMdsAngularDateTimePickerDate.formatString = MdsDatetimePickerUtility.toEnglishString(this._IMdsAngularDateTimePickerDate.formatString);
            return this._IMdsAngularDateTimePickerDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedDay", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.getSelectedDateObject == null || this.rangeSelector)
                return 0;
            return this.getSelectedDateObject.day;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "getSelectedRangeDatesObject", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.rangeSelector || this.selectedStartDateTime == null && this.selectedEndDateTime == null)
                return null;
            if (this._selectedRangeDatesObject != null)
                return this._selectedRangeDatesObject;
            /** @type {?} */
            var format = this.getDateTimeFormat();
            /** @type {?} */
            var startDate;
            /** @type {?} */
            var endDate;
            if (this.isPersian) {
                startDate = {
                    year: this.selectedStartDateTime == null ? 0 : this.selectedPersianStartDateTime.year,
                    month: this.selectedStartDateTime == null ? 0 : this.selectedPersianStartDateTime.month,
                    day: this.selectedStartDateTime == null ? 0 : this.selectedPersianStartDateTime.day,
                    hour: 0,
                    minute: 0,
                    second: 0,
                    millisecond: 0,
                    formatString: this.selectedStartDateTime == null ? '' : this.selectedPersianStartDateTime.toString(format),
                    utcDateTime: this.selectedStartDateTime
                };
                endDate = {
                    year: this.selectedPersianEndDateTime == null ? 0 : this.selectedPersianEndDateTime.year,
                    month: this.selectedPersianEndDateTime == null ? 0 : this.selectedPersianEndDateTime.month,
                    day: this.selectedPersianEndDateTime == null ? 0 : this.selectedPersianEndDateTime.day,
                    hour: 0,
                    minute: 0,
                    second: 0,
                    millisecond: 0,
                    formatString: this.selectedPersianEndDateTime == null ? '' : this.selectedPersianEndDateTime.toString(format),
                    utcDateTime: this.selectedEndDateTime
                };
            }
            else {
                startDate = {
                    year: this.selectedStartDateTime == null ? 0 : this.selectedStartDateTime.getFullYear(),
                    month: this.selectedStartDateTime == null ? 0 : this.selectedStartDateTime.getMonth(),
                    day: this.selectedStartDateTime == null ? 0 : this.selectedStartDateTime.getDate(),
                    hour: 0,
                    minute: 0,
                    second: 0,
                    millisecond: 0,
                    formatString: this.selectedStartDateTime == null ? '' : MdsDatetimePickerUtility.dateTimeToString(this.selectedStartDateTime, format),
                    utcDateTime: this.selectedStartDateTime == null ? null : this.selectedStartDateTime
                };
                endDate = {
                    year: this.selectedEndDateTime == null ? 0 : this.selectedEndDateTime.getFullYear(),
                    month: this.selectedEndDateTime == null ? 0 : this.selectedEndDateTime.getMonth(),
                    day: this.selectedEndDateTime == null ? 0 : this.selectedEndDateTime.getDate(),
                    hour: 0,
                    minute: 0,
                    second: 0,
                    millisecond: 0,
                    formatString: this.selectedEndDateTime == null ? '' : MdsDatetimePickerUtility.dateTimeToString(this.selectedEndDateTime, format),
                    utcDateTime: this.selectedEndDateTime == null ? null : this.selectedEndDateTime
                };
            }
            this._selectedRangeDatesObject = {
                startDate: startDate,
                endDate: endDate
            };
            return this._selectedRangeDatesObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isRejectButtonDisable", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedStartDateTime == null && this.selectedEndDateTime == null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isConfirmButtonDisable", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selectedStartDateTime == null || this.selectedEndDateTime == null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.updateYearsList = /**
     * @return {?}
     */
    function () {
        this.yearsToSelect = [];
        /** @type {?} */
        var selectedYear = this.year;
        for (var i = selectedYear - 37; i <= selectedYear + 37; i++) {
            if (this.persianChar)
                this.yearsToSelect.push(MdsDatetimePickerUtility.toPersianNumber(i.toString()));
            else
                this.yearsToSelect.push(i.toString());
        }
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?} disabled
     * @param {?} holiDay
     * @param {?} isToday
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.getDayObject = /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?} disabled
     * @param {?} holiDay
     * @param {?} isToday
     * @return {?}
     */
    function (year, month, day, disabled, holiDay, isToday) {
        /** @type {?} */
        var isWithinDateRange = false;
        /** @type {?} */
        var isStartOrEndOfRange = false;
        if (this.rangeSelector && this.selectedStartDateTime != null) {
            /** @type {?} */
            var dateTime = this.isPersian
                ? PersianDateTime.fromPersianDate(year, month, day).toDate()
                : new Date(year, month, day);
            isWithinDateRange = dateTime >= this.selectedStartDateTime;
            if (this.selectedEndDateTime != null)
                isWithinDateRange = isWithinDateRange && dateTime <= this.selectedEndDateTime;
            isStartOrEndOfRange =
                (this.selectedStartDateTime != null && dateTime.getTime() == this.selectedStartDateTime.getTime()) ||
                    (this.selectedEndDateTime != null && dateTime.getTime() == this.selectedEndDateTime.getTime());
        }
        return {
            year: year,
            month: month,
            day: day,
            dayString: this.persianChar ? MdsDatetimePickerUtility.toPersianNumber(day.toString()) : day.toString(),
            disable: disabled,
            holiDay: holiDay,
            today: isToday,
            isWithinRange: isWithinDateRange,
            isStartOrEndOfRange: isStartOrEndOfRange
        };
    };
    Object.defineProperty(MdsAngularPersianDateTimePickerCoreComponent.prototype, "isRangeSelectorReady", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.rangeSelector)
                return false;
            if (this.selectedStartDateTime == null)
                return false; // هنوز روز شروع انتخاب نشده است
            if (this.selectedStartDateTime != null && this.selectedEndDateTime != null)
                return false; // رنج تاریخ انتخاب شده بود
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.updateMonthDays = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var days = [];
        /** @type {?} */
        var counter = 0;
        /** @type {?} */
        var year = 0;
        /** @type {?} */
        var month = 0;
        if (this.isPersian) {
            /** @type {?} */
            var persianDateTimeNow = PersianDateTime.now;
            /** @type {?} */
            var today = persianDateTimeNow.day;
            /** @type {?} */
            var isYearAndMonthInCurrentMonth = persianDateTimeNow.year == this.persianDateTime.year && persianDateTimeNow.month == this.persianDateTime.month;
            // روزهای ماه قبل
            if (this.persianStartDayOfMonth != PersianDayOfWeek.Saturday) {
                /** @type {?} */
                var previousPersianMonth = this.persianDateTime.addMonths(-1);
                year = previousPersianMonth.year;
                month = previousPersianMonth.month;
                for (var i = previousPersianMonth.getMonthDays - this.persianStartDayOfMonth + 1; i <= previousPersianMonth.getMonthDays; i++) {
                    counter++;
                    days.push(this.getDayObject(year, month, i, true, false, false));
                }
            }
            // روزهای ماه جاری
            year = this.persianDateTime.year;
            month = this.persianDateTime.month;
            for (var i = 1; i <= this.persianDateTime.getMonthDays; i++) {
                counter++;
                days.push(this.getDayObject(year, month, i, false, false, isYearAndMonthInCurrentMonth && i == today));
            }
            // روزهای ماه بعد
            /** @type {?} */
            var nextMonthPersianDateTime = this.persianDateTime.addMonths(1);
            year = nextMonthPersianDateTime.year;
            month = nextMonthPersianDateTime.month;
            for (var i = 1; counter <= (6 * 7) - 1; i++) {
                counter++;
                days.push(this.getDayObject(year, month, i, true, false, false));
            }
            // درست کردن راست به چپ بودن تقویم
            /** @type {?} */
            var temp = days.slice(0);
            for (var row = 0; row < 6; row++) {
                for (var column = 0; column < 7; column++) {
                    /** @type {?} */
                    var index1 = row * 7 + column;
                    /** @type {?} */
                    var index2 = Math.abs((row + 1) * 7 - (column + 1));
                    days[index1] = temp[index2];
                    if (column == 0)
                        days[index1].holiDay = true;
                }
            }
        }
        else {
            /** @type {?} */
            var dateTimeNow = new Date();
            /** @type {?} */
            var today = dateTimeNow.getDate();
            /** @type {?} */
            var isYearAndMonthInCurrentMonth = dateTimeNow.getMonth() == this.dateTime.getMonth() && dateTimeNow.getFullYear() == this.dateTime.getFullYear();
            // روزهای ماه قبل
            if (this.gregorianStartDayOfMonth != GregorianDayOfWeek.Saturday) {
                /** @type {?} */
                var dateTimeClone = new Date(this.dateTime);
                dateTimeClone.setMonth(this.dateTime.getMonth());
                year = dateTimeClone.getFullYear();
                month = dateTimeClone.getMonth();
                /** @type {?} */
                var previousMonthDays = new Date(dateTimeClone.getFullYear(), dateTimeClone.getMonth(), 0).getDate();
                for (var i = previousMonthDays - this.gregorianStartDayOfMonth + 1; i <= previousMonthDays; i++) {
                    counter++;
                    days.push(this.getDayObject(year, month - 1, i, true, false, false));
                }
            }
            // روزهای ماه جاری
            year = this.dateTime.getFullYear();
            month = this.dateTime.getMonth();
            /** @type {?} */
            var currentMonthDays = new Date(year, month, 0).getDate();
            for (var i = 1; i <= currentMonthDays; i++) {
                counter++;
                days.push(this.getDayObject(year, month, i, false, false, isYearAndMonthInCurrentMonth && i == today));
            }
            // روزهای ماه بعد
            /** @type {?} */
            var nextMonthDateTime = new Date(year, month + 1, 1);
            year = nextMonthDateTime.getFullYear();
            month = nextMonthDateTime.getMonth();
            for (var i = 1; counter <= (6 * 7) - 1; i++) {
                counter++;
                days.push(this.getDayObject(year, month, i, true, false, false));
            }
            // تعطیل کردن روزهای جمعه
            for (var row = 0; row < 6; row++) {
                for (var column = 0; column < 7; column++) {
                    /** @type {?} */
                    var index1 = row * 7 + column;
                    if (column == 0)
                        days[index1].holiDay = true;
                }
            }
        }
        this.daysInMonth = days;
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.fireChangeEvent = /**
     * @return {?}
     */
    function () {
        this.dateChanged.emit(this.getSelectedDateObject);
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.fireRangeChangeEvent = /**
     * @return {?}
     */
    function () {
        this.rangeDateChanged.emit(this.getSelectedRangeDatesObject);
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.resetToFalseRangeParametersInMonthDays = /**
     * @return {?}
     */
    function () {
        try {
            for (var _a = tslib_1.__values(this.daysInMonth), _b = _a.next(); !_b.done; _b = _a.next()) {
                var IMdsAngularDateTimePickerDay = _b.value;
                IMdsAngularDateTimePickerDay.isWithinRange = false;
                IMdsAngularDateTimePickerDay.isStartOrEndOfRange = false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _c;
    };
    /**
     * ریست کردن تمامی اطلاعات روزهای ماه
     */
    /**
     * ریست کردن تمامی اطلاعات روزهای ماه
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.resetMonthDaysWithContent = /**
     * ریست کردن تمامی اطلاعات روزهای ماه
     * @return {?}
     */
    function () {
        if (this.daysInMonth == undefined)
            return;
        try {
            for (var _a = tslib_1.__values(this.daysInMonth), _b = _a.next(); !_b.done; _b = _a.next()) {
                var IMdsAngularDateTimePickerDay = _b.value;
                IMdsAngularDateTimePickerDay.isWithinRange = false;
                IMdsAngularDateTimePickerDay.isStartOrEndOfRange = false;
                IMdsAngularDateTimePickerDay.dayString = this.persianChar
                    ? MdsDatetimePickerUtility.toPersianNumber(IMdsAngularDateTimePickerDay.day.toString())
                    : IMdsAngularDateTimePickerDay.day.toString();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _c;
    };
    /**
     * مخفی کردن بلاک های انتخاب ماه و سال
     */
    /**
     * مخفی کردن بلاک های انتخاب ماه و سال
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.hideSelecMonthAndYearBlock = /**
     * مخفی کردن بلاک های انتخاب ماه و سال
     * @return {?}
     */
    function () {
        this.monthOrYearSelectorVisibilityStateName = 'hidden';
        this.monthSelectorVisibilityStateName = 'hidden';
        this.yearSelectorVisibilityStateName = 'hidden';
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.resetIncompleteRanges = /**
     * @return {?}
     */
    function () {
        if (this.selectedStartDateTime == null || this.selectedEndDateTime == null) {
            this.selectedStartDateTime = this.selectedEndDateTime = null;
            this._selectedPersianStartDateTime = this._selectedPersianEndDateTime = null;
            this.resetToFalseRangeParametersInMonthDays();
        }
    };
    /**
     * کلیک روی دکمه نام ماه در بالای پیکر برای انتخاب ماه
     */
    /**
     * کلیک روی دکمه نام ماه در بالای پیکر برای انتخاب ماه
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.monthButtonOnClick = /**
     * کلیک روی دکمه نام ماه در بالای پیکر برای انتخاب ماه
     * @return {?}
     */
    function () {
        this.monthOrYearSelectorVisibilityStateName = 'visible';
        this.monthSelectorVisibilityStateName = 'visible';
    };
    /**
     * کلیک روی دکمه سال در بالای پیکر برای انتخاب سال
     */
    /**
     * کلیک روی دکمه سال در بالای پیکر برای انتخاب سال
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.selectYearButtonOnClick = /**
     * کلیک روی دکمه سال در بالای پیکر برای انتخاب سال
     * @return {?}
     */
    function () {
        this.monthOrYearSelectorVisibilityStateName = 'visible';
        this.yearSelectorVisibilityStateName = 'visible';
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.monthsBlockVisibilityAnimationDone = /**
     * @return {?}
     */
    function () {
        this.updateMonthDays();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.yearsBlockVisibilityAnimationDone = /**
     * @return {?}
     */
    function () {
        this.updateYearsList();
        this.updateMonthDays();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.nextYearButtonOnClick = /**
     * @return {?}
     */
    function () {
        if (this.isPersian)
            this.dateTime = this.persianDateTime.addYears(1).toDate();
        else
            this.dateTime = new Date(this.dateTime.setFullYear(this.dateTime.getFullYear() + 1));
        this.updateMonthDays();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.nextMonthButtonOnClick = /**
     * @return {?}
     */
    function () {
        if (this.isPersian)
            this.dateTime = this.persianDateTime.addMonths(1).toDate();
        else
            this.dateTime = new Date(this.dateTime.setMonth(this.dateTime.getMonth() + 1));
        this.updateMonthDays();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.previousMonthButtonOnClick = /**
     * @return {?}
     */
    function () {
        if (this.isPersian)
            this.dateTime = this.persianDateTime.addMonths(-1).toDate();
        else
            this.dateTime = new Date(this.dateTime.setMonth(this.dateTime.getMonth() - 1));
        this.updateMonthDays();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.previousYearButtonOnClick = /**
     * @return {?}
     */
    function () {
        if (this.isPersian)
            this.dateTime = this.persianDateTime.addYears(-1).toDate();
        else
            this.dateTime = new Date(this.dateTime.setFullYear(this.dateTime.getFullYear() - 1));
        this.updateMonthDays();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.hourUpButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.dateTime = new Date(this.dateTime.setHours(this.dateTime.getHours() + 1));
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.hourDownButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.dateTime = new Date(this.dateTime.setHours(this.dateTime.getHours() - 1));
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.minuteUpButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.dateTime = new Date(this.dateTime.setMinutes(this.dateTime.getMinutes() + 1));
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.minuteDownButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.dateTime = new Date(this.dateTime.setMinutes(this.dateTime.getMinutes() - 1));
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.secondUpButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.dateTime = new Date(this.dateTime.setSeconds(this.dateTime.getSeconds() + 1));
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.secondDownButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.dateTime = new Date(this.dateTime.setSeconds(this.dateTime.getSeconds() - 1));
    };
    /**
     * انتخاب ماه از روی لیست ماه ها
     */
    /**
     * انتخاب ماه از روی لیست ماه ها
     * @param {?} selectedMonthName
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.monthOnClick = /**
     * انتخاب ماه از روی لیست ماه ها
     * @param {?} selectedMonthName
     * @return {?}
     */
    function (selectedMonthName) {
        /** @type {?} */
        var monthIndex = this.isPersian
            ? PersianDateTime.getPersianMonthIndex(selectedMonthName)
            : PersianDateTime.getGregorianMonthNameIndex(selectedMonthName);
        if (this.isPersian)
            this.dateTime = this.persianDateTime.setPersianMonth(monthIndex + 1).toDate();
        else {
            /** @type {?} */
            var dateTimeClone = new Date(this.dateTime);
            dateTimeClone.setMonth(monthIndex);
            this.dateTime = new Date(dateTimeClone);
        }
        this.hideSelecMonthAndYearBlock();
    };
    /**
     * انتخاب سال از روی لیست سال ها
     */
    /**
     * انتخاب سال از روی لیست سال ها
     * @param {?} selectedYear
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.yearOnClick = /**
     * انتخاب سال از روی لیست سال ها
     * @param {?} selectedYear
     * @return {?}
     */
    function (selectedYear) {
        /** @type {?} */
        var year = this.isPersian ? Number(MdsDatetimePickerUtility.toEnglishNumber(selectedYear)) : Number(selectedYear);
        if (this.isPersian)
            this.dateTime = this.persianDateTime.setPersianYear(year).toDate();
        else {
            /** @type {?} */
            var dateTimeClone = new Date(this.dateTime);
            dateTimeClone.setFullYear(year);
            this.dateTime = new Date(dateTimeClone);
        }
        this.hideSelecMonthAndYearBlock();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.todayButtonOnClick = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dateTimeNow = new Date();
        if (this.dateTime.getFullYear() != dateTimeNow.getFullYear() || this.dateTime.getMonth() != dateTimeNow.getMonth()) {
            this.dateTime = dateTimeNow;
            this.updateMonthDays();
        }
        else
            this.dateTime = dateTimeNow;
        this.selectedDateTime = dateTimeNow;
        if (!this.rangeSelector)
            this.fireChangeEvent();
    };
    /**
     * @param {?} dayObject
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.dayButtonOnClick = /**
     * @param {?} dayObject
     * @return {?}
     */
    function (dayObject) {
        // روی روزهای ماه های قبل یا بعد کلیک شده است
        if (dayObject.disable) {
            if (this.isPersian)
                this.dateTime = PersianDateTime.fromPersianDate(dayObject.year, dayObject.month, dayObject.day).toDate();
            else {
                /** @type {?} */
                var dateTimeClone = new Date(this.dateTime);
                dateTimeClone.setDate(dayObject.day);
                dateTimeClone.setMonth(dayObject.month);
                dateTimeClone.setFullYear(dayObject.year);
                this.dateTime = dateTimeClone;
            }
            this.updateMonthDays();
            return;
        }
        // نال کردن تاریخ های شروع و پایان برای انتخاب مجدد رنج تاریخ 
        // در صورتی که رنج گرفته شده بود
        if (this.rangeSelector && this.selectedStartDateTime != null && this.selectedEndDateTime != null) {
            this.selectedStartDateTime = null;
            this.selectedEndDateTime = null;
            this.resetToFalseRangeParametersInMonthDays();
        }
        // \\
        // روز انتخاب شده
        this.selectedDateTime = this.isPersian
            ? PersianDateTime.fromPersianDateTime(dayObject.year, dayObject.month, dayObject.day, this.hour, this.minute, this.second, 0).toDate()
            : new Date(dayObject.year, dayObject.month, dayObject.day, this.hour, this.minute, this.second);
        if (this.rangeSelector) {
            if (this.selectedStartDateTime == null || this.selectedStartDateTime >= this.selectedDateTime) {
                this.resetToFalseRangeParametersInMonthDays();
                this.selectedStartDateTime = this.selectedDateTime;
                dayObject.isStartOrEndOfRange = true;
            }
            else {
                this.selectedEndDateTime = this.selectedDateTime;
                dayObject.isStartOrEndOfRange = true;
            }
        }
        if (this.rangeSelector && this.selectedStartDateTime != null && this.selectedEndDateTime != null)
            this.fireRangeChangeEvent();
        else if (!this.rangeSelector)
            this.fireChangeEvent();
    };
    /**
     * @param {?} dayObject
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.dayButtonOnHover = /**
     * @param {?} dayObject
     * @return {?}
     */
    function (dayObject) {
        if (!this.isRangeSelectorReady)
            return;
        // تاریخ روزی که موس روی آن است
        /** @type {?} */
        var hoverCellDate = this.isPersian
            ? PersianDateTime.fromPersianDate(dayObject.year, dayObject.month, dayObject.day).toDate()
            : new Date(dayObject.year, dayObject.month, dayObject.day);
        try {
            for (var _a = tslib_1.__values(this.daysInMonth), _b = _a.next(); !_b.done; _b = _a.next()) {
                var IMdsAngularDateTimePickerDay = _b.value;
                /** @type {?} */
                var currentDate = this.isPersian
                    ? PersianDateTime.fromPersianDate(IMdsAngularDateTimePickerDay.year, IMdsAngularDateTimePickerDay.month, IMdsAngularDateTimePickerDay.day).toDate()
                    : new Date(IMdsAngularDateTimePickerDay.year, IMdsAngularDateTimePickerDay.month, IMdsAngularDateTimePickerDay.day);
                IMdsAngularDateTimePickerDay.isWithinRange = currentDate >= this.selectedStartDateTime && currentDate <= hoverCellDate;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _c;
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.rejectButtonOnClick = /**
     * @return {?}
     */
    function () {
        this.selectedDateTime = null;
        this.selectedStartDateTime = this.selectedEndDateTime = null;
        this.resetToFalseRangeParametersInMonthDays();
        this.fireRangeChangeEvent();
    };
    /**
     * @return {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.confirmButtonOnClick = /**
     * @return {?}
     */
    function () {
        if (this.selectedStartDateTime != null && this.selectedEndDateTime != null)
            this.fireRangeChangeEvent();
    };
    MdsAngularPersianDateTimePickerCoreComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mds-datetime-picker-core',
                    template: "<ng-container class=\"mds-datetime-picker\">\r\n  <div class=\"mds-datepicker-years-months\" [@monthAndYearSelectorVisibility]=\"monthSelectorVisibilityStateName\" (@monthAndYearSelectorVisibility.done)=\"monthsBlockVisibilityAnimationDone()\">\r\n    <table class=\"table table-sm text-center\">\r\n      <tbody>\r\n        <tr *ngFor=\"let row of [1, 2, 3, 4]\">\r\n          <td *ngFor=\"let col of [1, 2, 3]\" (click)=\"monthOnClick(monthNames[(row - 1) * 3 + col - 1])\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>\r\n            <div>{{monthNames[(row - 1) * 3 + col - 1]}}</div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div class=\"mds-datepicker-years-months\" [@monthAndYearSelectorVisibility]=\"yearSelectorVisibilityStateName\" (@monthAndYearSelectorVisibility.done)=\"yearsBlockVisibilityAnimationDone()\">\r\n    <table class=\"table table-sm table-striped text-center\">\r\n      <tbody>\r\n        <tr *ngFor=\"let row of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\">\r\n          <ng-container *ngFor=\"let col of [1, 2, 3, 4, 5]\">\r\n            <td *ngIf=\"yearsToSelect[(row - 1) * 5 + col - 1] as year\" (click)=\"yearOnClick(year)\" [ngClass]=\"{'warning1': year == yearString}\"\r\n              data-mds-persian-datetimepicker class=\"cursor-pointer\">\r\n              {{year}}\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div>\r\n    <table class=\"table table-sm table-condensed text-center\">\r\n      <thead>\r\n        <tr class=\"gray1\" *ngIf=\"isPersian\">\r\n          <td colspan=\"100\">\r\n            <table class=\"table table-sm gray1\">\r\n              <tr>\r\n                <td title=\"{{resources.NextYear}}\" (click)=\"nextYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&lt;&lt;</td>\r\n                <td title=\"{{resources.NextMonth}}\" (click)=\"nextMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&lt;</td>\r\n                <td (click)=\"selectYearButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{yearString}}</td>\r\n                <td (click)=\"monthButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{monthName}}</td>\r\n                <td title=\"{{resources.PreviousMonth}}\" (click)=\"previousMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;</td>\r\n                <td title=\"{{resources.PreviousYear}}\" (click)=\"previousYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;&gt;</td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"gray1\" *ngIf=\"!isPersian\">\r\n          <td colspan=\"100\">\r\n            <table class=\"table table-sm gray1\">\r\n              <tr>\r\n                <td title=\"{{resources.PreviousYear}}\" (click)=\"previousYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&lt;&lt;</td>\r\n                <td title=\"{{resources.PreviousMonth}}\" (click)=\"previousMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\"\r\n                  data-mds-persian-datetimepicker>&lt;</td>\r\n                <td (click)=\"monthButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{monthName}}</td>\r\n                <td (click)=\"selectYearButtonOnClick()\" class=\"cursor-pointer\" data-mds-persian-datetimepicker>{{yearString}}</td>\r\n                <td title=\"{{resources.NextMonth}}\" (click)=\"nextMonthButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;</td>\r\n                <td title=\"{{resources.NextYear}}\" (click)=\"nextYearButtonOnClick()\" class=\"cursor-pointer font18 minWidth30px\" data-mds-persian-datetimepicker>&gt;&gt;</td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n        <tr *ngIf=\"rangeSelector\">\r\n          <td colspan=\"2\"></td>\r\n          <td [ngClass]=\"{'text-muted': isRejectButtonDisable}\" title=\"{{resources.Reject}}\" (click)=\"rejectButtonOnClick()\" class=\"cursor-pointer font18\"\r\n            data-mds-persian-datetimepicker>&#215;</td>\r\n          <td></td>\r\n          <td [ngClass]=\"{'text-muted': isConfirmButtonDisable}\" title=\"{{resources.Confirm}}\" (click)=\"confirmButtonOnClick()\" class=\"cursor-pointer font18\"\r\n            data-mds-persian-datetimepicker>&#10003;</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n        <tr class=\"gray2\">\r\n          <td *ngFor=\"let dayName of weekdayNames; let i = index;\" [ngClass]=\"{'text-danger': i == 0}\">{{dayName}}</td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let row of [1, 2, 3, 4, 5, 6]\">\r\n          <ng-container *ngFor=\"let col of [1, 2, 3, 4, 5, 6, 7]\">\r\n            <td *ngIf=\"daysInMonth[(row - 1) * 7 + col - 1] as dayObject\" data-mds-persian-datetimepicker [@daysStateName]=\"daysAnimationStateName\"\r\n              class=\"cursor-pointer\" [ngClass]=\"{'text-danger': dayObject.holiDay,\r\n                        'today': dayObject.today,\r\n                        'warning1': dayObject.day == getSelectedDay,\r\n                        'selected-range': dayObject.isWithinRange,\r\n                        'text-muted': dayObject.disable}\" (click)=\"dayButtonOnClick(dayObject)\" (mouseenter)=\"dayButtonOnHover(dayObject)\">\r\n              <span [ngClass]=\"{'selected-day': dayObject.isStartOrEndOfRange}\" data-mds-persian-datetimepicker>{{dayObject.dayString}}</span>\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n        <tr *ngIf=\"timePicker\">\r\n          <td colspan=\"2\"></td>\r\n          <td class=\"cursor-pointer\" (click)=\"hourUpButtonOnClick()\" data-mds-persian-datetimepicker>\u25B2</td>\r\n          <td class=\"cursor-pointer\" (click)=\"minuteUpButtonOnClick()\" data-mds-persian-datetimepicker>\u25B2</td>\r\n          <td class=\"cursor-pointer\" (click)=\"secondUpButtonOnClick()\" data-mds-persian-datetimepicker>\u25B2</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n        <tr *ngIf=\"timePicker\">\r\n          <td colspan=\"2\"></td>\r\n          <td>{{hourString}}</td>\r\n          <td>{{minuteString}}</td>\r\n          <td>{{secondString}}</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n        <tr *ngIf=\"timePicker\">\r\n          <td colspan=\"2\"></td>\r\n          <td class=\"cursor-pointer\" (click)=\"hourDownButtonOnClick()\" data-mds-persian-datetimepicker>\u25BC</td>\r\n          <td class=\"cursor-pointer\" (click)=\"minuteDownButtonOnClick()\" data-mds-persian-datetimepicker>\u25BC</td>\r\n          <td class=\"cursor-pointer\" (click)=\"secondDownButtonOnClick()\" data-mds-persian-datetimepicker>\u25BC</td>\r\n          <td colspan=\"2\"></td>\r\n        </tr>\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          <td class=\"cursor-pointer\" colspan=\"100\" (click)=\"todayButtonOnClick()\" data-mds-persian-datetimepicker> {{resources.Today}} </td>\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  </div>\r\n</ng-container>",
                    animations: [
                        trigger('daysStateName', [
                            transition('void => *', [
                                style({ transform: 'rotateY(90deg)' }),
                                animate('200ms ease-in')
                            ])
                        ]),
                        trigger('monthAndYearSelectorVisibility', [
                            state('visible', style({ opacity: 1, transform: 'rotateY(0deg)' })),
                            state('hidden', style({ opacity: 0, transform: 'rotateY(90deg)' })),
                            transition('hidden => visible', [animate('0.2s ease-in')]),
                            transition('visible => hidden', [animate('0.2s ease-out')])
                        ])
                    ],
                    styles: [".mds-datetime-picker{direction:ltr}.mds-datepicker-years-months{width:100%;height:100%;position:absolute;left:0;top:0;background-color:#fff;overflow:hidden;overflow-y:auto;z-index:999;direction:ltr}.width100{width:100%}.minWidth30px{min-width:30px}.text-center{text-align:center}.selected-day{display:block;margin:0 auto;background:#c9e1ff}.text-muted{opacity:.4}.warning1{background-color:#ffe66d}.gray1{background-color:#e8e8e8}.gray2{background-color:#f8f8f8}.selected-range{background-color:#d9f2e6}.today{background-color:#b4e5fb}.text-danger{color:red}.disable{opacity:.5}hr{margin:1px 0}button{width:100%}.font18{font-size:18px}.cursor-pointer{cursor:pointer}.table{margin-bottom:0}.table td{vertical-align:middle}td.cursor-pointer:hover{background-color:#e0e0e0}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:2px}.rotate90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.rotate-90{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}"]
                }] }
    ];
    MdsAngularPersianDateTimePickerCoreComponent.ctorParameters = function () { return [
        { type: MdsDatetimePickerResourcesService }
    ]; };
    MdsAngularPersianDateTimePickerCoreComponent.propDecorators = {
        templateType: [{ type: Input }],
        initialValue: [{ type: Input }],
        persianChar: [{ type: Input }],
        isPersian: [{ type: Input }],
        rangeSelector: [{ type: Input }],
        timePicker: [{ type: Input }],
        format: [{ type: Input }],
        dateChanged: [{ type: Output }],
        rangeDateChanged: [{ type: Output }]
    };
    return MdsAngularPersianDateTimePickerCoreComponent;
}());
export { MdsAngularPersianDateTimePickerCoreComponent };
if (false) {
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.templateType;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.initialValue;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._persianChar;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._isPersian;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.rangeSelector;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.timePicker;
    /**
     * فرمت پیش فرض 1393/09/14   13:49:40
     * yyyy: سال چهار رقمی
     * yy: سال دو رقمی
     * MMMM: نام فارسی ماه
     * MM: عدد دو رقمی ماه
     * M: عدد یک رقمی ماه
     * dddd: نام فارسی روز هفته
     * dd: عدد دو رقمی روز ماه
     * d: عدد یک رقمی روز ماه
     * HH: ساعت دو رقمی با فرمت 00 تا 24
     * H: ساعت یک رقمی با فرمت 0 تا 24
     * hh: ساعت دو رقمی با فرمت 00 تا 12
     * h: ساعت یک رقمی با فرمت 0 تا 12
     * mm: عدد دو رقمی دقیقه
     * m: عدد یک رقمی دقیقه
     * ss: ثانیه دو رقمی
     * s: ثانیه یک رقمی
     * fff: میلی ثانیه 3 رقمی
     * ff: میلی ثانیه 2 رقمی
     * f: میلی ثانیه یک رقمی
     * tt: ب.ظ یا ق.ظ
     * t: حرف اول از ب.ظ یا ق.ظ
     *
     * @type {?}
     */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.format;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.dateChanged;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.rangeDateChanged;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.daysAnimationStateName;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.monthOrYearSelectorVisibilityStateName;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.monthSelectorVisibilityStateName;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.yearSelectorVisibilityStateName;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.showMonthSelectorBlock;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.showYearsSelectorBlock;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._dateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._persianDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedPersianDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedStartDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedPersianStartDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedEndDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedPersianEndDateTime;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.yearsToSelect;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.daysInMonth;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._resources;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._year;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._yearString;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._month;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._monthName;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._monthNames;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._hour;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._hourString;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._minute;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._minuteString;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._second;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._secondString;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._weekdayNames;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._IMdsAngularDateTimePickerDate;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype._selectedRangeDatesObject;
    /** @type {?} */
    MdsAngularPersianDateTimePickerCoreComponent.prototype.resourcesService;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,